{
  if (result.isEmpty()) {
    return Collections.emptyList();
  }
  logger.debug("mapRow:{}",rowNum);
  final Buffer row=new FixedBuffer(result.getRow());
  final Application calleeApplication=readCalleeApplication(row);
  final long timestamp=TimeUtils.recoveryCurrentTimeMillis(row.readLong());
  final Map<LinkKey,LinkStatistics> linkStatisticsMap=new HashMap<LinkKey,LinkStatistics>();
  for (  KeyValue kv : result.raw()) {
    final byte[] qualifier=kv.getQualifier();
    Application callerApplication=readCallerApplication(qualifier);
    long requestCount=Bytes.toLong(kv.getBuffer(),kv.getValueOffset());
    short histogramSlot=ApplicationMapStatisticsUtils.getHistogramSlotFromColumnName(qualifier);
    String callerHost=ApplicationMapStatisticsUtils.getHost(qualifier);
    boolean isError=histogramSlot == (short)-1;
    if (logger.isDebugEnabled()) {
      logger.debug("    Fetched Callee. {} callerHost:{} -> {} (slot:{}/{}),  ",callerApplication,callerHost,calleeApplication,histogramSlot,requestCount);
    }
    LinkStatistics statistics=getLinkStatics(linkStatisticsMap,callerApplication,calleeApplication,timestamp);
    statistics.addCallData(callerApplication.getName(),callerApplication.getServiceTypeCode(),callerHost,calleeApplication.getServiceTypeCode(),(isError) ? (short)-1 : histogramSlot,requestCount);
    if (logger.isDebugEnabled()) {
      logger.debug("    Fetched Callee. statistics:{}",statistics);
    }
  }
  return linkStatisticsMap.values();
}
