{
  if (result.isEmpty()) {
    return Collections.emptyList();
  }
  logger.debug("mapRow:{}",rowNum);
  final KeyValue[] keyList=result.raw();
  final Map<LinkKey,LinkStatistics> linkStatisticsMap=new HashMap<LinkKey,LinkStatistics>();
  for (  KeyValue kv : keyList) {
    final byte[] row=kv.getRow();
    Application caller=readCallerApplication(row);
    final byte[] qualifier=kv.getQualifier();
    Application callee=readCalleeApplication(qualifier);
    long requestCount=Bytes.toLong(kv.getValue());
    short histogramSlot=ApplicationMapStatisticsUtils.getHistogramSlotFromColumnName(qualifier);
    String calleeHost=ApplicationMapStatisticsUtils.getHost(qualifier);
    boolean isError=histogramSlot == (short)-1;
    if (logger.isDebugEnabled()) {
      logger.debug("    Fetched Callee. {} -> {} (slot:{}/{}) calleeHost:{}",caller,callee,histogramSlot,requestCount,calleeHost);
    }
    LinkStatistics statistics=getLinkStatistics(linkStatisticsMap,caller,callee);
    statistics.addSample(calleeHost,callee.getServiceTypeCode(),(isError) ? (short)-1 : histogramSlot,requestCount);
  }
  return new ArrayList<LinkStatistics>(linkStatisticsMap.values());
}
