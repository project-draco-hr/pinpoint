{
  expectResult.add("#");
  expectResult.add("##");
  expectResult.add("###");
  expectResult.add("####");
  expectResult.add("###");
  expectResult.add("###");
  expectResult.add("##");
  SpanAlign root=makeSpanAlign(0,10);
  SpanCallTree callTree=new SpanCallTree(root);
  callTree.add(1,makeSpanAlign(root.getSpanBo(),SYNC,(short)0,-1,-1,1,1));
  SpanAlign remoteRoot=makeSpanAlign(4,5);
  SpanCallTree subTree=new SpanCallTree(remoteRoot);
  subTree.add(1,makeSpanAlign(remoteRoot.getSpanBo(),SYNC,(short)0,-1,-1,1,1));
  callTree.add(subTree);
  callTree.add(2,makeSpanAlign(root.getSpanBo(),SYNC,(short)1,-1,-1,2,1));
  callTree.add(-1,makeSpanAlign(root.getSpanBo(),SYNC,(short)2,-1,-1,3,1));
  callTree.add(1,makeSpanAlign(root.getSpanBo(),SYNC,(short)3,-1,-1,4,1));
  CallTreeIterator iterator=callTree.iterator();
  while (iterator.hasNext()) {
    CallTreeNode node=iterator.next();
    System.out.println(node.getDepth() + ", " + node.getValue().getStartTime());
  }
  assertDepth("before sort",callTree,expectResult);
  callTree.sort();
  expectResult.clear();
  expectResult.add("#");
  expectResult.add("##");
  expectResult.add("###");
  expectResult.add("###");
  expectResult.add("###");
  expectResult.add("####");
  expectResult.add("##");
  iterator=callTree.iterator();
  while (iterator.hasNext()) {
    CallTreeNode node=iterator.next();
    System.out.println(node.getDepth() + ", " + node.getValue().getStartTime());
  }
  assertDepth("after sort",callTree,expectResult);
}
