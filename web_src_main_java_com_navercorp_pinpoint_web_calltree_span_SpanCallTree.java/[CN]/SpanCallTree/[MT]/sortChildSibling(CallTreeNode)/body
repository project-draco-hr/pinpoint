{
  if (!parent.hasChild() || !parent.getChild().hasSibling()) {
    return;
  }
  final List<CallTreeNode> events=new ArrayList<>();
  final LinkedList<CallTreeNode> spans=new LinkedList<>();
  splitChildSiblingNodes(parent,events,spans);
  if (spans.size() == 0) {
    return;
  }
  Collections.sort(spans,new Comparator<CallTreeNode>(){
    @Override public int compare(    CallTreeNode source,    CallTreeNode target){
      return (int)(source.getValue().getStartTime() - target.getValue().getStartTime());
    }
  }
);
  final List<CallTreeNode> nodes=new ArrayList<>();
  for (  CallTreeNode event : events) {
    while (spans.peek() != null && event.getValue().getStartTime() > spans.peek().getValue().getStartTime()) {
      nodes.add(spans.poll());
    }
    nodes.add(event);
  }
  nodes.addAll(spans);
  CallTreeNode prev=null;
  for (  CallTreeNode node : nodes) {
    final CallTreeNode reset=null;
    node.setSibling(reset);
    if (prev == null) {
      parent.setChild(node);
      prev=node;
    }
 else {
      prev.setSibling(node);
      prev=node;
    }
  }
}
