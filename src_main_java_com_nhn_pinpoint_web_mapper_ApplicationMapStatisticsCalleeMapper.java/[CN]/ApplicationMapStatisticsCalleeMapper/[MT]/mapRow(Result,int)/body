{
  if (result.isEmpty()) {
    return Collections.emptyList();
  }
  final KeyValue[] keyList=result.raw();
  final List<TransactionFlowStatistics> stat=new ArrayList<TransactionFlowStatistics>(keyList.length + 10);
  for (  KeyValue kv : keyList) {
    final byte[] row=kv.getRow();
    String callerApplicationName=ApplicationMapStatisticsUtils.getApplicationNameFromRowKey(row);
    short callerServiceType=ApplicationMapStatisticsUtils.getApplicationTypeFromRowKey(row);
    final byte[] qualifier=kv.getQualifier();
    String calleeApplicationName=ApplicationMapStatisticsUtils.getDestApplicationNameFromColumnName(qualifier);
    short calleeServiceType=ApplicationMapStatisticsUtils.getDestServiceTypeFromColumnName(qualifier);
    long requestCount=Bytes.toLong(kv.getValue());
    short histogramSlot=ApplicationMapStatisticsUtils.getHistogramSlotFromColumnName(qualifier);
    String calleeHost=ApplicationMapStatisticsUtils.getHost(qualifier);
    boolean isError=histogramSlot == (short)-1;
    if (logger.isDebugEnabled()) {
      logger.debug("    Fetched. {}[{}] -> {}[{}] ({})",callerApplicationName,ServiceType.findServiceType(callerServiceType),calleeApplicationName,ServiceType.findServiceType(calleeServiceType),requestCount);
    }
    final String id=callerApplicationName + callerServiceType + calleeApplicationName+ calleeServiceType;
    TransactionFlowStatistics statistics=new TransactionFlowStatistics(callerApplicationName,callerServiceType,calleeApplicationName,calleeServiceType);
    statistics.addSample(calleeHost,calleeServiceType,(isError) ? (short)-1 : histogramSlot,requestCount);
    stat.add(statistics);
  }
  return stat;
}
