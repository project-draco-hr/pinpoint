{
  try {
    byte[] startRow=query.getStartRow();
    byte[] stopRow=query.getStopRow();
    String tableName=query.getTableName();
    columns=query.getColumns();
    HTableInterface htable=getHTable(tableName);
    if (query.isSingleRow()) {
      Get get=new Get(startRow);
      if (columns != null) {
        for (        HbaseColumn column : columns) {
          get.addColumn(column.getFamily().getBytes(),column.getColumnName().getBytes());
        }
      }
      Result result=htable.get(get);
      List<Result> resultList=new ArrayList<Result>(1);
      resultList.add(result);
      resultIterator=resultList.iterator();
    }
 else {
      Scan scan=new Scan();
      if (startRow != null) {
        scan.setStartRow(startRow);
      }
      if (stopRow != null) {
        scan.setStopRow(stopRow);
      }
      if (columns != null) {
        for (        HbaseColumn column : columns) {
          scan.addColumn(column.getFamily().getBytes(),column.getColumnName().getBytes());
        }
      }
      LOG.debug("Executing scanner: " + query);
      long start=System.currentTimeMillis();
      resultScanner=htable.getScanner(scan);
      LOG.trace("Time taken for scanner: " + (System.currentTimeMillis() - start));
      resultIterator=resultScanner.iterator();
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("UNable to execute SCANNER : " + query,e);
  }
  if (!resultIterator.hasNext()) {
    rSetIterator=new ArrayList<Map<String,byte[]>>().iterator();
    return;
  }
  rSetIterator=new Iterator<Map<String,byte[]>>(){
    public boolean hasNext(){
      return hasnext();
    }
    public Map<String,byte[]> next(){
      return getARow();
    }
    public void remove(){
    }
  }
;
}
