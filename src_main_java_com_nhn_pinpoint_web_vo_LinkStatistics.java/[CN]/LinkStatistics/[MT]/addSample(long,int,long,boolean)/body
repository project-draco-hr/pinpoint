{
  logger.info("Add sample. timeslot=" + timestamp + ", responseTimeslot="+ responseTimeslot+ ", callCount="+ callCount+ ", failed="+ failed);
  if (failed) {
    failedCount+=callCount;
  }
 else {
    successCount+=callCount;
  }
  if (responseTimeslot == -1) {
    responseTimeslot=ERROR;
  }
 else   if (responseTimeslot == 0) {
    responseTimeslot=SLOW;
  }
  long value=histogramSummary.containsKey(responseTimeslot) ? histogramSummary.get(responseTimeslot) + callCount : callCount;
  histogramSummary.put(responseTimeslot,value);
  if (responseTimeslot != ERROR && responseTimeslot != SLOW) {
    for (int i=0; i < timeseriesValue.size(); i++) {
      SortedMap<Long,Long> map=timeseriesValue.get(i);
      if (i == timeseriesSlotIndex.get(responseTimeslot)) {
        long v=map.containsKey(timestamp) ? map.get(timestamp) + callCount : callCount;
        map.put(timestamp,v);
      }
 else {
        if (!map.containsKey(timestamp)) {
          map.put(timestamp,0L);
        }
      }
    }
  }
  if (timeseriesFaileureHistogram.containsKey(timestamp)) {
    Long[] array=timeseriesFaileureHistogram.get(timestamp);
    if (failed) {
      array[FAILED]+=callCount;
    }
 else {
      array[SUCCESS]+=callCount;
    }
  }
 else {
    Long[] array=new Long[2];
    array[SUCCESS]=0L;
    array[FAILED]=0L;
    if (failed) {
      array[FAILED]+=callCount;
    }
 else {
      array[SUCCESS]+=callCount;
    }
    timeseriesFaileureHistogram.put(timestamp,array);
  }
}
