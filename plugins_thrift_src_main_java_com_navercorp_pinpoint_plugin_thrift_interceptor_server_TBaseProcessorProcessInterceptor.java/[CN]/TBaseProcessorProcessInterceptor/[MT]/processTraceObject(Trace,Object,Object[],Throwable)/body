{
  try {
    SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    recorder.recordException(throwable);
    recorder.recordApi(this.descriptor);
  }
 catch (  Throwable t) {
    logger.warn("Error processing trace object. Cause:{}",t.getMessage(),t);
  }
 finally {
    trace.traceBlockEnd();
  }
  SpanRecorder recorder=trace.getSpanRecorder();
  String methodUri=getMethodUri(target);
  recorder.recordRpcName(methodUri);
  String localIpPort=UNKNOWN_ADDRESS;
  String remoteAddress=UNKNOWN_ADDRESS;
  if (args.length == 2 && args[0] instanceof TProtocol) {
    TProtocol inputProtocol=(TProtocol)args[0];
    TTransport inputTransport=inputProtocol.getTransport();
    if (inputTransport instanceof SocketFieldAccessor) {
      Socket socket=((SocketFieldAccessor)inputTransport)._$PINPOINT$_getSocket();
      if (socket != null) {
        localIpPort=ThriftUtils.getHostPort(socket.getLocalSocketAddress());
        remoteAddress=ThriftUtils.getHost(socket.getRemoteSocketAddress());
      }
    }
 else {
      if (isDebug) {
        logger.debug("Invalid target object. Need field accessor({}).",SocketFieldAccessor.class.getName());
      }
    }
  }
  if (localIpPort != UNKNOWN_ADDRESS) {
    recorder.recordEndPoint(localIpPort);
  }
  if (remoteAddress != UNKNOWN_ADDRESS) {
    recorder.recordRemoteAddress(remoteAddress);
  }
}
