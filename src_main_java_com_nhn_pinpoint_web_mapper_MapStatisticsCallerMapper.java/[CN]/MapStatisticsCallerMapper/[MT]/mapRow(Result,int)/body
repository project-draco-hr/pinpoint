{
  if (result.isEmpty()) {
    return Collections.emptyList();
  }
  logger.debug("mapRow:{}",rowNum);
  final KeyValue[] keyList=result.raw();
  final byte[] rowKey=result.getRow();
  final long timestamp=ApplicationMapStatisticsUtils.getTimestampFromRowKey(rowKey);
  Application caller=readCallerApplication(rowKey);
  final Map<LinkKey,LinkStatistics> linkStatisticsMap=new HashMap<LinkKey,LinkStatistics>();
  for (  KeyValue kv : keyList) {
    final byte[] family=kv.getFamily();
    if (Bytes.equals(family,HBaseTables.MAP_STATISTICS_CALLEE_CF_COUNTER)) {
      final byte[] qualifier=kv.getQualifier();
      Application callee=readCalleeApplication(qualifier);
      long requestCount=getValueToLong(kv);
      short histogramSlot=ApplicationMapStatisticsUtils.getHistogramSlotFromColumnName(qualifier);
      boolean isError=histogramSlot == (short)-1;
      String calleeHost=ApplicationMapStatisticsUtils.getHost(qualifier);
      if (logger.isDebugEnabled()) {
        logger.debug("    Fetched Caller.  {} -> {} (slot:{}/{}) calleeHost:{}",caller,callee,histogramSlot,requestCount,calleeHost);
      }
      LinkStatistics statistics=getLinkStatistics(linkStatisticsMap,caller,callee,timestamp);
      statistics.addCallData(caller.getName(),caller.getServiceTypeCode(),calleeHost,callee.getServiceTypeCode(),(isError) ? (short)-1 : histogramSlot,requestCount);
    }
 else     if (Bytes.equals(family,HBaseTables.MAP_STATISTICS_CALLEE_CF_VER2_COUNTER)) {
      final byte[] qualifier=kv.getQualifier();
      final Buffer buffer=new FixedBuffer(qualifier);
      Application callee=readCalleeApplication(buffer);
      String calleeHost=buffer.readPrefixedString();
      short histogramSlot=buffer.readShort();
      boolean isError=histogramSlot == (short)-1;
      String callerAgentId=buffer.readPrefixedString();
      long requestCount=getValueToLong(kv);
      if (logger.isDebugEnabled()) {
        logger.debug("    Fetched Caller.(New) {} {} -> {} (slot:{}/{}) calleeHost:{}",caller,callerAgentId,callee,histogramSlot,requestCount,calleeHost);
      }
      LinkStatistics statistics=getLinkStatistics(linkStatisticsMap,caller,callee,timestamp);
      statistics.addCallData(callerAgentId,caller.getServiceTypeCode(),calleeHost,callee.getServiceTypeCode(),(isError) ? (short)-1 : histogramSlot,requestCount);
    }
 else {
      throw new IllegalArgumentException("unknown ColumnFamily :" + Arrays.toString(family));
    }
  }
  return new ArrayList<LinkStatistics>(linkStatisticsMap.values());
}
