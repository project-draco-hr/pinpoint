{
  if (result.isEmpty()) {
    return new LinkStatisticsData();
  }
  logger.debug("mapRow:{}",rowNum);
  final Buffer row=new FixedBuffer(result.getRow());
  final Application caller=readCallerApplication(row);
  final long timestamp=TimeUtils.recoveryTimeMillis(row.readLong());
  final LinkStatisticsData linkStatisticsMap=new LinkStatisticsData();
  for (  KeyValue kv : result.raw()) {
    final byte[] family=kv.getFamily();
    if (Bytes.equals(family,HBaseTables.MAP_STATISTICS_CALLEE_CF_COUNTER)) {
      final byte[] qualifier=kv.getQualifier();
      final Application callee=readCalleeApplication(qualifier);
      if (filter.filter(callee)) {
        continue;
      }
      long requestCount=getValueToLong(kv);
      short histogramSlot=ApplicationMapStatisticsUtils.getHistogramSlotFromColumnName(qualifier);
      boolean isError=histogramSlot == (short)-1;
      String calleeHost=ApplicationMapStatisticsUtils.getHost(qualifier);
      if (logger.isDebugEnabled()) {
        logger.debug("    Fetched Caller.  {} -> {} (slot:{}/{}) calleeHost:{}",caller,callee,histogramSlot,requestCount,calleeHost);
      }
      final short slotTime=(isError) ? (short)-1 : histogramSlot;
      linkStatisticsMap.addCallData(caller,caller.getName(),callee,calleeHost,timestamp,slotTime,requestCount);
    }
 else     if (Bytes.equals(family,HBaseTables.MAP_STATISTICS_CALLEE_CF_VER2_COUNTER)) {
      final Buffer buffer=new OffsetFixedBuffer(kv.getBuffer(),kv.getQualifierOffset());
      final Application callee=readCalleeApplication(buffer);
      if (filter.filter(callee)) {
        continue;
      }
      String calleeHost=buffer.readPrefixedString();
      short histogramSlot=buffer.readShort();
      boolean isError=histogramSlot == (short)-1;
      String callerAgentId=buffer.readPrefixedString();
      long requestCount=getValueToLong(kv);
      if (logger.isDebugEnabled()) {
        logger.debug("    Fetched Caller.(New) {} {} -> {} (slot:{}/{}) calleeHost:{}",caller,callerAgentId,callee,histogramSlot,requestCount,calleeHost);
      }
      final short slotTime=(isError) ? (short)-1 : histogramSlot;
      linkStatisticsMap.addCallData(caller,callerAgentId,callee,calleeHost,timestamp,slotTime,requestCount);
    }
 else {
      throw new IllegalArgumentException("unknown ColumnFamily :" + Arrays.toString(family));
    }
  }
  return linkStatisticsMap;
}
