{
  final Method beforeMethod=searchMethod(targetInterceptorClazz,before,beforeParamList);
  if (beforeMethod == null) {
    throw new RuntimeException(before + " method not found. " + Arrays.toString(beforeParamList));
  }
  final boolean beforeIgnoreMethod=beforeMethod.isAnnotationPresent(IgnoreMethod.class);
  final Method afterMethod=searchMethod(targetInterceptorClazz,after,afterParamList);
  if (afterMethod == null) {
    throw new RuntimeException(after + " method not found. " + Arrays.toString(afterParamList));
  }
  final boolean afterIgnoreMethod=afterMethod.isAnnotationPresent(IgnoreMethod.class);
  if (beforeIgnoreMethod == false && afterIgnoreMethod == false) {
    return new DefaultInterceptorDefinition(interceptorClazz,targetInterceptorClazz,interceptorType,CaptureType.AROUND,beforeMethod,afterMethod);
  }
  if (beforeIgnoreMethod == true) {
    return new DefaultInterceptorDefinition(interceptorClazz,targetInterceptorClazz,interceptorType,CaptureType.AFTER,null,afterMethod);
  }
  if (afterIgnoreMethod == true) {
    return new DefaultInterceptorDefinition(interceptorClazz,targetInterceptorClazz,interceptorType,CaptureType.BEFORE,beforeMethod,null);
  }
  return new DefaultInterceptorDefinition(interceptorClazz,targetInterceptorClazz,interceptorType,CaptureType.NON,null,null);
}
