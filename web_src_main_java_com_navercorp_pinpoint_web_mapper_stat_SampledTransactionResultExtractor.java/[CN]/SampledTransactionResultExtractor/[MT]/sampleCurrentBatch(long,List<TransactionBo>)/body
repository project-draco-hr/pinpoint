{
  List<Double> sampledNews=new ArrayList<>(dataPointsToSample.size());
  List<Double> sampledContinuations=new ArrayList<>(dataPointsToSample.size());
  List<Double> unsampledNews=new ArrayList<>(dataPointsToSample.size());
  List<Double> unsampledContinuations=new ArrayList<>(dataPointsToSample.size());
  List<Double> totals=new ArrayList<>(dataPointsToSample.size());
  for (  TransactionBo transactionBo : dataPointsToSample) {
    long collectInterval=transactionBo.getCollectInterval();
    long sampledNewCount=transactionBo.getSampledNewCount();
    long sampledContinuationCount=transactionBo.getSampledContinuationCount();
    long unsampledNewCount=transactionBo.getUnsampledNewCount();
    long unsampledContinuationCount=transactionBo.getUnsampledContinuationCount();
    long total=sampledNewCount + sampledContinuationCount + unsampledNewCount+ unsampledContinuationCount;
    sampledNews.add(calculateTps(sampledNewCount,collectInterval));
    sampledContinuations.add(calculateTps(sampledContinuationCount,collectInterval));
    unsampledNews.add(calculateTps(unsampledNewCount,collectInterval));
    unsampledContinuations.add(calculateTps(unsampledContinuationCount,collectInterval));
    totals.add(calculateTps(total,collectInterval));
  }
  SampledTransaction sampledTransaction=new SampledTransaction();
  sampledTransaction.setSampledNew(createPoint(timestamp,sampledNews));
  sampledTransaction.setSampledContinuation(createPoint(timestamp,sampledContinuations));
  sampledTransaction.setUnsampledNew(createPoint(timestamp,unsampledNews));
  sampledTransaction.setUnsampledContinuation(createPoint(timestamp,unsampledContinuations));
  sampledTransaction.setTotal(createPoint(timestamp,totals));
  return sampledTransaction;
}
