{
  this.profileEnable=readBoolean(prop,"PROFILE_ENABLE",true);
  this.collectorServerIp=readString(prop,"SERVER_IP","127.0.0.1");
  this.collectorServerPort=readInt(prop,"SERVER_UDP_PORT",9995);
  String temp=null;
  if ((temp=prop.getProperty("AGENT_TCP_LISTEN_PORT")) != null) {
    this.AGENT_TCP_LISTEN_PORT=Integer.parseInt(temp);
    if (logger.isLoggable(Level.INFO)) {
      logger.info("AGENT_TCP_LISTEN_PORT=" + AGENT_TCP_LISTEN_PORT);
    }
  }
  if ((temp=prop.getProperty("SERVER_TCP_LISTEN_PORT")) != null) {
    this.SERVER_TCP_LISTEN_PORT=Integer.parseInt(temp);
    if (logger.isLoggable(Level.INFO)) {
      logger.info("SERVER_TCP_LISTEN_PORT=" + SERVER_TCP_LISTEN_PORT);
    }
  }
  if ((temp=prop.getProperty("JVM_STAT_GAP")) != null) {
    this.JVM_STAT_GAP=Long.parseLong(temp);
    if (logger.isLoggable(Level.INFO)) {
      logger.info("JVM_STAT_GAP=" + JVM_STAT_GAP);
    }
  }
  if ((temp=prop.getProperty("SERVER_CONNECT_RETRY_GAP")) != null) {
    this.SERVER_CONNECT_RETRY_GAP=Long.parseLong(temp);
    if (logger.isLoggable(Level.INFO)) {
      logger.info("SERVER_CONNECT_RETRY_GAP=" + SERVER_CONNECT_RETRY_GAP);
    }
  }
  this.jdbcProfile=readBoolean(prop,"JDBC_PROFILE",true);
  this.jdbcProfileMySql=readBoolean(prop,"JDBC_PROFILE_MYSQL",true);
  this.jdbcProfileMsSql=readBoolean(prop,"JDBC_PROFILE_MSSQL",true);
  this.jdbcProfileOracle=readBoolean(prop,"JDBC_PROFILE_ORACLE",true);
  this.jdbcProfileCubrid=readBoolean(prop,"JDBC_PROFILE_CUBRID",true);
  this.jdbcProfileDbcp=readBoolean(prop,"JDBC_PROFILE_DBCP",true);
  this.samplingElapsedTimeBaseEnable=readBoolean(prop,"sampling.elapsedtimebase.enable",true);
  this.samplingElapsedTimeBaseBufferSize=readInt(prop,"sampling.elapsedtimebase.buffersize",20);
  this.samplingElapsedTimeBaseDiscard=readBoolean(prop,"sampling.elapsedtimebase.discard",true);
  this.samplingElapsedTimeBaseDiscardTimeLimit=readLong(prop,"sampling.elapsedtimebase.discard.timelimit",1000);
  logger.info("configuration loaded successfully.");
}
