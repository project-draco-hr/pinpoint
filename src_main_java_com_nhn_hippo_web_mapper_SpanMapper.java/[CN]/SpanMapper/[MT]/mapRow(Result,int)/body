{
  byte[] rowKey=result.getRow();
  if (rowKey == null) {
    return Collections.emptyList();
  }
  long most=BytesUtils.bytesToFirstLong(rowKey);
  long least=BytesUtils.bytesToSecondLong(rowKey);
  KeyValue[] keyList=result.raw();
  List<SpanBo> spanList=new ArrayList<SpanBo>();
  Map<Integer,SpanBo> spanMap=new HashMap<Integer,SpanBo>();
  List<SpanEvent> spanEventBoList=new ArrayList<SpanEvent>();
  for (  KeyValue kv : keyList) {
    if (kv.getFamilyLength() == HBaseTables.TRACES_CF_SPAN.length) {
      SpanBo spanBo=new SpanBo();
      spanBo.setMostTraceId(most);
      spanBo.setLeastTraceId(least);
      spanBo.setCollectorAcceptTime(kv.getTimestamp());
      spanBo.setSpanID(Bytes.toInt(kv.getBuffer(),kv.getQualifierOffset()));
      spanBo.readValue(kv.getBuffer(),kv.getValueOffset());
      if (logger.isDebugEnabled()) {
        logger.debug("read span :{}",spanBo);
      }
      spanList.add(spanBo);
      spanMap.put(spanBo.getSpanId(),spanBo);
    }
 else     if (kv.getFamilyLength() == HBaseTables.TRACES_CF_TERMINALSPAN.length) {
      SpanEvent spanEventBo=new SpanEvent();
      spanEventBo.setMostTraceId(most);
      spanEventBo.setLeastTraceId(least);
      int spanId=Bytes.toInt(kv.getBuffer(),kv.getQualifierOffset());
      int spanIdOffset=4;
      short sequence=Bytes.toShort(kv.getBuffer(),kv.getQualifierOffset() + spanIdOffset);
      spanEventBo.setSpanId(spanId);
      spanEventBo.setSequence(sequence);
      spanEventBo.readValue(kv.getBuffer(),kv.getValueOffset());
      if (logger.isDebugEnabled()) {
        logger.debug("read spanEvent :{}",spanEventBo);
      }
      spanEventBoList.add(spanEventBo);
    }
  }
  for (  SpanEvent spanEventBo : spanEventBoList) {
    SpanBo spanBo=spanMap.get(spanEventBo.getSpanId());
    if (spanBo != null) {
      spanBo.addSpanEvent(spanEventBo);
    }
  }
  if (annotationMapper != null) {
    Map<Integer,List<AnnotationBo>> annotationMap=annotationMapper.mapRow(result,rowNum);
    addAnnotation(spanList,annotationMap);
  }
  return spanList;
}
