{
  if (logger.isInfoEnabled()) {
    logger.info("Waiting agent data on {}",this.socket.getLocalSocketAddress());
  }
  startLatch.countDown();
  while (state.get()) {
    boolean success=false;
    DatagramPacket packet=null;
    try {
      byte[] buffer=pool.getBuffer();
      packet=new DatagramPacket(buffer,AcceptedSize);
      try {
        socket.receive(packet);
      }
 catch (      SocketTimeoutException e) {
        continue;
      }
      if (logger.isDebugEnabled()) {
        logger.debug("DatagramPacket SocketAddress:" + packet.getSocketAddress() + " read size:"+ packet.getLength());
        if (logger.isTraceEnabled()) {
          logger.trace("dump packet:" + PacketUtils.dumpDatagramPacket(packet));
        }
      }
      success=true;
    }
 catch (    IOException e) {
      if (state.get() == false) {
      }
 else {
        logger.error(e.getMessage(),e);
      }
      continue;
    }
 finally {
      if (!success) {
        pool.returnPacket(packet.getData());
      }
    }
    if (logger.isDebugEnabled()) {
      logger.debug("pool getActiveCount:{}",worker.getActiveCount());
    }
    try {
      worker.execute(new DispatchPacket(packet));
    }
 catch (    RejectedExecutionException ree) {
      rejectedExecutionCount++;
      if (rejectedExecutionCount > 1000) {
        logger.warn("RejectedExecutionCount=1000");
        rejectedExecutionCount=0;
      }
    }
  }
}
