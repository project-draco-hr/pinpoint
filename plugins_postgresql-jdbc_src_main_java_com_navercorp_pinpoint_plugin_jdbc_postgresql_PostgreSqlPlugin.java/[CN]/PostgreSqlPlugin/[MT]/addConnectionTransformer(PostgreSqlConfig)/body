{
  transformTemplate.transform("org.postgresql.jdbc4.Jdbc4Connection",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      if (!target.isInterceptable()) {
        return null;
      }
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addInterceptor("com.navercorp.pinpoint.plugin.jdbc.postgresql.interceptor.PostgreSQLConnectionCreateInterceptor");
      target.addScopedInterceptor("com.navercorp.pinpoint.plugin.jdbc.postgresql.interceptor.PostgreSqlPreparedStatementCreateInterceptor3",PostgreSqlConstants.POSTGRESQL_SCOPE);
      return target.toBytecode();
    }
  }
);
  transformTemplate.transform("org.postgresql.jdbc3.Jdbc3Connection",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      if (!target.isInterceptable()) {
        return null;
      }
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.StatementCreateInterceptor",PostgreSqlConstants.POSTGRESQL_SCOPE);
      return target.toBytecode();
    }
  }
);
  transformTemplate.transform("org.postgresql.jdbc2.AbstractJdbc2Connection",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      if (!target.isInterceptable()) {
        return null;
      }
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.ConnectionCloseInterceptor",PostgreSqlConstants.POSTGRESQL_SCOPE);
      target.addScopedInterceptor("com.navercorp.pinpoint.plugin.jdbc.postgresql.interceptor.PostgreSqlPreparedStatementCreateInterceptor1",PostgreSqlConstants.POSTGRESQL_SCOPE);
      if (config.isProfileSetAutoCommit()) {
        target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.TransactionSetAutoCommitInterceptor",PostgreSqlConstants.POSTGRESQL_SCOPE);
      }
      if (config.isProfileCommit()) {
        target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.TransactionCommitInterceptor",PostgreSqlConstants.POSTGRESQL_SCOPE);
      }
      if (config.isProfileRollback()) {
        target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.TransactionRollbackInterceptor",PostgreSqlConstants.POSTGRESQL_SCOPE);
      }
      return target.toBytecode();
    }
  }
);
  transformTemplate.transform("org.postgresql.jdbc3.AbstractJdbc3Connection",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      if (!target.isInterceptable()) {
        return null;
      }
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addScopedInterceptor("com.navercorp.pinpoint.plugin.jdbc.postgresql.interceptor.PostgreSqlPreparedStatementCreateInterceptor2",PostgreSqlConstants.POSTGRESQL_SCOPE);
      return target.toBytecode();
    }
  }
);
}
