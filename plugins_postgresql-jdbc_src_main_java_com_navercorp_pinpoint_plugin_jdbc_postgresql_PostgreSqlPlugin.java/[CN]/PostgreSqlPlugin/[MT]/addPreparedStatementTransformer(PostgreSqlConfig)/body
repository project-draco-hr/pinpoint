{
  transformTemplate.transform("org.postgresql.jdbc2.AbstractJdbc2Statement",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.ParsingResultAccessor");
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.BindValueAccessor");
      int maxBindValueSize=config.getMaxSqlBindValueSize();
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.PreparedStatementExecuteQueryInterceptor",va(maxBindValueSize),PostgreSqlConstants.POSTGRESQL_SCOPE);
      return target.toBytecode();
    }
  }
);
  transformTemplate.transform("org.postgresql.jdbc3.AbstractJdbc3Statement",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.ParsingResultAccessor");
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.BindValueAccessor");
      final PreparedStatementBindingMethodFilter excludes=PreparedStatementBindingMethodFilter.excludes("setRowId","setNClob","setSQLXML");
      target.addScopedInterceptor(excludes,"com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.PreparedStatementBindVariableInterceptor",PostgreSqlConstants.POSTGRESQL_SCOPE,ExecutionPolicy.BOUNDARY);
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.StatementExecuteQueryInterceptor",PostgreSqlConstants.POSTGRESQL_SCOPE);
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.StatementExecuteUpdateInterceptor",PostgreSqlConstants.POSTGRESQL_SCOPE);
      return target.toBytecode();
    }
  }
);
}
