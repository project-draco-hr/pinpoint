{
  if (logger.isInfoEnabled()) {
    logger.info("Modifing. {}",javassistClassName);
  }
  byteCodeInstrumentor.checkLibrary(classLoader,javassistClassName);
  try {
    InstrumentClass aClass=byteCodeInstrumentor.getClass(javassistClassName);
    String[] args={"java.lang.String","net.spy.memcached.ops.Operation"};
    if (!checkCompatibility(aClass,args)) {
      return null;
    }
    aClass.addTraceVariable("__serviceCode","__setServiceCode","__getServiceCode","java.lang.String");
    Interceptor addOpInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.nhn.pinpoint.profiler.modifier.arcus.interceptor.AddOpInterceptor");
    aClass.addInterceptor("addOp",args,addOpInterceptor,Type.before);
    final List<Method> declaredMethods=aClass.getDeclaredMethods(new MemcachedMethodFilter());
    for (    Method method : declaredMethods) {
      SimpleAroundInterceptor apiInterceptor=(SimpleAroundInterceptor)byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.nhn.pinpoint.profiler.modifier.arcus.interceptor.ApiInterceptor");
      if (agent.getProfilerConfig().isMemcachedKeyTrace()) {
        final int index=ParameterUtils.findFirstString(method,3);
        if (index != -1) {
          ((ParameterExtractorSupport)apiInterceptor).setParameterExtractor(new IndexParameterExtractor(index));
        }
      }
      aClass.addScopeInterceptor(method.getMethodName(),method.getMethodParams(),apiInterceptor,ArcusScope.SCOPE);
    }
    return aClass.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(e.getMessage(),e);
    }
    return null;
  }
}
