{
  setL4TcpChannel(pinpointServerSocket);
  this.pinpointServerSocket.setMessageListener(new ServerMessageListener(){
    @Override public void handleSend(    SendPacket sendPacket,    SocketChannel channel){
      receive(sendPacket,channel);
    }
    @Override public void handleRequest(    RequestPacket requestPacket,    SocketChannel channel){
      requestResponse(requestPacket,channel);
    }
    @Override public HandshakeResponseCode handleHandshake(    Map properties){
      if (properties == null) {
        return HandshakeResponseType.ProtocolError.PROTOCOL_ERROR;
      }
      boolean hasAllType=AgentHandshakePropertyType.hasAllType(properties);
      if (!hasAllType) {
        return HandshakeResponseType.PropertyError.PROPERTY_ERROR;
      }
      boolean supportServer=MapUtils.getBoolean(properties,AgentHandshakePropertyType.SUPPORT_SERVER.getName(),true);
      if (supportServer) {
        return HandshakeResponseType.Success.DUPLEX_COMMUNICATION;
      }
 else {
        return HandshakeResponseType.Success.SIMPLEX_COMMUNICATION;
      }
    }
  }
);
  this.pinpointServerSocket.bind(bindAddress,port);
}
