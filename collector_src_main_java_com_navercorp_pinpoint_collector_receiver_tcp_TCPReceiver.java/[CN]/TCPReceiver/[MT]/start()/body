{
  for (  ChannelStateChangeEventHandler channelStateChangeEventHandler : this.channelStateChangeEventHandlers) {
    serverAcceptor.addStateChangeEventHandler(channelStateChangeEventHandler);
  }
  setL4TcpChannel(serverAcceptor);
  this.serverAcceptor.setMessageListener(new ServerMessageListener(){
    @Override public HandshakeResponseCode handleHandshake(    Map properties){
      if (properties == null) {
        return HandshakeResponseType.ProtocolError.PROTOCOL_ERROR;
      }
      boolean hasAllType=AgentHandshakePropertyType.hasAllType(properties);
      if (!hasAllType) {
        return HandshakeResponseType.PropertyError.PROPERTY_ERROR;
      }
      boolean supportServer=MapUtils.getBoolean(properties,AgentHandshakePropertyType.SUPPORT_SERVER.getName(),true);
      if (supportServer) {
        return HandshakeResponseType.Success.DUPLEX_COMMUNICATION;
      }
 else {
        return HandshakeResponseType.Success.SIMPLEX_COMMUNICATION;
      }
    }
    @Override public void handleSend(    SendPacket sendPacket,    PinpointSocket pinpointSocket){
      receive(sendPacket,pinpointSocket);
    }
    @Override public void handleRequest(    RequestPacket requestPacket,    PinpointSocket pinpointSocket){
      requestResponse(requestPacket,pinpointSocket);
    }
    @Override public void handlePing(    PingPacket pingPacket,    PinpointServer pinpointServer){
      recordPing(pingPacket,pinpointServer);
    }
  }
);
  this.serverAcceptor.bind(bindAddress,port);
}
