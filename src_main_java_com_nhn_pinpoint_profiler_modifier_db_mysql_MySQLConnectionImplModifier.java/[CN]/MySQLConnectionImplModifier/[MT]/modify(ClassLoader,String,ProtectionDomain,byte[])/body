{
  if (logger.isInfoEnabled()) {
    logger.info("Modifing. " + javassistClassName);
  }
  this.byteCodeInstrumentor.checkLibrary(classLoader,javassistClassName);
  try {
    InstrumentClass mysqlConnection=byteCodeInstrumentor.getClass(javassistClassName);
    mysqlConnection.addTraceVariable("__url","__setUrl","__getUrl","java.lang.Object");
    Interceptor closeConnection=new ConnectionCloseInterceptor();
    mysqlConnection.addInterceptor("close",null,closeConnection,Type.before);
    Interceptor createStatement=new StatementCreateInterceptor();
    mysqlConnection.addInterceptor("createStatement",null,createStatement,Type.after);
    Interceptor preparedStatement=new PreparedStatementCreateInterceptor();
    mysqlConnection.addInterceptor("prepareStatement",new String[]{"java.lang.String"},preparedStatement);
    final ProfilerConfig profilerConfig=agent.getProfilerConfig();
    if (profilerConfig.isJdbcProfileMySqlSetAutoCommit()) {
      Interceptor setAutocommit=new TransactionInterceptor(TransactionInterceptor.SET_AUTO_COMMIT);
      mysqlConnection.addInterceptor("setAutoCommit",new String[]{"boolean"},setAutocommit);
    }
    if (profilerConfig.isJdbcProfileMySqlCommit()) {
      Interceptor commit=new TransactionInterceptor(TransactionInterceptor.COMMIT);
      mysqlConnection.addInterceptor("commit",null,commit);
    }
    if (profilerConfig.isJdbcProfileMySqlRollback()) {
      Interceptor rollback=new TransactionInterceptor(TransactionInterceptor.ROLLBACK);
      mysqlConnection.addInterceptor("rollback",null,rollback);
    }
    printClassConvertComplete(javassistClassName);
    return mysqlConnection.toBytecode();
  }
 catch (  InstrumentException e) {
    if (logger.isWarnEnabled()) {
      logger.warn(this.getClass().getSimpleName() + " modify fail. Cause:" + e.getMessage(),e);
    }
    return null;
  }
}
