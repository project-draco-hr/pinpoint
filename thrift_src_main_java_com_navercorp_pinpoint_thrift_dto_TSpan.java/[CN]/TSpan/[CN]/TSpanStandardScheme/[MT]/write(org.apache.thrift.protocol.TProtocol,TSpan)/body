{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.agentId != null) {
    oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
    oprot.writeString(struct.agentId);
    oprot.writeFieldEnd();
  }
  if (struct.applicationName != null) {
    oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
    oprot.writeString(struct.applicationName);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldBegin(AGENT_START_TIME_FIELD_DESC);
  oprot.writeI64(struct.agentStartTime);
  oprot.writeFieldEnd();
  if (struct.transactionId != null) {
    oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
    oprot.writeBinary(struct.transactionId);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
  oprot.writeI64(struct.spanId);
  oprot.writeFieldEnd();
  if (struct.isSetParentSpanId()) {
    oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
    oprot.writeI64(struct.parentSpanId);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldBegin(START_TIME_FIELD_DESC);
  oprot.writeI64(struct.startTime);
  oprot.writeFieldEnd();
  if (struct.isSetElapsed()) {
    oprot.writeFieldBegin(ELAPSED_FIELD_DESC);
    oprot.writeI32(struct.elapsed);
    oprot.writeFieldEnd();
  }
  if (struct.rpc != null) {
    if (struct.isSetRpc()) {
      oprot.writeFieldBegin(RPC_FIELD_DESC);
      oprot.writeString(struct.rpc);
      oprot.writeFieldEnd();
    }
  }
  oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
  oprot.writeI16(struct.serviceType);
  oprot.writeFieldEnd();
  if (struct.endPoint != null) {
    if (struct.isSetEndPoint()) {
      oprot.writeFieldBegin(END_POINT_FIELD_DESC);
      oprot.writeString(struct.endPoint);
      oprot.writeFieldEnd();
    }
  }
  if (struct.remoteAddr != null) {
    if (struct.isSetRemoteAddr()) {
      oprot.writeFieldBegin(REMOTE_ADDR_FIELD_DESC);
      oprot.writeString(struct.remoteAddr);
      oprot.writeFieldEnd();
    }
  }
  if (struct.annotations != null) {
    if (struct.isSetAnnotations()) {
      oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.annotations.size()));
        for (        TAnnotation _iter14 : struct.annotations) {
          _iter14.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetFlag()) {
    oprot.writeFieldBegin(FLAG_FIELD_DESC);
    oprot.writeI16(struct.flag);
    oprot.writeFieldEnd();
  }
  if (struct.isSetErr()) {
    oprot.writeFieldBegin(ERR_FIELD_DESC);
    oprot.writeI32(struct.err);
    oprot.writeFieldEnd();
  }
  if (struct.spanEventList != null) {
    if (struct.isSetSpanEventList()) {
      oprot.writeFieldBegin(SPAN_EVENT_LIST_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.spanEventList.size()));
        for (        TSpanEvent _iter15 : struct.spanEventList) {
          _iter15.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.parentApplicationName != null) {
    if (struct.isSetParentApplicationName()) {
      oprot.writeFieldBegin(PARENT_APPLICATION_NAME_FIELD_DESC);
      oprot.writeString(struct.parentApplicationName);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetParentApplicationType()) {
    oprot.writeFieldBegin(PARENT_APPLICATION_TYPE_FIELD_DESC);
    oprot.writeI16(struct.parentApplicationType);
    oprot.writeFieldEnd();
  }
  if (struct.acceptorHost != null) {
    if (struct.isSetAcceptorHost()) {
      oprot.writeFieldBegin(ACCEPTOR_HOST_FIELD_DESC);
      oprot.writeString(struct.acceptorHost);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetApiId()) {
    oprot.writeFieldBegin(API_ID_FIELD_DESC);
    oprot.writeI32(struct.apiId);
    oprot.writeFieldEnd();
  }
  if (struct.exceptionInfo != null) {
    if (struct.isSetExceptionInfo()) {
      oprot.writeFieldBegin(EXCEPTION_INFO_FIELD_DESC);
      struct.exceptionInfo.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetApplicationServiceType()) {
    oprot.writeFieldBegin(APPLICATION_SERVICE_TYPE_FIELD_DESC);
    oprot.writeI16(struct.applicationServiceType);
    oprot.writeFieldEnd();
  }
  if (struct.isSetLoggingTransactionInfo()) {
    oprot.writeFieldBegin(LOGGING_TRANSACTION_INFO_FIELD_DESC);
    oprot.writeByte(struct.loggingTransactionInfo);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
