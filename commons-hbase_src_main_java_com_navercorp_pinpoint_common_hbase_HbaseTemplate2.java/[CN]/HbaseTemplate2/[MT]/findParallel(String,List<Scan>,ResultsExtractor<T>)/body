{
  if (!this.enableParallelScan || scans.size() == 1) {
    return find(tableName,scans,action);
  }
  List<T> results=new ArrayList<>(scans.size());
  List<Callable<T>> callables=new ArrayList<>(scans.size());
  for (  final Scan scan : scans) {
    callables.add(new Callable<T>(){
      @Override public T call() throws Exception {
        return execute(tableName,new TableCallback<T>(){
          @Override public T doInTable(          HTableInterface table) throws Throwable {
            final ResultScanner scanner=table.getScanner(scan);
            try {
              return action.extractData(scanner);
            }
  finally {
              scanner.close();
            }
          }
        }
);
      }
    }
);
  }
  List<List<Callable<T>>> callablePartitions=Lists.partition(callables,this.maxThreadsPerParallelScan);
  for (  List<Callable<T>> callablePartition : callablePartitions) {
    try {
      List<Future<T>> futures=this.executor.invokeAll(callablePartition);
      for (      Future<T> future : futures) {
        results.add(future.get());
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      logger.warn("interrupted while findParallel [{}].",tableName);
      return Collections.emptyList();
    }
catch (    ExecutionException e) {
      logger.warn("findParallel [{}], error : {}",tableName,e);
      return Collections.emptyList();
    }
  }
  return results;
}
