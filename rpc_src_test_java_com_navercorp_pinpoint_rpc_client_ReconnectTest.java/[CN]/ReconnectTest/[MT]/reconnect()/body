{
  PinpointServerAcceptor serverAcceptor=PinpointRPCTestUtils.createPinpointServerFactory(bindPort,new TestSeverMessageListener());
  final AtomicBoolean reconnectPerformed=new AtomicBoolean(false);
  PinpointServerAcceptor newServerAcceptor=null;
  try {
    PinpointSocket socket=socketFactory.connect("localhost",bindPort);
    socket.addPinpointSocketReconnectEventListener(new PinpointSocketReconnectEventListener(){
      @Override public void reconnectPerformed(      PinpointSocket socket){
        reconnectPerformed.set(true);
      }
    }
);
    PinpointRPCTestUtils.close(serverAcceptor);
    logger.info("server.close()---------------------------");
    Thread.sleep(1000);
    try {
      byte[] response=PinpointRPCTestUtils.request(socket,new byte[10]);
      Assert.fail("expected:exception");
    }
 catch (    Exception e) {
    }
    newServerAcceptor=PinpointRPCTestUtils.createPinpointServerFactory(bindPort,new TestSeverMessageListener());
    logger.info("bind server---------------------------");
    Thread.sleep(3000);
    logger.info("request server---------------------------");
    byte[] randomByte=TestByteUtils.createRandomByte(10);
    byte[] response=PinpointRPCTestUtils.request(socket,randomByte);
    Assert.assertArrayEquals(randomByte,response);
    PinpointRPCTestUtils.close(socket);
  }
  finally {
    PinpointRPCTestUtils.close(newServerAcceptor);
  }
  Assert.assertTrue(reconnectPerformed.get());
}
