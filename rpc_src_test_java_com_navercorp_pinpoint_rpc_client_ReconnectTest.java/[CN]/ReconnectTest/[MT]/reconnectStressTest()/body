{
  int count=3;
  ThreadMXBean tbean=ManagementFactory.getThreadMXBean();
  int threadCount=tbean.getThreadCount();
  for (int i=0; i < count; i++) {
    logger.info((i + 1) + "th's start.");
    PinpointServerAcceptor serverAcceptor=PinpointRPCTestUtils.createPinpointServerFactory(bindPort,SimpleServerMessageListener.DUPLEX_ECHO_INSTANCE);
    PinpointClient client=clientFactory.connect("localhost",bindPort);
    PinpointRPCTestUtils.close(serverAcceptor);
    logger.info("server.close()---------------------------");
    assertClientDisconnected(client);
    serverAcceptor=PinpointRPCTestUtils.createPinpointServerFactory(bindPort,SimpleServerMessageListener.DUPLEX_ECHO_INSTANCE);
    logger.info("bind server---------------------------");
    assertClientConnected(client);
    logger.info("request server---------------------------");
    byte[] randomByte=TestByteUtils.createRandomByte(10);
    byte[] response=PinpointRPCTestUtils.request(client,randomByte);
    Assert.assertArrayEquals(randomByte,response);
    PinpointRPCTestUtils.close(client);
    PinpointRPCTestUtils.close(serverAcceptor);
  }
  Thread.sleep(10000);
  Assert.assertEquals(threadCount,tbean.getThreadCount());
}
