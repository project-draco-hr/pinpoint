{
  context.addClassFileTransformer("com.google.api.client.http.HttpRequest",new PinpointClassFileTransformer(){
    @Override public byte[] transform(    ProfilerPluginInstrumentContext instrumentContext,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentContext.getInstrumentClass(loader,className,classfileBuffer);
      InstrumentMethod execute=target.getDeclaredMethod("execute",new String[]{});
      if (execute != null) {
        execute.addInterceptor("com.navercorp.pinpoint.plugin.google.httpclient.interceptor.HttpRequestExecuteMethodInterceptor");
      }
      if (config.isAsync()) {
        InstrumentMethod executeAsync=target.getDeclaredMethod("executeAsync","java.util.concurrent.Executor");
        if (executeAsync != null) {
          executeAsync.addInterceptor("com.navercorp.pinpoint.plugin.google.httpclient.interceptor.HttpRequestExecuteAsyncMethodInterceptor");
        }
        for (        InstrumentClass nestedClass : target.getNestedClasses(ClassFilters.chain(ClassFilters.enclosingMethod("executeAsync","java.util.concurrent.Executor"),ClassFilters.interfaze("java.util.concurrent.Callable")))) {
          logger.debug("Find nested class {}",target.getName());
          instrumentContext.addClassFileTransformer(loader,nestedClass.getName(),new PinpointClassFileTransformer(){
            @Override public byte[] transform(            ProfilerPluginInstrumentContext instrumentContext,            ClassLoader loader,            String className,            Class<?> classBeingRedefined,            ProtectionDomain protectionDomain,            byte[] classfileBuffer) throws InstrumentException {
              logger.debug("Add constuctor interceptor for nested class {}",className);
              InstrumentClass target=instrumentContext.getInstrumentClass(loader,className,classfileBuffer);
              target.addField(AsyncTraceIdAccessor.class.getName());
              if (target.hasConstructor("com.google.api.client.http.HttpRequest") && target.hasMethod("call","com.google.api.client.http.HttpResponse")) {
                logger.debug("Add constuctor interceptor for nested class {}",target.getName());
                InstrumentMethod constructor=target.getConstructor("com.google.api.client.http.HttpRequest");
                constructor.addInterceptor("com.navercorp.pinpoint.plugin.google.httpclient.interceptor.HttpRequestExecuteAsyncMethodInnerClassConstructorInterceptor");
                for (                InstrumentMethod m : target.getDeclaredMethods(new HttpRequestExceuteAsyncMethodInnerClassMethodFilter())) {
                  try {
                    logger.debug("Add method interceptor for nested class {}.{}",target.getName(),m.getName());
                    m.addInterceptor("com.navercorp.pinpoint.plugin.google.httpclient.interceptor.HttpRequestExecuteAsyncMethodInnerClassCallMethodInterceptor");
                  }
 catch (                  Throwable t) {
                    if (logger.isWarnEnabled()) {
                      logger.warn("[GoogleHttpClient] Unsupported method " + className + "."+ m.getName(),t);
                    }
                  }
                }
              }
              return target.toBytecode();
            }
          }
);
        }
      }
      return target.toBytecode();
    }
  }
);
}
