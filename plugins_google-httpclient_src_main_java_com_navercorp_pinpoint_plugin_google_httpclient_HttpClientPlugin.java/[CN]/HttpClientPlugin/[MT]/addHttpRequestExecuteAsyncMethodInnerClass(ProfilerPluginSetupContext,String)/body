{
  context.addClassFileTransformer(targetClassName,new PinpointClassFileTransformer(){
    @Override public byte[] transform(    ProfilerPluginInstrumentContext instrumentContext,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentContext.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(AsyncTraceIdAccessor.class.getName());
      if (target.hasConstructor("com.google.api.client.http.HttpRequest") && target.hasMethod("call","com.google.api.client.http.HttpResponse")) {
        InstrumentMethod constructor=target.getConstructor("com.google.api.client.http.HttpRequest");
        constructor.addInterceptor("com.navercorp.pinpoint.plugin.google.httpclient.interceptor.HttpRequestExecuteAsyncMethodInnerClassConstructorInterceptor");
        for (        InstrumentMethod m : target.getDeclaredMethods(new HttpRequestExceuteAsyncMethodInnerClassMethodFilter())) {
          try {
            m.addInterceptor("com.navercorp.pinpoint.plugin.google.httpclient.interceptor.HttpRequestExecuteAsyncMethodInnerClassCallMethodInterceptor");
          }
 catch (          Throwable t) {
            if (logger.isWarnEnabled()) {
              logger.warn("[GoogleHttpClient] Unsupported method " + className + "."+ m.getName(),t);
            }
          }
        }
      }
      return target.toBytecode();
    }
  }
);
}
