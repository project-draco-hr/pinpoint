{
  final SpanEventBitField bitField=SpanEventBitField.build(spanEventBo,prevSpanEvent);
  buffer.putShort(bitField.getBitField());
switch (bitField.getStartElapsedEncodingStrategy()) {
case PREV_DELTA:
    final int startTimeDelta=spanEventBo.getStartElapsed() - prevSpanEvent.getStartElapsed();
  buffer.putVInt(startTimeDelta);
break;
case PREV_EQUALS:
break;
default :
throw new IllegalStateException("unsupported SequenceEncodingStrategy");
}
buffer.putVInt(spanEventBo.getEndElapsed());
switch (bitField.getSequenceEncodingStrategy()) {
case PREV_DELTA:
final int sequenceDelta=spanEventBo.getSequence() - prevSpanEvent.getSequence();
buffer.putVInt(sequenceDelta);
break;
case PREV_ADD1:
break;
default :
throw new IllegalStateException("unsupported SequenceEncodingStrategy");
}
switch (bitField.getDepthEncodingStrategy()) {
case RAW:
buffer.putSVInt(spanEventBo.getDepth());
break;
case PREV_EQUALS:
break;
default :
throw new IllegalStateException("unsupported DepthEncodingStrategy");
}
switch (bitField.getServiceTypeEncodingStrategy()) {
case RAW:
buffer.putShort(spanEventBo.getServiceType());
break;
case PREV_EQUALS:
break;
default :
throw new IllegalStateException("unsupported ServiceTypeEncodingStrategy");
}
buffer.putSVInt(spanEventBo.getApiId());
if (bitField.isSetRpc()) {
buffer.putPrefixedString(spanEventBo.getRpc());
}
if (bitField.isSetEndPoint()) {
buffer.putPrefixedString(spanEventBo.getEndPoint());
}
if (bitField.isSetDestinationId()) {
buffer.putPrefixedString(spanEventBo.getDestinationId());
}
if (bitField.isSetNextSpanId()) {
buffer.putLong(spanEventBo.getNextSpanId());
}
if (bitField.isSetHasException()) {
buffer.putSVInt(spanEventBo.getExceptionId());
buffer.putPrefixedString(spanEventBo.getExceptionMessage());
}
if (bitField.isSetAnnotation()) {
List<AnnotationBo> annotationBoList=spanEventBo.getAnnotationBoList();
writeAnnotationList(buffer,annotationBoList,encodingCtx);
}
if (bitField.isSetNextAsyncId()) {
buffer.putSVInt(spanEventBo.getNextAsyncId());
}
if (bitField.isSetAsyncId()) {
buffer.putInt(spanEventBo.getAsyncId());
buffer.putVInt(spanEventBo.getAsyncSequence());
}
}
