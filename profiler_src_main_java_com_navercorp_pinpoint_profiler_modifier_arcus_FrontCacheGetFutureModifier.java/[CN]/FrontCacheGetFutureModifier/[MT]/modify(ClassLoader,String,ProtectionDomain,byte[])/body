{
  if (logger.isInfoEnabled()) {
    logger.info("Modifying. {}",javassistClassName);
  }
  byteCodeInstrumentor.checkLibrary(classLoader,javassistClassName);
  try {
    InstrumentClass aClass=byteCodeInstrumentor.getClass(javassistClassName);
    aClass.addTraceVariable("__cacheName","__setCacheName","__getCacheName","java.lang.String");
    aClass.addTraceVariable("__cacheKey","__setCacheKey","__getCacheKey","java.lang.String");
    Interceptor frontCacheGetFutureConstructInterceptor=new FrontCacheGetFutureConstructInterceptor();
    aClass.addConstructorInterceptor(new String[]{"net.sf.ehcache.Element"},frontCacheGetFutureConstructInterceptor);
    SimpleAroundInterceptor frontCacheGetFutureGetInterceptor=(SimpleAroundInterceptor)byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.nhn.pinpoint.profiler.modifier.arcus.interceptor.FrontCacheGetFutureGetInterceptor");
    aClass.addScopeInterceptor("get",new String[]{Long.TYPE.toString(),"java.util.concurrent.TimeUnit"},frontCacheGetFutureGetInterceptor,ArcusScope.SCOPE);
    aClass.addScopeInterceptor("get",new String[]{},frontCacheGetFutureGetInterceptor,ArcusScope.SCOPE);
    return aClass.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(e.getMessage(),e);
    }
    return null;
  }
}
