{
  StringBuilder buf=new StringBuilder(strVal);
  int startIndex=strVal.indexOf(this.placeholderPrefix);
  while (startIndex != -1) {
    int endIndex=findPlaceholderEndIndex(buf,startIndex);
    if (endIndex != -1) {
      String placeholder=buf.substring(startIndex + this.placeholderPrefix.length(),endIndex);
      String originalPlaceholder=placeholder;
      if (!visitedPlaceholders.add(originalPlaceholder)) {
        throw new IllegalArgumentException("Circular placeholder reference '" + originalPlaceholder + "' in property definitions");
      }
      placeholder=parseStringValue(placeholder,placeholderResolver,visitedPlaceholders);
      String propVal=placeholderResolver.resolvePlaceholder(placeholder);
      if (propVal == null && this.valueSeparator != null) {
        int separatorIndex=placeholder.indexOf(this.valueSeparator);
        if (separatorIndex != -1) {
          String actualPlaceholder=placeholder.substring(0,separatorIndex);
          String defaultValue=placeholder.substring(separatorIndex + this.valueSeparator.length());
          propVal=placeholderResolver.resolvePlaceholder(actualPlaceholder);
          if (propVal == null) {
            propVal=defaultValue;
          }
        }
      }
      if (propVal != null) {
        propVal=parseStringValue(propVal,placeholderResolver,visitedPlaceholders);
        buf.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);
        if (logger.isLoggable(Level.FINE)) {
          logger.fine("Resolved placeholder '" + placeholder + "'");
        }
        startIndex=buf.indexOf(this.placeholderPrefix,startIndex + propVal.length());
      }
 else       if (this.ignoreUnresolvablePlaceholders) {
        startIndex=buf.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());
      }
 else {
        throw new IllegalArgumentException("Could not resolve placeholder '" + placeholder + "'"+ " in string value \""+ strVal+ "\"");
      }
      visitedPlaceholders.remove(originalPlaceholder);
    }
 else {
      startIndex=-1;
    }
  }
  return buf.toString();
}
