{
  final boolean trace=false;
  final boolean verify=false;
  final String classInternalName=className.replace('/','.');
  ClassLoader classLoader=new ClassLoader(){
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      System.out.println("## load=" + name + ", internal="+ classInternalName);
      if (!name.startsWith("java") && !name.startsWith("sun") && super.findLoadedClass(name) == null) {
        try {
          ClassNode classNode=ASMClassNodeLoader.get(name.replace('.','/'));
          ASMClass asmClass=new ASMClass(null,interceptorRegistryBinder,null,classNode);
          if (asmClass.isInterceptable()) {
            for (            InstrumentMethod method : asmClass.getDeclaredMethods()) {
              try {
                method.addInterceptor(interceptorId);
              }
 catch (              Throwable t) {
                t.printStackTrace();
              }
            }
          }
          byte[] bytes=asmClass.toBytecode();
          System.out.println("bytes=" + bytes + ", "+ bytes.length);
          if (trace) {
            ClassReader classReader=new ClassReader(bytes);
            ClassWriter cw=new ClassWriter(0);
            TraceClassVisitor tcv=new TraceClassVisitor(cw,new PrintWriter(System.out));
            classReader.accept(tcv,0);
          }
          if (verify) {
            CheckClassAdapter.verify(new ClassReader(bytes),false,new PrintWriter(System.out));
          }
          System.out.println("define");
          return super.defineClass(name,bytes,0,bytes.length);
        }
 catch (        Throwable ex) {
          ex.printStackTrace();
          return null;
        }
      }
 else {
        try {
          return super.loadClass(name);
        }
 catch (        Throwable t) {
          t.printStackTrace();
          return null;
        }
      }
    }
  }
;
  try {
    classLoader.loadClass(classInternalName);
  }
 catch (  ClassNotFoundException cnfe) {
  }
}
