{
  super(host,port,threadName,queueSize,timeout,sendBufferSize);
  chunkHeaderBufferedSerializer.setChunkSize(chunkSize);
  chunkHeaderBufferedSerializer.setFlushHandler(new ChunkHeaderBufferedTBaseSerializerFlushHandler(){
    @Override public void handle(    byte[] buffer,    int offset,    int length){
      if (buffer == null) {
        logger.warn("interBufferData is null");
        return;
      }
      final int internalBufferSize=length;
      if (isLimit(internalBufferSize)) {
        logger.warn("discard packet. Caused:too large message. size:{}",internalBufferSize);
        return;
      }
      reusePacket.setData(buffer,0,internalBufferSize);
      try {
        udpSocket.send(reusePacket);
        logger.debug("Data sent. {size={}}",internalBufferSize);
      }
 catch (      IOException e) {
        logger.warn("packet send error. size:{}",internalBufferSize,e);
      }
    }
  }
);
  startScheduledFlush();
}
