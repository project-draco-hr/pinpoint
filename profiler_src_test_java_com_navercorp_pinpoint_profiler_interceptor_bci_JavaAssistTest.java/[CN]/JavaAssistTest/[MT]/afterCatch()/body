{
  ClassPool pool=ClassPool.getDefault();
  CtClass ctClass=pool.get("com.nhn.pinpoint.profiler.interceptor.bci.TestObject");
  CtClass object=pool.get("java.lang.String");
  System.out.println(ctClass);
  CtMethod callA=ctClass.getDeclaredMethod("callA",null);
  System.out.println(callA);
  final String before="{ java.lang.Throwable __throwable = null; java.lang.String __test = \"abc\"; System.out.println(\"before\" + __test);";
  final String after="}";
  callA.instrument(new ExprEditor(){
    @Override public void edit(    MethodCall m) throws CannotCompileException {
      System.out.println(m.getClassName());
      try {
        System.out.println(m.getMethod().toString());
      }
 catch (      NotFoundException e) {
        e.printStackTrace();
      }
      System.out.println(m.getMethodName());
      m.replace(before + " try {$_ = $proceed($$); System.out.println(\"end---\"+ $_);} catch (java.lang.Throwable ex) { __throwable = ex; System.out.println(\"catch\"); } " + after);
    }
  }
);
  Class aClass=ctClass.toClass();
  java.lang.reflect.Method callA1=aClass.getMethod("callA");
  Object target=aClass.newInstance();
  Object result=callA1.invoke(target);
  System.out.println(result);
}
