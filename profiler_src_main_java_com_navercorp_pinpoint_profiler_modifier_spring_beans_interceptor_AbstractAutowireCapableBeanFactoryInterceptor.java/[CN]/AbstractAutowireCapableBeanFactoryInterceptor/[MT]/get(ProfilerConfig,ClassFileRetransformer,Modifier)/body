{
  List<String> targetNamePatternStrings=split(config.getSpringBeansNamePatterns());
  List<String> targetClassPatternStrings=split(config.getSpringBeansClassPatterns());
  List<String> targetAnnotationNames=split(config.getSpringBeansAnnotations());
  List<Pattern> beanNamePatterns=null;
  if (!targetNamePatternStrings.isEmpty()) {
    beanNamePatterns=new ArrayList<Pattern>(targetNamePatternStrings.size());
    for (    String s : targetNamePatternStrings) {
      Pattern p=Pattern.compile(s);
      beanNamePatterns.add(p);
    }
  }
  List<Pattern> beanClassPatterns=null;
  if (!targetClassPatternStrings.isEmpty()) {
    beanClassPatterns=new ArrayList<Pattern>(targetClassPatternStrings.size());
    for (    String s : targetClassPatternStrings) {
      Pattern p=Pattern.compile(s);
      beanClassPatterns.add(p);
    }
  }
  List<Class<? extends Annotation>> beanAnnotationClasses=null;
  if (!targetAnnotationNames.isEmpty()) {
    beanAnnotationClasses=new ArrayList<Class<? extends Annotation>>(targetAnnotationNames.size());
    for (    String s : targetAnnotationNames) {
      try {
        Class<?> c=Loader.loadClass(s);
        Class<? extends Annotation> ac=c.asSubclass(Annotation.class);
        beanAnnotationClasses.add(ac);
      }
 catch (      ClassNotFoundException e) {
        throw new ProfilerException("Cannot load class: " + s,e);
      }
catch (      ClassCastException e) {
        throw new ProfilerException("Given class is not subclass of Annotation: " + s,e);
      }
    }
  }
  return new AbstractAutowireCapableBeanFactoryInterceptor(retransformer,modifier,beanNamePatterns,beanClassPatterns,beanAnnotationClasses);
}
