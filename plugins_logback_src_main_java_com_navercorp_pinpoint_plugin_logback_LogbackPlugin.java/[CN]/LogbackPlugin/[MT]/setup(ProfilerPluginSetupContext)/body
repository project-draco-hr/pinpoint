{
  LogbackConfig config=new LogbackConfig(context.getConfig());
  if (!config.isLogbackLoggingTransactionInfo()) {
    logger.info("Logback plugin is not executed because logback transform enable config value is false.");
    return;
  }
  transformTemplate.transform("ch.qos.logback.classic.spi.LoggingEvent",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass mdcClass=instrumentor.getInstrumentClass(loader,"org.slf4j.MDC",null);
      if (mdcClass == null) {
        logger.warn("Can not modify. Because org.slf4j.MDC does not exist.");
        return null;
      }
      if (!mdcClass.hasMethod("put","java.lang.String","java.lang.String")) {
        logger.warn("Can not modify. Because put method does not exist at org.slf4j.MDC class.");
        return null;
      }
      if (!mdcClass.hasMethod("remove","java.lang.String")) {
        logger.warn("Can not modify. Because remove method does not exist at org.slf4j.MDC class.");
        return null;
      }
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      if (!target.hasConstructor()) {
        logger.warn("Can not modify. Because constructor to modify not exist at ch.qos.logback.classic.spi.LoggingEvent class." + "\nconstructor prototype : LoggingEvent();");
        return null;
      }
      if (!target.hasConstructor("java.lang.String","ch.qos.logback.classic.Logger","ch.qos.logback.classic.Level","java.lang.String","java.lang.Throwable","java.lang.Object[]")) {
        logger.warn("Can not modify. Because constructor to modify not exist at ch.qos.logback.classic.spi.LoggingEvent class." + "\nconstructor prototype : LoggingEvent(String fqcn, Logger logger, Level level, String message, Throwable throwable, Object[] argArray);");
        return null;
      }
      target.addInterceptor("com.navercorp.pinpoint.plugin.logback.interceptor.LoggingEventOfLogbackInterceptor");
      return target.toBytecode();
    }
  }
);
}
