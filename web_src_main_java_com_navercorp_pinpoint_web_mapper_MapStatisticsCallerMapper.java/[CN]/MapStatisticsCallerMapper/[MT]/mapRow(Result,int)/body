{
  if (result.isEmpty()) {
    return new LinkDataMap();
  }
  logger.debug("mapRow:{}",rowNum);
  final byte[] rowKey=getOriginalKey(result.getRow());
  final Buffer row=new FixedBuffer(rowKey);
  final Application caller=readCallerApplication(row);
  final long timestamp=TimeUtils.recoveryTimeMillis(row.readLong());
  final LinkDataMap linkDataMap=new LinkDataMap();
  for (  Cell cell : result.rawCells()) {
    final Buffer buffer=new OffsetFixedBuffer(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength());
    final Application callee=readCalleeApplication(buffer);
    if (filter.filter(callee)) {
      continue;
    }
    String calleeHost=buffer.readPrefixedString();
    short histogramSlot=buffer.readShort();
    boolean isError=histogramSlot == (short)-1;
    String callerAgentId=buffer.readPrefixedString();
    long requestCount=getValueToLong(cell);
    if (logger.isDebugEnabled()) {
      logger.debug("    Fetched Caller.(New) {} {} -> {} (slot:{}/{}) calleeHost:{}",caller,callerAgentId,callee,histogramSlot,requestCount,calleeHost);
    }
    final short slotTime=(isError) ? (short)-1 : histogramSlot;
    if (StringUtils.isEmpty(calleeHost)) {
      calleeHost=callee.getName();
    }
    linkDataMap.addLinkData(caller,callerAgentId,callee,calleeHost,timestamp,slotTime,requestCount);
  }
  return linkDataMap;
}
