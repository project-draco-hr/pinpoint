{
  if (logger.isLoggable(Level.FINE)) {
    logger.fine("HELLO received source:" + controlRecord.getSourceAddress() + " destination:"+ controlRecord.getDestinationAddress());
  }
  IoBuffer payloadBuffer=controlRecord.getPayloadBuffer();
  int numberOfAddresses=controlRecord.getControlParameterAsNumber();
  int addressSize=NimmAddress.getSizeOfBinForm();
  boolean isDuplicated=false;
  NimmAddress firstDuplicated=null;
  for (int i=0; i < numberOfAddresses; ++i) {
    byte[] binFormAddress=new byte[addressSize];
    payloadBuffer.get(binFormAddress);
    NimmAddress address=createAddress(binFormAddress);
    if (logger.isLoggable(Level.FINE)) {
      logger.fine("Hello payload address:" + address);
    }
    int domainId=address.getDomainId();
    int idcId=this.serverNimmAddress.getIdcId();
    int serverId=address.getServerId();
    if (i == 0) {
      NimmAddress representAddress=NimmAddress.getHandle().retrieveAddressInstance(address.getSpecies(),0,idcId,serverId,0,0);
      this.representAddress.put(ioSession,representAddress);
    }
    RoutingState routingState=RoutingState.getRoutingState(ioSession);
    routingState.register(domainId);
    ClientKey key=new ClientKey(domainId,idcId,serverId);
    if (this.ioSessionLookUpMap.containsKey(key)) {
      logger.warning("Duplicated detected:" + key);
      isDuplicated=true;
      if (firstDuplicated == null) {
        firstDuplicated=address;
      }
    }
    this.ioSessionLookUpMap.put(key,ioSession);
    AnycastKey anyKey=new AnycastKey(domainId,idcId);
    this.anycastTable.register(anyKey,new IoSessionPair(ioSession,address));
  }
  if (isDuplicated) {
    NimmRecordHeader header=NimmRecordHeaderFactory.createBYEwithDuplicatedAddr(firstDuplicated,this.serverNimmAddress);
    byte[] payload=new byte[12];
    ByteBuffer buf=ByteBuffer.wrap(payload);
    buf.putInt(firstDuplicated.getDomainId());
    buf.putShort((short)this.serverNimmAddress.getIdcId());
    buf.putShort((short)firstDuplicated.getServerId());
    buf.putShort((short)0);
    buf.putShort((short)0);
    NimmControlRecord byeRecord=NimmControlRecordFactory.create(header,payload);
    ioSession.write(byeRecord);
    ioSession.close();
  }
 else {
    NimmControlRecord welcomeRecord=NimmControlRecord.createControlMessage(this.serverNimmAddress,this.representAddress.get(ioSession),ControlCode.WELCOME,null);
    ioSession.write(welcomeRecord);
    sendStartSending(ioSession);
  }
}
