{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
        struct.agentKey=new AgentKey();
        struct.agentKey.read(iprot);
        struct.setAgentKeyIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 17:
  if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
    struct.parentServiceType=iprot.readI16();
    struct.setParentServiceTypeIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 18:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.parentEndPoint=iprot.readString();
struct.setParentEndPointIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.traceAgentId=iprot.readString();
struct.setTraceAgentIdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.traceAgentStartTime=iprot.readI64();
struct.setTraceAgentStartTimeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.traceTransactionSequence=iprot.readI64();
struct.setTraceTransactionSequenceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.spanId=iprot.readI32();
struct.setSpanIdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
struct.sequence=iprot.readI16();
struct.setSequenceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.startElapsed=iprot.readI32();
struct.setStartElapsedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.endElapsed=iprot.readI32();
struct.setEndElapsedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.rpc=iprot.readString();
struct.setRpcIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
struct.serviceType=iprot.readI16();
struct.setServiceTypeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.endPoint=iprot.readString();
struct.setEndPointIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list0=iprot.readListBegin();
struct.annotations=new ArrayList<Annotation>(_list0.size);
for (int _i1=0; _i1 < _list0.size; ++_i1) {
Annotation _elem2;
_elem2=new Annotation();
_elem2.read(iprot);
struct.annotations.add(_elem2);
}
iprot.readListEnd();
}
struct.setAnnotationsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.depth=iprot.readI32();
struct.setDepthIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 16:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.nextSpanId=iprot.readI32();
struct.setNextSpanIdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 20:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.destinationId=iprot.readString();
struct.setDestinationIdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 21:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list3=iprot.readListBegin();
struct.destinationAddress=new ArrayList<String>(_list3.size);
for (int _i4=0; _i4 < _list3.size; ++_i4) {
String _elem5;
_elem5=iprot.readString();
struct.destinationAddress.add(_elem5);
}
iprot.readListEnd();
}
struct.setDestinationAddressIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
