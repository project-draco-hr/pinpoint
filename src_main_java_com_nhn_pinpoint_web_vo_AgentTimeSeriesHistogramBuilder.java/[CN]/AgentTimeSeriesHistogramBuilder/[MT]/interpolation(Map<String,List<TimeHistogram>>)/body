{
  if (agentLevelMap.size() == 0) {
    return agentLevelMap;
  }
  Map<String,Map<Long,TimeHistogram>> windowTimeMap=new HashMap<String,Map<Long,TimeHistogram>>();
  for (  String key : agentLevelMap.keySet()) {
    Map<Long,TimeHistogram> value=new HashMap<Long,TimeHistogram>();
    for (    Long time : window) {
      value.put(time,new TimeHistogram(application.getServiceType(),time));
    }
    windowTimeMap.put(key,value);
  }
  for (  Map.Entry<String,List<TimeHistogram>> entry : agentLevelMap.entrySet()) {
    List<TimeHistogram> histogramList=entry.getValue();
    for (    TimeHistogram timeHistogram : histogramList) {
      long time=window.refineTimestamp(timeHistogram.getTimeStamp());
      Map<Long,TimeHistogram> findSlot=windowTimeMap.get(entry.getKey());
      TimeHistogram windowHistogram=findSlot.get(time);
      if (windowHistogram == null) {
        windowHistogram=new TimeHistogram(application.getServiceType(),time);
        findSlot.put(time,windowHistogram);
      }
      windowHistogram.add(timeHistogram);
    }
  }
  Map<String,List<TimeHistogram>> result=new HashMap<String,List<TimeHistogram>>();
  for (  Map.Entry<String,Map<Long,TimeHistogram>> windowMapEntry : windowTimeMap.entrySet()) {
    final String key=windowMapEntry.getKey();
    List<TimeHistogram> histogramList=result.get(key);
    if (histogramList == null) {
      histogramList=new ArrayList<TimeHistogram>();
      result.put(key,histogramList);
    }
    Map<Long,TimeHistogram> timeHistogramMap=windowMapEntry.getValue();
    for (    TimeHistogram timeHistogram : timeHistogramMap.values()) {
      histogramList.add(timeHistogram);
    }
  }
  sortList(result);
  return result;
}
