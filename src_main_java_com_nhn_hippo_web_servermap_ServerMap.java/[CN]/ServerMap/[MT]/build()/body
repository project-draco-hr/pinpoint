{
  if (isBuilt)   return this;
  for (  Entry<String,TerminalStatistics> entry : terminalRequests.entrySet()) {
    TerminalStatistics terminal=entry.getValue();
    Node node=new Node(terminal.getTo(),terminal.getTo(),"UNKNOWN",ServiceType.parse(terminal.getToServiceType()));
    nodes.addNode(node.getId(),node);
  }
  int i=0;
  for (  Entry<String,Node> entry : nodes.entrySet()) {
    entry.getValue().setSequence(i++);
  }
  for (  Entry<String,TerminalStatistics> entry : terminalRequests.entrySet()) {
    TerminalStatistics terminal=entry.getValue();
    Link link=new Link(nodes.get(terminal.getFrom()),nodes.get(terminal.getTo()),terminal.getRequestCount());
    links.add(link);
  }
  for (  SpanBo span : spans) {
    String from=String.valueOf(span.getParentSpanId());
    String to=String.valueOf(span.getSpanId());
    Node fromServer=nodes.get(from);
    Node toServer=nodes.get(to);
    if (fromServer == null) {
      fromServer=nodes.get(PREFIX_CLIENT + to);
      logger.debug("invalid form node {}",from);
      continue;
    }
    Link link=new Link(fromServer,toServer);
    if (link.isLocalCall()) {
      continue;
    }
    links.add(link,span.getElapsed());
  }
  for (  SubSpanBo span : subspans) {
    String from=String.valueOf(span.getSpanId());
    String to;
    if (span.getServiceType().isRpcClient()) {
      to=String.valueOf(span.getEndPoint());
    }
 else {
      to=String.valueOf(span.getServiceName());
    }
    Node fromServer=nodes.get(from);
    Node toServer=nodes.get(to);
    Link link=new Link(fromServer,toServer);
    links.add(link,span.getEndElapsed());
  }
  isBuilt=true;
  return this;
}
