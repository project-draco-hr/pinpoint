{
  if (type == Trace.class) {
    return Option.<Object>withValue(pluginContext.getTraceContext().currentTraceObject());
  }
 else   if (type == TraceContext.class) {
    return Option.<Object>withValue(pluginContext.getTraceContext());
  }
 else   if (type == ProfilerPluginContext.class) {
    return Option.<Object>withValue(pluginContext);
  }
 else   if (type == ByteCodeInstrumentor.class) {
    return Option.<Object>withValue(pluginContext.getByteCodeInstrumentor());
  }
 else   if (type == InstrumentClass.class) {
    return Option.<Object>withValue(targetClass);
  }
 else   if (type == MethodDescriptor.class) {
    MethodDescriptor descriptor=targetMethod.getDescriptor();
    cacheApiIfAnnotationPresent(annotations,descriptor);
    return Option.<Object>withValue(descriptor);
  }
 else   if (type == MethodInfo.class) {
    cacheApiIfAnnotationPresent(annotations,targetMethod.getDescriptor());
    return Option.<Object>withValue(targetMethod);
  }
 else   if (type == MetadataAccessor.class) {
    Annotation annotation=TypeUtils.findAnnotation(annotations,Name.class);
    if (annotation == null) {
      throw new PinpointException("MetadataAccessor parameter must be annotated with @Name");
    }
    MetadataAccessor accessor=pluginContext.getMetadataAccessor(((Name)annotation).value());
    return Option.<Object>withValue(accessor);
  }
 else   if (type == FieldAccessor.class) {
    Annotation annotation=TypeUtils.findAnnotation(annotations,Name.class);
    if (annotation == null) {
      throw new PinpointException("FieldAccessor parameter must be annotated with @Name");
    }
    FieldAccessor accessor=pluginContext.getFieldAccessor(((Name)annotation).value());
    return Option.<Object>withValue(accessor);
  }
  return Option.<Object>empty();
}
