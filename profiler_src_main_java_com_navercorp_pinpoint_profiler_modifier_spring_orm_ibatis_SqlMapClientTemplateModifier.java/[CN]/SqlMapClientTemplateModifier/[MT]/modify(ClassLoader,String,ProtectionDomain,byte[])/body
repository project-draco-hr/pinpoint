{
  if (this.logger.isInfoEnabled()) {
    this.logger.info("Modifying. {}",javassistClassName);
  }
  try {
    InstrumentClass sqlMapClientTemplate=byteCodeInstrumentor.getClass(classLoader,javassistClassName,classFileBuffer);
    List<MethodInfo> declaredMethods=sqlMapClientTemplate.getDeclaredMethods(sqlMapClientMethodFilter);
    for (    MethodInfo method : declaredMethods) {
      Interceptor sqlMapClientTemplateInterceptor=new IbatisSqlMapOperationInterceptor(serviceType);
      sqlMapClientTemplate.addScopeInterceptor(method.getName(),method.getParameterTypes(),sqlMapClientTemplateInterceptor,scope);
    }
    return sqlMapClientTemplate.toBytecode();
  }
 catch (  Throwable e) {
    this.logger.warn("{} modifier error. Cause:{}",javassistClassName,e.getMessage(),e);
    return null;
  }
}
