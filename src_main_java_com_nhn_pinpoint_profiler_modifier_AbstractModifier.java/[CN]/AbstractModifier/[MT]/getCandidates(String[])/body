{
  try {
    InstrumentClass aClass=byteCodeInstrumentor.getClass(getTargetClass().replace("/","."));
    CtMethod[] declaredMethods=aClass.getDeclaredMethods();
    List<Method> candidates=new ArrayList<Method>(declaredMethods.length);
    forStart:     for (    CtMethod m : declaredMethods) {
      if (m.getModifiers() != javassist.Modifier.PUBLIC) {
        continue;
      }
      for (      String ignoredPrefix : ignoredPrefixes) {
        if (m.getName().startsWith(ignoredPrefix)) {
          continue forStart;
        }
      }
      String methodName=m.getName();
      CtClass[] paramTypes=m.getParameterTypes();
      String[] parameterType=JavaAssistUtils.getParameterType(paramTypes);
      candidates.add(new Method(methodName,parameterType));
    }
    return candidates;
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(e.getMessage(),e);
    }
  }
  return Collections.emptyList();
}
