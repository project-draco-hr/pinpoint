{
  final PinpointServerAcceptor serverAcceptor=PinpointRPCTestUtils.createPinpointServerFactory(bindPort,SimpleServerMessageListener.DUPLEX_INSTANCE);
  PinpointClientFactory clientFactory1=PinpointRPCTestUtils.createClientFactory(PinpointRPCTestUtils.getParams(),PinpointRPCTestUtils.createEchoClientListener());
  PinpointClientFactory clientFactory2=PinpointRPCTestUtils.createClientFactory(PinpointRPCTestUtils.getParams(),null);
  try {
    PinpointClient client=clientFactory1.connect("127.0.0.1",bindPort);
    PinpointClient client2=clientFactory2.connect("127.0.0.1",bindPort);
    awaitUtils.await(new TestAwaitTaskUtils(){
      @Override public boolean checkCompleted(){
        List<PinpointSocket> writableServerList=serverAcceptor.getWritableSocketList();
        return writableServerList.size() == 2;
      }
    }
);
    List<PinpointSocket> writableServerList=serverAcceptor.getWritableSocketList();
    if (writableServerList.size() != 2) {
      Assert.fail();
    }
    PinpointRPCTestUtils.close(client,client2);
  }
  finally {
    clientFactory1.release();
    clientFactory2.release();
    PinpointRPCTestUtils.close(serverAcceptor);
  }
}
