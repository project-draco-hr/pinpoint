{
  final PinpointServerAcceptor serverAcceptor=PinpointRPCTestUtils.createPinpointServerFactory(bindPort,SimpleServerMessageListener.DUPLEX_INSTANCE);
  Map<String,Object> params=PinpointRPCTestUtils.getParams();
  PinpointClientFactory clientFactory1=PinpointRPCTestUtils.createClientFactory(PinpointRPCTestUtils.getParams(),PinpointRPCTestUtils.createEchoClientListener());
  try {
    PinpointClient client=clientFactory1.connect("127.0.0.1",bindPort);
    awaitUtils.await(new TestAwaitTaskUtils(){
      @Override public boolean checkCompleted(){
        List<PinpointSocket> writableServerList=serverAcceptor.getWritableSocketList();
        return writableServerList.size() == 1;
      }
    }
);
    PinpointSocket writableServer=getWritableServer("application","agent",(Long)params.get(AgentHandshakePropertyType.START_TIMESTAMP.getName()),serverAcceptor.getWritableSocketList());
    Assert.assertNotNull(writableServer);
    writableServer=getWritableServer("application","agent",(Long)params.get(AgentHandshakePropertyType.START_TIMESTAMP.getName()) + 1,serverAcceptor.getWritableSocketList());
    Assert.assertNull(writableServer);
    PinpointRPCTestUtils.close(client);
  }
  finally {
    clientFactory1.release();
    PinpointRPCTestUtils.close(serverAcceptor);
  }
}
