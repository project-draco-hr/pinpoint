{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.agentId=iprot.readString();
        struct.setAgentIdIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryTotalUsed=iprot.readI64();
struct.setJvmMemoryTotalUsedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryTotalMax=iprot.readI64();
struct.setJvmMemoryTotalMaxIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryHeapUsed=iprot.readI64();
struct.setJvmMemoryHeapUsedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryHeapMax=iprot.readI64();
struct.setJvmMemoryHeapMaxIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryNonHeapUsed=iprot.readI64();
struct.setJvmMemoryNonHeapUsedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryNonHeapMax=iprot.readI64();
struct.setJvmMemoryNonHeapMaxIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryPoolsCodeCacheUsage=iprot.readI64();
struct.setJvmMemoryPoolsCodeCacheUsageIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryPoolsEdenSpaceUsage=iprot.readI64();
struct.setJvmMemoryPoolsEdenSpaceUsageIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryPoolsSurvivorSpaceUsage=iprot.readI64();
struct.setJvmMemoryPoolsSurvivorSpaceUsageIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryPoolsPermGenUsage=iprot.readI64();
struct.setJvmMemoryPoolsPermGenUsageIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmMemoryPoolsTenuredGenUsage=iprot.readI64();
struct.setJvmMemoryPoolsTenuredGenUsageIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmGcCopyCount=iprot.readI64();
struct.setJvmGcCopyCountIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmGcCopyTime=iprot.readI64();
struct.setJvmGcCopyTimeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 16:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmGcMarkSweepCompactCount=iprot.readI64();
struct.setJvmGcMarkSweepCompactCountIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 17:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.jvmGcMarkSweepCompactTime=iprot.readI64();
struct.setJvmGcMarkSweepCompactTimeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 200:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.metadata=iprot.readString();
struct.setMetadataIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
