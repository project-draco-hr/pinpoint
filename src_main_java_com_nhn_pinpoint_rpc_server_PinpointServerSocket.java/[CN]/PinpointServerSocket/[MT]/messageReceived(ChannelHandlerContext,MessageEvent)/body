{
  final Channel channel=e.getChannel();
  Object message=e.getMessage();
  logger.debug("messageReceived:{} channel:{}",message,channel);
  final short packetType=getPacketType(message);
switch (packetType) {
case PacketType.APPLICATION_SEND:
{
      SocketChannel socketChannel=getChannelContext(channel).getSocketChannel();
      messageListener.handleSend((SendPacket)message,socketChannel);
      return;
    }
case PacketType.APPLICATION_REQUEST:
{
    SocketChannel socketChannel=getChannelContext(channel).getSocketChannel();
    messageListener.handleRequest((RequestPacket)message,socketChannel);
    return;
  }
case PacketType.APPLICATION_STREAM_CREATE:
case PacketType.APPLICATION_STREAM_CLOSE:
case PacketType.APPLICATION_STREAM_CREATE_SUCCESS:
case PacketType.APPLICATION_STREAM_CREATE_FAIL:
case PacketType.APPLICATION_STREAM_RESPONSE:
handleStreamPacket((StreamPacket)message,channel);
return;
case PacketType.CONTROL_REGISTER_AGENT:
handleRegisterAgent((ControlRegisterAgentPacket)message,channel);
return;
case PacketType.CONTROL_CLIENT_CLOSE:
{
closeChannel(channel);
return;
}
default :
logger.warn("invalid messageReceived msg:{}, connection:{}",message,e.getChannel());
}
}
