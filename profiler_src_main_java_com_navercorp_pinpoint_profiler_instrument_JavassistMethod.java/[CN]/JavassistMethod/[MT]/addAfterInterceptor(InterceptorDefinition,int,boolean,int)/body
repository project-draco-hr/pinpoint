{
  final Class<?> interceptorClass=interceptor.getInterceptorClazz();
  final CaptureType captureType=interceptor.getCaptureType();
  if (!isAfterInterceptor(captureType)) {
    return;
  }
  final Method interceptorMethod=interceptor.getAfterMethod();
  if (interceptorMethod == null) {
    if (isDebug) {
      logger.debug("Skip adding after interceptor because the interceptor doesn't have after method: {}",interceptorClass.getName());
    }
    return;
  }
  InvokeAfterCodeGenerator catchGenerator=new InvokeAfterCodeGenerator(interceptorId,interceptorClass,interceptorMethod,declaringClass,this,pluginContext.getTraceContext(),localVarsInitialized,true);
  String catchCode=catchGenerator.generate();
  if (isDebug) {
    logger.debug("addAfterInterceptor catch behavior:{} code:{}",behavior.getLongName(),catchCode);
  }
  CtClass throwable=behavior.getDeclaringClass().getClassPool().get("java.lang.Throwable");
  insertCatch(originalCodeOffset,catchCode,throwable,"$e");
  InvokeAfterCodeGenerator afterGenerator=new InvokeAfterCodeGenerator(interceptorId,interceptorClass,interceptorMethod,declaringClass,this,pluginContext.getTraceContext(),localVarsInitialized,false);
  final String afterCode=afterGenerator.generate();
  if (isDebug) {
    logger.debug("addAfterInterceptor after behavior:{} code:{}",behavior.getLongName(),afterCode);
  }
  behavior.insertAfter(afterCode);
}
