{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetAgentId()) {
    optionals.set(0);
  }
  if (struct.isSetApplicationName()) {
    optionals.set(1);
  }
  if (struct.isSetAgentStartTime()) {
    optionals.set(2);
  }
  if (struct.isSetTransactionId()) {
    optionals.set(3);
  }
  if (struct.isSetSpanId()) {
    optionals.set(4);
  }
  if (struct.isSetParentSpanId()) {
    optionals.set(5);
  }
  if (struct.isSetStartTime()) {
    optionals.set(6);
  }
  if (struct.isSetElapsed()) {
    optionals.set(7);
  }
  if (struct.isSetRpc()) {
    optionals.set(8);
  }
  if (struct.isSetServiceType()) {
    optionals.set(9);
  }
  if (struct.isSetEndPoint()) {
    optionals.set(10);
  }
  if (struct.isSetRemoteAddr()) {
    optionals.set(11);
  }
  if (struct.isSetAnnotations()) {
    optionals.set(12);
  }
  if (struct.isSetFlag()) {
    optionals.set(13);
  }
  if (struct.isSetErr()) {
    optionals.set(14);
  }
  if (struct.isSetSpanEventList()) {
    optionals.set(15);
  }
  if (struct.isSetParentApplicationName()) {
    optionals.set(16);
  }
  if (struct.isSetParentApplicationType()) {
    optionals.set(17);
  }
  if (struct.isSetAcceptorHost()) {
    optionals.set(18);
  }
  if (struct.isSetApiId()) {
    optionals.set(19);
  }
  if (struct.isSetExceptionInfo()) {
    optionals.set(20);
  }
  oprot.writeBitSet(optionals,21);
  if (struct.isSetAgentId()) {
    oprot.writeString(struct.agentId);
  }
  if (struct.isSetApplicationName()) {
    oprot.writeString(struct.applicationName);
  }
  if (struct.isSetAgentStartTime()) {
    oprot.writeI64(struct.agentStartTime);
  }
  if (struct.isSetTransactionId()) {
    oprot.writeBinary(struct.transactionId);
  }
  if (struct.isSetSpanId()) {
    oprot.writeI32(struct.spanId);
  }
  if (struct.isSetParentSpanId()) {
    oprot.writeI32(struct.parentSpanId);
  }
  if (struct.isSetStartTime()) {
    oprot.writeI64(struct.startTime);
  }
  if (struct.isSetElapsed()) {
    oprot.writeI32(struct.elapsed);
  }
  if (struct.isSetRpc()) {
    oprot.writeString(struct.rpc);
  }
  if (struct.isSetServiceType()) {
    oprot.writeI16(struct.serviceType);
  }
  if (struct.isSetEndPoint()) {
    oprot.writeString(struct.endPoint);
  }
  if (struct.isSetRemoteAddr()) {
    oprot.writeString(struct.remoteAddr);
  }
  if (struct.isSetAnnotations()) {
{
      oprot.writeI32(struct.annotations.size());
      for (      TAnnotation _iter16 : struct.annotations) {
        _iter16.write(oprot);
      }
    }
  }
  if (struct.isSetFlag()) {
    oprot.writeI16(struct.flag);
  }
  if (struct.isSetErr()) {
    oprot.writeI32(struct.err);
  }
  if (struct.isSetSpanEventList()) {
{
      oprot.writeI32(struct.spanEventList.size());
      for (      TSpanEvent _iter17 : struct.spanEventList) {
        _iter17.write(oprot);
      }
    }
  }
  if (struct.isSetParentApplicationName()) {
    oprot.writeString(struct.parentApplicationName);
  }
  if (struct.isSetParentApplicationType()) {
    oprot.writeI16(struct.parentApplicationType);
  }
  if (struct.isSetAcceptorHost()) {
    oprot.writeString(struct.acceptorHost);
  }
  if (struct.isSetApiId()) {
    oprot.writeI32(struct.apiId);
  }
  if (struct.isSetExceptionInfo()) {
    struct.exceptionInfo.write(oprot);
  }
}
