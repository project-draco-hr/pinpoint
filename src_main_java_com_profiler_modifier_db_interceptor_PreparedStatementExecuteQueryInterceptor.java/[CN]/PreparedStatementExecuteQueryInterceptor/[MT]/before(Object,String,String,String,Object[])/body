{
  if (logger.isLoggable(Level.INFO)) {
    logger.info("before " + StringUtils.toString(target) + " "+ className+ "."+ methodName+ parameterDescription+ " args:"+ Arrays.toString(args));
  }
  if (JDBCScope.isInternal()) {
    logger.info("internal jdbc scope. skip trace");
    return;
  }
  TraceContext traceContext=TraceContext.getTraceContext();
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  trace.traceBlockBegin();
  try {
    String url=getUrl.invoke(target);
    trace.recordRpcName("MYSQL",url);
    trace.recordTerminalEndPoint(url);
    String sql=getSql.invoke(target);
    trace.recordAttibute("PreparedStatement",sql);
    Map bindValue=getBindValue.invoke(target);
    String bindString=toBindVariable(bindValue);
    trace.recordAttibute("BindValue",bindString);
    clean(target);
    trace.record(Annotation.ClientSend);
  }
 catch (  Exception e) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}
