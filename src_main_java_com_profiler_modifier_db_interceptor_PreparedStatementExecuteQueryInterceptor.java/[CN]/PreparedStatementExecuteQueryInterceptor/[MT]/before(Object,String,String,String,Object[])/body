{
  if (isDebug) {
    LoggingUtils.logBefore(logger,target,className,methodName,parameterDescription,args);
  }
  if (JDBCScope.isInternal()) {
    logger.fine("internal jdbc scope. skip trace");
    return;
  }
  TraceContext traceContext=TraceContext.getTraceContext();
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  trace.traceBlockBegin();
  trace.markBeforeTime();
  try {
    DatabaseInfo databaseInfo=(DatabaseInfo)getUrl.invoke(target);
    trace.recordServiceType(databaseInfo.getExecuteQueryType());
    trace.recordServiceName(databaseInfo.getDatabaseId());
    trace.recordRpcName(databaseInfo.getUrl());
    trace.recordEndPoint(databaseInfo.getUrl());
    ParsingResult parsingResult=(ParsingResult)getSql.invoke(target);
    trace.recordSqlParsingResult(parsingResult);
    Map bindValue=getBindValue.invoke(target);
    String bindString=toBindVariable(bindValue);
    trace.recordAttribute(AnnotationKey.SQL_BINDVALUE,bindString);
    trace.recordApi(descriptor);
    clean(target);
  }
 catch (  Exception e) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}
