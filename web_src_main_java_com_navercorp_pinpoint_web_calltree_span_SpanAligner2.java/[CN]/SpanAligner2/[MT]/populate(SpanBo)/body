{
  logger.debug("Populate start. span={}",span);
  final List<SpanEventBo> spanEventBoList=span.getSpanEventBoList();
  final Map<Integer,List<SpanEventBo>> asyncSpanEventMap=extractAsyncSpanEvent(spanEventBoList);
  final SpanAlign spanAlign=new SpanAlign(span);
  final CallTree tree=new CallTree(spanAlign);
  if (spanEventBoList == null) {
    return tree;
  }
  spanAlign.setHasChild(true);
  for (  SpanEventBo spanEventBo : spanEventBoList) {
    if (logger.isDebugEnabled()) {
      logger.debug("Align seq={}, depth={}, async={}, event={}",spanEventBo.getSequence(),spanEventBo.getDepth(),spanEventBo.isAsync(),spanEventBo);
    }
    final SpanAlign spanEventAlign=new SpanAlign(span,spanEventBo);
    tree.add(spanEventBo.getDepth(),spanEventAlign);
    final long nextSpanId=spanEventBo.getNextSpanId();
    final List<SpanBo> nextSpanBoList=spanIdMap.remove(nextSpanId);
    if (nextSpanId != ROOT && nextSpanBoList != null) {
      final SpanBo nextSpanBo=getNextSpan(span,spanEventBo,nextSpanBoList);
      if (nextSpanBo != null) {
        final CallTree subTree=populate(nextSpanBo);
        tree.add(subTree);
      }
 else {
        logger.debug("nextSpanId not found. {}",nextSpanId);
      }
    }
    final int nextAsyncId=spanEventBo.getNextAsyncId();
    final List<SpanEventBo> nextAsyncSpanEventList=asyncSpanEventMap.remove(nextAsyncId);
    if (nextAsyncId != -1 && nextAsyncSpanEventList != null && nextAsyncSpanEventList.size() > 0) {
      final CallTree subTree=populate(span,nextAsyncSpanEventList,asyncSpanEventMap);
      tree.add(subTree);
    }
  }
  logger.debug("populate end. span={}",span);
  return tree;
}
