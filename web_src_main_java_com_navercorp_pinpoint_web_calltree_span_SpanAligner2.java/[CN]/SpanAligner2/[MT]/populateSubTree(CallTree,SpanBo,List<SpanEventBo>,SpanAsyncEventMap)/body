{
  if (spanEventBoList == null) {
    return;
  }
  for (  SpanEventBo spanEventBo : spanEventBoList) {
    if (logger.isDebugEnabled()) {
      logger.debug("Align seq={}, depth={}, async={}, event={}",spanEventBo.getSequence(),spanEventBo.getDepth(),spanEventBo.isAsync(),spanEventBo);
    }
    final SpanAlign spanEventAlign=new SpanAlign(span,spanEventBo);
    try {
      tree.add(spanEventBo.getDepth(),spanEventAlign);
    }
 catch (    CorruptedSpanCallTreeNodeException e) {
      logger.warn("Find corrupted span event.",e);
      CorruptedSpanAlignFactory factory=new CorruptedSpanAlignFactory();
      final CallTree subTree=new SpanCallTree(factory.get(e.getTitle(),span,spanEventBo));
      tree.add(subTree);
      return;
    }
    final long nextSpanId=spanEventBo.getNextSpanId();
    final List<SpanBo> nextSpanBoList=spanIdMap.remove(nextSpanId);
    if (nextSpanId != ROOT && nextSpanBoList != null) {
      final SpanBo nextSpanBo=getNextSpan(span,spanEventBo,nextSpanBoList);
      if (nextSpanBo != null) {
        final CallTree subTree=createSpanCallTree(nextSpanBo);
        tree.add(subTree);
      }
 else {
        logger.debug("nextSpanId not found. {}",nextSpanId);
      }
    }
    final int nextAsyncId=spanEventBo.getNextAsyncId();
    for (    List<SpanEventBo> list : asyncSpanEventMap.get(nextAsyncId)) {
      final CallTree subTree=createAsyncSpanCallTree(span,list,asyncSpanEventMap);
      tree.add(subTree);
    }
  }
}
