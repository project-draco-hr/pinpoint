{
  logger.debug("populate start");
  SpanAlignDepth spanAlignDepth=new SpanAlignDepth(spanDepth);
  SpanAlign spanAlign=new SpanAlign(spanDepth,span);
  container.add(spanAlign);
  AsyncSpanEventAligner aligner=new AsyncSpanEventAligner();
  List<SpanEventBo> spanEventBoList=aligner.sort(span.getSpanEventBoList());
  if (spanEventBoList == null) {
    return;
  }
  if (logger.isDebugEnabled()) {
    for (    SpanEventBo spanEvent : spanEventBoList) {
      logger.debug("Align span event {}",spanEvent);
    }
  }
  spanAlign.setHasChild(true);
  for (  SpanEventBo spanEventBo : spanEventBoList) {
    if (spanAlignDepth.isParentMissing(spanEventBo)) {
      continue;
    }
    if (spanAlignDepth.hasMissing(spanEventBo)) {
      final int currentDepth=spanAlignDepth.getDepth(spanEventBo);
      final SpanEventBo missingEvent=new SpanEventBo();
      missingEvent.setStartElapsed(0);
      missingEvent.setEndElapsed(0);
      final SpanAlign spanEventAlign=new SpanAlign(currentDepth,span,missingEvent);
      container.add(spanEventAlign);
      continue;
    }
    final int currentDepth=spanAlignDepth.getDepth(spanEventBo);
    final SpanAlign spanEventAlign=new SpanAlign(currentDepth,span,spanEventBo);
    container.add(spanEventAlign);
    if (logger.isDebugEnabled()) {
      logger.debug("spanEvent type:{} depth:{} spanEventDepth:{} ",spanEventBo.getServiceType(),currentDepth,spanEventBo.getDepth());
    }
    final long nextSpanId=spanEventBo.getNextSpanId();
    final List<SpanBo> nextSpanBoList=spanIdMap.remove(nextSpanId);
    if (nextSpanId != ROOT && nextSpanBoList != null) {
      int childDepth=currentDepth + 1;
      SpanBo spanBo=getNextSpan(span,spanEventBo,nextSpanBoList);
      if (spanBo != null) {
        populate(spanBo,childDepth,container);
      }
 else {
        logger.debug("nextSpanId not found. {}",nextSpanId);
      }
    }
  }
  logger.debug("populate end");
}
