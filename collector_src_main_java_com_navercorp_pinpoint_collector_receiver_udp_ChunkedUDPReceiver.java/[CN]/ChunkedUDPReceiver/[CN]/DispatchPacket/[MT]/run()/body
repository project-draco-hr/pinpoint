{
  Timer.Context time=receiver.getTimer().time();
  final ChunkHeaderTBaseDeserializer deserializer=deserializerFactory.createDeserializer();
  try {
    List<TBase<?,?>> list=deserializer.deserialize(packet.getData(),packet.getOffset(),packet.getLength());
    if (list == null) {
      return;
    }
    for (    TBase<?,?> tBase : list) {
      if (tBase instanceof L4Packet) {
        if (logger.isDebugEnabled()) {
          L4Packet packet=(L4Packet)tBase;
          logger.debug("udp l4 packet {}",packet.getHeader());
        }
        continue;
      }
      if (tBase instanceof NetworkAvailabilityCheckPacket) {
        if (logger.isDebugEnabled()) {
          logger.debug("received udp network availability check packet.");
        }
        responseOK();
        continue;
      }
      receiver.getDispatchHandler().dispatchSendMessage(tBase);
    }
  }
 catch (  TException e) {
    if (logger.isWarnEnabled()) {
      logger.warn("packet serialize error. SendSocketAddress:{} Cause:{}",packet.getSocketAddress(),e.getMessage(),e);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("packet dump hex:{}",PacketUtils.dumpDatagramPacket(packet));
    }
  }
catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn("Unexpected error. SendSocketAddress:{} Cause:{} ",packet.getSocketAddress(),e.getMessage(),e);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("packet dump hex:{}",PacketUtils.dumpDatagramPacket(packet));
    }
  }
 finally {
    receiver.getDatagramPacketPool().returnObject(packet);
    time.stop();
  }
}
