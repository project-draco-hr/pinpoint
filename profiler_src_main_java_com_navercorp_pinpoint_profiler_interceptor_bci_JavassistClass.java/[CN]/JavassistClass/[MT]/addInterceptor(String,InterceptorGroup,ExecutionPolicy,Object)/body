{
  Asserts.notNull(interceptorClassName,"interceptorClassName");
  int interceptorId=-1;
  Class<?> interceptorType=pluginContext.injectClass(classLoader,interceptorClassName);
  Targets targets=interceptorType.getAnnotation(Targets.class);
  if (targets != null) {
    for (    TargetMethod m : targets.methods()) {
      interceptorId=addInterceptor0(m,interceptorClassName,group,executionPolicy,constructorArgs);
    }
    for (    TargetConstructor c : targets.constructors()) {
      interceptorId=addInterceptor0(c,interceptorClassName,group,executionPolicy,constructorArgs);
    }
    for (    TargetFilter f : targets.filters()) {
      interceptorId=addInterceptor0(f,interceptorClassName,group,executionPolicy,constructorArgs);
    }
  }
  TargetMethod targetMethod=interceptorType.getAnnotation(TargetMethod.class);
  if (targetMethod != null) {
    interceptorId=addInterceptor0(targetMethod,interceptorClassName,group,executionPolicy,constructorArgs);
  }
  TargetConstructor targetConstructor=interceptorType.getAnnotation(TargetConstructor.class);
  if (targetConstructor != null) {
    interceptorId=addInterceptor0(targetConstructor,interceptorClassName,group,executionPolicy,constructorArgs);
  }
  TargetFilter targetFilter=interceptorType.getAnnotation(TargetFilter.class);
  if (targetFilter != null) {
    interceptorId=addInterceptor0(targetFilter,interceptorClassName,group,executionPolicy,constructorArgs);
  }
  if (interceptorId == -1) {
    throw new PinpointException("No target is specified. At least one of @Targets, @TargetMethod, @TargetConstructor, @TargetFilter must present. interceptor: " + interceptorClassName);
  }
  return interceptorId;
}
