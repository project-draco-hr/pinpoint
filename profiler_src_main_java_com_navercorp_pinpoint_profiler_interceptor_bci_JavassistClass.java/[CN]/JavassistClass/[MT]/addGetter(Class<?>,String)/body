{
  java.lang.reflect.Method[] methods=interfaceType.getMethods();
  if (methods.length != 1) {
    throw new InstrumentException("Getter interface must have only one method: " + interfaceType.getName());
  }
  java.lang.reflect.Method getter=methods[0];
  if (getter.getParameterTypes().length != 0) {
    throw new InstrumentException("Getter interface method must be no-args and non-void: " + interfaceType.getName());
  }
  try {
    CtField field=ctClass.getField(fieldName);
    String expression;
    if (field.getType().isPrimitive()) {
      String fieldType=field.getType().getName();
      String wrapperType=getWrapperClassName(fieldType);
      expression=wrapperType + ".valueOf(" + fieldName+ ")";
    }
 else {
      expression=fieldName;
    }
    CtMethod getterMethod=CtNewMethod.make("public " + getter.getReturnType().getName() + " "+ getter.getName()+ "() { return "+ expression+ "; }",ctClass);
    ctClass.addMethod(getterMethod);
    CtClass ctInterface=ctClass.getClassPool().get(interfaceType.getName());
    ctClass.addInterface(ctInterface);
  }
 catch (  NotFoundException ex) {
    throw new InstrumentException("Failed to add getter. No such field: " + fieldName,ex);
  }
catch (  Exception e) {
    throw new InstrumentException("Fail to add getter: " + interfaceType.getName(),e);
  }
}
