{
  try {
    if (interceptor != null) {
      if (interceptor instanceof StaticAroundInterceptor) {
        StaticAroundInterceptor staticAroundInterceptor=(StaticAroundInterceptor)interceptor;
        interceptorId=interceptorRegistryBinder.getInterceptorRegistryAdaptor().addStaticInterceptor(staticAroundInterceptor);
      }
 else       if (interceptor instanceof SimpleAroundInterceptor) {
        SimpleAroundInterceptor simpleAroundInterceptor=(SimpleAroundInterceptor)interceptor;
        interceptorId=interceptorRegistryBinder.getInterceptorRegistryAdaptor().addSimpleInterceptor(simpleAroundInterceptor);
      }
 else {
        throw new InstrumentException("unsupported TargetMethod ServiceTypeInfo:" + interceptor);
      }
      injectInterceptor(behavior,interceptor);
    }
 else {
      interceptor=InterceptorRegistry.findInterceptor(interceptorId);
    }
    if (interceptor instanceof StaticAroundInterceptor) {
switch (type) {
case around:
        addStaticAroundInterceptor(methodName,interceptorId,behavior);
      break;
case before:
    addStaticBeforeInterceptor(methodName,interceptorId,behavior);
  break;
case after:
addStaticAfterInterceptor(methodName,interceptorId,behavior);
break;
default :
throw new UnsupportedOperationException("unsupported type");
}
}
 else if (interceptor instanceof SimpleAroundInterceptor) {
switch (type) {
case around:
addSimpleAroundInterceptor(methodName,interceptorId,behavior);
break;
case before:
addSimpleBeforeInterceptor(methodName,interceptorId,behavior);
break;
case after:
addSimpleAfterInterceptor(methodName,interceptorId,behavior);
break;
default :
throw new UnsupportedOperationException("unsupported type");
}
}
 else {
throw new IllegalArgumentException("unsupported");
}
return interceptorId;
}
 catch (NotFoundException e) {
throw new InstrumentException(getInterceptorName(interceptor) + " add fail. Cause:" + e.getMessage(),e);
}
catch (CannotCompileException e) {
throw new InstrumentException(getInterceptorName(interceptor) + " add fail. Cause:" + e.getMessage(),e);
}
}
