{
  final String returnType=getReturnType(behavior);
  final String target=getTargetIdentifier(behavior);
  final String[] parameterType=JavaAssistUtils.parseParameterSignature(behavior.getSignature());
  String parameterTypeString=null;
  if (isStatic) {
    parameterTypeString=JavaAssistUtils.getParameterDescription(parameterType);
  }
  final String parameterIdentifier=getParameterIdentifier(parameterType);
  final CodeBuilder after=new CodeBuilder();
  after.begin();
  if (isStatic) {
    after.format("  %1$s.after(%2$s, \"%3$s\", \"%4$s\", \"%5$s\", %6$s, %7$s, null);",invokerClass.getName(),target,behavior.getDeclaringClass(),behavior.getName(),parameterTypeString,parameterIdentifier,returnType);
  }
 else {
    if (legacy) {
      after.format("  %1$s.after(%2$s, %3$s, %4$s, null);",invokerClass.getName(),target,parameterIdentifier,returnType);
    }
 else {
      after.format("  %1$s.after(%2$s, %3$s, null",invokerClass.getName(),target,returnType);
      Method invokerAfter=getAfter(invokerClass);
      int i=0;
      int argNum=parameterType.length;
      int invokerArgNum=invokerAfter.getParameterTypes().length - 3;
      int matchNum=Math.min(argNum,invokerArgNum);
      for (; i < matchNum; i++) {
        after.append(", $" + (i + 1));
      }
      for (; i < invokerArgNum; i++) {
        after.append(", null");
      }
      after.append(");");
    }
  }
  after.end();
  final String buildAfter=after.toString();
  if (isDebug) {
    logger.debug("addAfterInterceptor after behavior:{} code:{}",behavior.getLongName(),buildAfter);
  }
  behavior.insertAfter(buildAfter);
  CodeBuilder catchCode=new CodeBuilder();
  catchCode.begin();
  if (isStatic) {
    catchCode.format("  %1$s.after(%2$s, \"%3$s\", \"%4$s\", \"%5$s\", %6$s, null, $e);",invokerClass.getName(),target,behavior.getDeclaringClass(),behavior.getName(),parameterTypeString,parameterIdentifier);
  }
 else {
    if (legacy) {
      catchCode.format("  %1$s.after(%2$s, %3$s, null, $e);",invokerClass.getName(),target,parameterIdentifier);
    }
 else {
      catchCode.format("  %1$s.after(%2$s, null, $e",invokerClass.getName(),target);
      Method invokerAfter=getAfter(invokerClass);
      int i=0;
      int argNum=parameterType.length;
      int invokerArgNum=invokerAfter.getParameterTypes().length - 3;
      int matchNum=Math.min(argNum,invokerArgNum);
      for (; i < matchNum; i++) {
        catchCode.append(", $" + (i + 1));
      }
      for (; i < invokerArgNum; i++) {
        catchCode.append(", null");
      }
      catchCode.append(");");
    }
  }
  catchCode.append("  throw $e;");
  catchCode.end();
  String buildCatch=catchCode.toString();
  if (isDebug) {
    logger.debug("addAfterInterceptor catch behavior:{} code:{}",behavior.getLongName(),buildCatch);
  }
  CtClass th=behavior.getDeclaringClass().getClassPool().get("java.lang.Throwable");
  behavior.addCatch(buildCatch,th);
}
