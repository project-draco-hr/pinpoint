{
  if (logger.isLoggable(Level.INFO)) {
    logger.info("after " + StringUtils.toString(target) + " "+ className+ "."+ methodName+ parameterDescription+ " args:"+ Arrays.toString(args)+ " result:"+ result);
  }
  if (JDBCScope.isInternal()) {
    logger.info("internal jdbc scope. skip trace");
    return;
  }
  if (!InterceptorUtils.isSuccess(result)) {
    return;
  }
  TraceContext traceContext=TraceContext.getTraceContext();
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  if (target instanceof Connection) {
    DatabaseInfo databaseInfo=(DatabaseInfo)getUrl.invoke(target);
    this.setUrl.invoke(result,databaseInfo);
    String sql=(String)args[0];
    this.setSql.invoke(result,sql);
  }
  trace.afterTime();
  trace.traceBlockEnd();
}
