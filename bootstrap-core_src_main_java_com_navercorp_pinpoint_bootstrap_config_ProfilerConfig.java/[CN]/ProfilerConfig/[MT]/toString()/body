{
  StringBuilder builder=new StringBuilder();
  builder.append("{properties=");
  builder.append(properties);
  builder.append(", propertyPlaceholderHelper=");
  builder.append(propertyPlaceholderHelper);
  builder.append(", profileEnable=");
  builder.append(profileEnable);
  builder.append(", collectorSpanServerIp=");
  builder.append(collectorSpanServerIp);
  builder.append(", collectorSpanServerPort=");
  builder.append(collectorSpanServerPort);
  builder.append(", collectorStatServerIp=");
  builder.append(collectorStatServerIp);
  builder.append(", collectorStatServerPort=");
  builder.append(collectorStatServerPort);
  builder.append(", collectorTcpServerIp=");
  builder.append(collectorTcpServerIp);
  builder.append(", collectorTcpServerPort=");
  builder.append(collectorTcpServerPort);
  builder.append(", spanDataSenderWriteQueueSize=");
  builder.append(spanDataSenderWriteQueueSize);
  builder.append(", spanDataSenderSocketSendBufferSize=");
  builder.append(spanDataSenderSocketSendBufferSize);
  builder.append(", spanDataSenderSocketTimeout=");
  builder.append(spanDataSenderSocketTimeout);
  builder.append(", spanDataSenderChunkSize=");
  builder.append(spanDataSenderChunkSize);
  builder.append(", statDataSenderWriteQueueSize=");
  builder.append(statDataSenderWriteQueueSize);
  builder.append(", statDataSenderSocketSendBufferSize=");
  builder.append(statDataSenderSocketSendBufferSize);
  builder.append(", statDataSenderSocketTimeout=");
  builder.append(statDataSenderSocketTimeout);
  builder.append(", statDataSenderChunkSize=");
  builder.append(statDataSenderChunkSize);
  builder.append(", tcpDataSenderCommandAcceptEnable=");
  builder.append(tcpDataSenderCommandAcceptEnable);
  builder.append(", recordAgentActiveThread=");
  builder.append(traceAgentActiveThread);
  builder.append(", callStackMaxDepth=");
  builder.append(callStackMaxDepth);
  builder.append(", jdbcSqlCacheSize=");
  builder.append(jdbcSqlCacheSize);
  builder.append(", jdbcMaxSqlBindValueSize=");
  builder.append(jdbcMaxSqlBindValueSize);
  builder.append(", jdbcProfile=");
  builder.append(jdbcProfile);
  builder.append(", jdbcProfileMySql=");
  builder.append(jdbcProfileMySql);
  builder.append(", jdbcProfileMySqlSetAutoCommit=");
  builder.append(jdbcProfileMySqlSetAutoCommit);
  builder.append(", jdbcProfileMySqlCommit=");
  builder.append(jdbcProfileMySqlCommit);
  builder.append(", jdbcProfileMySqlRollback=");
  builder.append(jdbcProfileMySqlRollback);
  builder.append(", jdbcProfileJtds=");
  builder.append(jdbcProfileJtds);
  builder.append(", jdbcProfileJtdsSetAutoCommit=");
  builder.append(jdbcProfileJtdsSetAutoCommit);
  builder.append(", jdbcProfileJtdsCommit=");
  builder.append(jdbcProfileJtdsCommit);
  builder.append(", jdbcProfileJtdsRollback=");
  builder.append(jdbcProfileJtdsRollback);
  builder.append(", jdbcProfileOracle=");
  builder.append(jdbcProfileOracle);
  builder.append(", jdbcProfileOracleSetAutoCommit=");
  builder.append(jdbcProfileOracleSetAutoCommit);
  builder.append(", jdbcProfileOracleCommit=");
  builder.append(jdbcProfileOracleCommit);
  builder.append(", jdbcProfileOracleRollback=");
  builder.append(jdbcProfileOracleRollback);
  builder.append(", jdbcProfileCubrid=");
  builder.append(jdbcProfileCubrid);
  builder.append(", jdbcProfileCubridSetAutoCommit=");
  builder.append(jdbcProfileCubridSetAutoCommit);
  builder.append(", jdbcProfileCubridCommit=");
  builder.append(jdbcProfileCubridCommit);
  builder.append(", jdbcProfileCubridRollback=");
  builder.append(jdbcProfileCubridRollback);
  builder.append(", jdbcProfileDbcp=");
  builder.append(jdbcProfileDbcp);
  builder.append(", jdbcProfileDbcpConnectionClose=");
  builder.append(jdbcProfileDbcpConnectionClose);
  builder.append(", tomcatHidePinpointHeader=");
  builder.append(tomcatHidePinpointHeader);
  builder.append(", tomcatExcludeUrlFilter=");
  builder.append(tomcatExcludeUrlFilter);
  builder.append(", arucs=");
  builder.append(arucs);
  builder.append(", arucsKeyTrace=");
  builder.append(arucsKeyTrace);
  builder.append(", memcached=");
  builder.append(memcached);
  builder.append(", memcachedKeyTrace=");
  builder.append(memcachedKeyTrace);
  builder.append(", ibatis=");
  builder.append(ibatis);
  builder.append(", mybatis=");
  builder.append(mybatis);
  builder.append(", redis=");
  builder.append(redis);
  builder.append(", redisPipeline=");
  builder.append(redisPipeline);
  builder.append(", apacheHttpClient3Profile=");
  builder.append(apacheHttpClient3Profile);
  builder.append(", apacheHttpClient3ProfileCookie=");
  builder.append(apacheHttpClient3ProfileCookie);
  builder.append(", apacheHttpClient3ProfileCookieDumpType=");
  builder.append(apacheHttpClient3ProfileCookieDumpType);
  builder.append(", apacheHttpClient3ProfileCookieSamplingRate=");
  builder.append(apacheHttpClient3ProfileCookieSamplingRate);
  builder.append(", apacheHttpClient3ProfileEntity=");
  builder.append(apacheHttpClient3ProfileEntity);
  builder.append(", apacheHttpClient3ProfileEntityDumpType=");
  builder.append(apacheHttpClient3ProfileEntityDumpType);
  builder.append(", apacheHttpClient3ProfileEntitySamplingRate=");
  builder.append(apacheHttpClient3ProfileEntitySamplingRate);
  builder.append(", apacheHttpClient4Profile=");
  builder.append(apacheHttpClient4Profile);
  builder.append(", apacheHttpClient4ProfileCookie=");
  builder.append(apacheHttpClient4ProfileCookie);
  builder.append(", apacheHttpClient4ProfileCookieDumpType=");
  builder.append(apacheHttpClient4ProfileCookieDumpType);
  builder.append(", apacheHttpClient4ProfileCookieSamplingRate=");
  builder.append(apacheHttpClient4ProfileCookieSamplingRate);
  builder.append(", apacheHttpClient4ProfileEntity=");
  builder.append(apacheHttpClient4ProfileEntity);
  builder.append(", apacheHttpClient4ProfileEntityDumpType=");
  builder.append(apacheHttpClient4ProfileEntityDumpType);
  builder.append(", apacheHttpClient4ProfileEntitySamplingRate=");
  builder.append(apacheHttpClient4ProfileEntitySamplingRate);
  builder.append(", apacheHttpClient4ProfileStatusCode=");
  builder.append(apacheHttpClient4ProfileStatusCode);
  builder.append(", apacheNIOHttpClient4Profile=");
  builder.append(apacheNIOHttpClient4Profile);
  builder.append(", ningAsyncHttpClientProfile=");
  builder.append(ningAsyncHttpClientProfile);
  builder.append(", ningAsyncHttpClientProfileCookie=");
  builder.append(ningAsyncHttpClientProfileCookie);
  builder.append(", ningAsyncHttpClientProfileCookieDumpType=");
  builder.append(ningAsyncHttpClientProfileCookieDumpType);
  builder.append(", ningAsyncHttpClientProfileCookieDumpSize=");
  builder.append(ningAsyncHttpClientProfileCookieDumpSize);
  builder.append(", ningAsyncHttpClientProfileCookieSamplingRate=");
  builder.append(ningAsyncHttpClientProfileCookieSamplingRate);
  builder.append(", ningAsyncHttpClientProfileEntity=");
  builder.append(ningAsyncHttpClientProfileEntity);
  builder.append(", ningAsyncHttpClientProfileEntityDumpType=");
  builder.append(ningAsyncHttpClientProfileEntityDumpType);
  builder.append(", ningAsyncHttpClientProfileEntityDumpSize=");
  builder.append(ningAsyncHttpClientProfileEntityDumpSize);
  builder.append(", ningAsyncHttpClientProfileEntitySamplingRate=");
  builder.append(ningAsyncHttpClientProfileEntitySamplingRate);
  builder.append(", ningAsyncHttpClientProfileParam=");
  builder.append(ningAsyncHttpClientProfileParam);
  builder.append(", ningAsyncHttpClientProfileParamDumpType=");
  builder.append(ningAsyncHttpClientProfileParamDumpType);
  builder.append(", ningAsyncHttpClientProfileParamDumpSize=");
  builder.append(ningAsyncHttpClientProfileParamDumpSize);
  builder.append(", ningAsyncHttpClientProfileParamSamplingRate=");
  builder.append(ningAsyncHttpClientProfileParamSamplingRate);
  builder.append(", springBeans=");
  builder.append(springBeans);
  builder.append(", springBeansNamePatterns=");
  builder.append(springBeansNamePatterns);
  builder.append(", springBeansClassPatterns=");
  builder.append(springBeansClassPatterns);
  builder.append(", springBeansAnnotations=");
  builder.append(springBeansAnnotations);
  builder.append(", samplingEnable=");
  builder.append(samplingEnable);
  builder.append(", samplingRate=");
  builder.append(samplingRate);
  builder.append(", ioBufferingEnable=");
  builder.append(ioBufferingEnable);
  builder.append(", ioBufferingBufferSize=");
  builder.append(ioBufferingBufferSize);
  builder.append(", profileJvmCollectInterval=");
  builder.append(profileJvmCollectInterval);
  builder.append(", profilableClassFilter=");
  builder.append(profilableClassFilter);
  builder.append(", DEFAULT_AGENT_INFO_SEND_RETRY_INTERVAL=");
  builder.append(DEFAULT_AGENT_INFO_SEND_RETRY_INTERVAL);
  builder.append(", agentInfoSendRetryInterval=");
  builder.append(agentInfoSendRetryInterval);
  builder.append(", applicationServerType=");
  builder.append(applicationServerType);
  builder.append(", applicationTypeDetectOrder=");
  builder.append(applicationTypeDetectOrder);
  builder.append(", log4jLoggingTransactionInfo=");
  builder.append(log4jLoggingTransactionInfo);
  builder.append(", logbackLoggingTransactionInfo=");
  builder.append(logbackLoggingTransactionInfo);
  builder.append("}");
  return builder.toString();
}
