{
  transformTemplate.transform("oracle.jdbc.driver.PhysicalConnection",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor Instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=Instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.ConnectionCloseInterceptor",OracleConstants.ORACLE_SCOPE);
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.StatementCreateInterceptor",OracleConstants.ORACLE_SCOPE);
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.PreparedStatementCreateInterceptor",OracleConstants.ORACLE_SCOPE);
      if (config.isProfileSetAutoCommit()) {
        target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.TransactionSetAutoCommitInterceptor",OracleConstants.ORACLE_SCOPE);
      }
      if (config.isProfileCommit()) {
        target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.TransactionCommitInterceptor",OracleConstants.ORACLE_SCOPE);
      }
      if (config.isProfileRollback()) {
        target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.TransactionRollbackInterceptor",OracleConstants.ORACLE_SCOPE);
      }
      return target.toBytecode();
    }
  }
);
}
