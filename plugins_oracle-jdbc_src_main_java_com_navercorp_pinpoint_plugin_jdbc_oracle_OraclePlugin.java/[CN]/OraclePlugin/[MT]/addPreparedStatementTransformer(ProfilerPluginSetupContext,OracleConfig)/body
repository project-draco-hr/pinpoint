{
  PinpointClassFileTransformer transformer=new PinpointClassFileTransformer(){
    @Override public byte[] transform(    Instrumentor instrumentContext,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      if (className.equals(CLASS_PREPARED_STATEMENT)) {
        if (instrumentContext.exist(loader,CLASS_PREPARED_STATEMENT_WRAPPER)) {
          return null;
        }
      }
      InstrumentClass target=instrumentContext.getInstrumentClass(loader,className,classfileBuffer);
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.ParsingResultAccessor");
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.BindValueAccessor","new java.util.HashMap()");
      int maxBindValueSize=config.getMaxSqlBindValueSize();
      InterceptorGroup group=instrumentContext.getInterceptorGroup(OracleConstants.GROUP_ORACLE);
      target.addGroupedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.PreparedStatementExecuteQueryInterceptor",group,maxBindValueSize);
      target.addGroupedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.PreparedStatementBindVariableInterceptor",group);
      return target.toBytecode();
    }
  }
;
  setupContext.addClassFileTransformer(CLASS_PREPARED_STATEMENT,transformer);
  setupContext.addClassFileTransformer(CLASS_PREPARED_STATEMENT_WRAPPER,transformer);
}
