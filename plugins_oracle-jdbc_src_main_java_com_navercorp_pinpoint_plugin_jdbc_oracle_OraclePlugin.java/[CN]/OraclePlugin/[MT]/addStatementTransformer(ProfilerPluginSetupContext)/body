{
  TransformCallback transformer=new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentContext,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      if (className.equals(CLASS_STATEMENT)) {
        if (instrumentContext.exist(loader,CLASS_STATEMENT_WRAPPER)) {
          return null;
        }
      }
      InstrumentClass target=instrumentContext.getInstrumentClass(loader,className,classfileBuffer);
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addGroupedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.StatementExecuteQueryInterceptor",OracleConstants.GROUP_ORACLE);
      target.addGroupedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.StatementExecuteUpdateInterceptor",OracleConstants.GROUP_ORACLE);
      return target.toBytecode();
    }
  }
;
  setupContext.addClassFileTransformer(CLASS_STATEMENT,transformer);
  setupContext.addClassFileTransformer(CLASS_STATEMENT_WRAPPER,transformer);
}
