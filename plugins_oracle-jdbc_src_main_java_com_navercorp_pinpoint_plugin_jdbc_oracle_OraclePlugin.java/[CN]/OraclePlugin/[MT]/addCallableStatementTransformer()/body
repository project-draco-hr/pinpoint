{
  TransformCallback transformer=new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      if (className.equals(CLASS_CALLABLE_STATEMENT)) {
        if (instrumentor.exist(loader,CLASS_CALLABLE_STATEMENT_WRAPPER)) {
          return null;
        }
      }
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.ParsingResultAccessor");
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.BindValueAccessor");
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.CallableStatementRegisterOutParameterInterceptor",OracleConstants.ORACLE_SCOPE);
      return target.toBytecode();
    }
  }
;
  transformTemplate.transform(CLASS_CALLABLE_STATEMENT,transformer);
  transformTemplate.transform(CLASS_CALLABLE_STATEMENT_WRAPPER,transformer);
}
