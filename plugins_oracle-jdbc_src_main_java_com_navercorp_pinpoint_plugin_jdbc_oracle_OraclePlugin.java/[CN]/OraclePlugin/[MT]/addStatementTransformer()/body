{
  TransformCallback transformer=new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor Instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      if (className.equals(CLASS_STATEMENT)) {
        if (Instrumentor.exist(loader,CLASS_STATEMENT_WRAPPER)) {
          return null;
        }
      }
      InstrumentClass target=Instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField("com.navercorp.pinpoint.bootstrap.plugin.jdbc.DatabaseInfoAccessor");
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.StatementExecuteQueryInterceptor",OracleConstants.ORACLE_SCOPE);
      target.addScopedInterceptor("com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.StatementExecuteUpdateInterceptor",OracleConstants.ORACLE_SCOPE);
      return target.toBytecode();
    }
  }
;
  transformTemplate.transform(CLASS_STATEMENT,transformer);
  transformTemplate.transform(CLASS_STATEMENT_WRAPPER,transformer);
}
