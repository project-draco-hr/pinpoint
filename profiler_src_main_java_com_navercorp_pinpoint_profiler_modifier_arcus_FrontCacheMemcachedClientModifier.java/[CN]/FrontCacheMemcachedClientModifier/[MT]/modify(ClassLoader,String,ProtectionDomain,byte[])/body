{
  if (logger.isInfoEnabled()) {
    logger.info("Modifying. {}",javassistClassName);
  }
  try {
    InstrumentClass aClass=byteCodeInstrumentor.getClass(classLoader,javassistClassName,classFileBuffer);
    String[] args={"java.lang.String","java.util.concurrent.Future",Long.TYPE.toString()};
    if (!checkCompatibility(aClass,args)) {
      return null;
    }
    final List<MethodInfo> declaredMethods=aClass.getDeclaredMethods(new FrontCacheMemcachedMethodFilter());
    for (    MethodInfo method : declaredMethods) {
      SimpleAroundInterceptor apiInterceptor=(SimpleAroundInterceptor)byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.navercorp.pinpoint.profiler.modifier.arcus.interceptor.ApiInterceptor");
      if (this.getProfilerConfig().isMemcachedKeyTrace()) {
        final int index=ParameterUtils.findFirstString(method,3);
        if (index != -1) {
          ((ParameterExtractorSupport)apiInterceptor).setParameterExtractor(new IndexParameterExtractor(index));
        }
      }
      aClass.addGroupInterceptor(method.getName(),method.getParameterTypes(),apiInterceptor,ArcusScope.SCOPE);
    }
    return aClass.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(e.getMessage(),e);
    }
    return null;
  }
}
