{
  ByteCodeInstrumentor instrumentor=mock(ByteCodeInstrumentor.class);
  TraceContext traceContext=mock(TraceContext.class);
  InstrumentClass aClass=mock(InstrumentClass.class);
  MethodInfo aMethod=mock(MethodInfo.class);
  Scope aScope=mock(Scope.class);
  ClassLoader classLoader=getClass().getClassLoader();
  String methodName="someMethod";
  Class<?>[] parameterTypes=new Class<?>[]{String.class};
  String[] parameterTypeNames=TypeUtils.toClassNames(parameterTypes);
  String scopeName="test";
  when(instrumentor.getScope(scopeName)).thenReturn(aScope);
  when(aClass.getDeclaredMethod(methodName,parameterTypeNames)).thenReturn(aMethod);
  when(aMethod.getName()).thenReturn(methodName);
  when(aMethod.getParameterTypes()).thenReturn(parameterTypeNames);
  when(aClass.addInterceptor(eq(methodName),eq(parameterTypeNames),isA(Interceptor.class))).thenReturn(0);
  ProfilerPluginContext helper=new ProfilerPluginContext(instrumentor,traceContext);
  ClassEditorBuilder builder=helper.newClassEditorBuilder();
  MetadataBuilder mb=builder.newMetadataBuilder();
  mb.inject(ObjectTraceValue.class);
  mb.initializeWithDefaultConstructorOf("java.util.HashMap");
  FieldSnooperBuilder fb=builder.newFieldAccessorBuilder();
  fb.inject(ObjectSnooper.class);
  fb.toAccess("someField");
  InterceptorBuilder ib=builder.newInterceptorBuilder();
  ib.intercept(methodName,parameterTypeNames);
  ib.with("com.navercorp.pinpoint.bootstrap.plugin.TestInterceptor");
  ib.constructedWith("provided");
  ib.in(scopeName);
  ClassEditor editor=builder.build();
  editor.edit(classLoader,aClass);
  verify(aClass).addInterceptor(eq(methodName),isA(String[].class),isA(Interceptor.class));
  verify(aClass).addTraceValue(ObjectTraceValue.class,"new java.util.HashMap();");
  verify(aClass).addGetter(ObjectSnooper.class,"someField");
}
