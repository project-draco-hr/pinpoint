{
  ByteCodeInstrumentor instrumentor=mock(ByteCodeInstrumentor.class);
  TraceContext traceContext=mock(TraceContext.class);
  InstrumentClass aClass=mock(InstrumentClass.class);
  MethodInfo aMethod=mock(MethodInfo.class);
  Scope aScope=mock(Scope.class);
  ClassLoader classLoader=getClass().getClassLoader();
  String targetClassName="com.nhn.pinpoint.bootstrap.plugin.Foo";
  String methodName="someMethod";
  String[] parameterTypes=new String[]{"java.lang.String"};
  String scopeName="test";
  byte[] classFileBuffer=BytecodeUtils.getClassFile(classLoader,targetClassName);
  when(instrumentor.getClass(classLoader,targetClassName,classFileBuffer)).thenReturn(aClass);
  when(instrumentor.getScope(scopeName)).thenReturn(aScope);
  when(aClass.getDeclaredMethod(methodName,parameterTypes)).thenReturn(aMethod);
  when(aMethod.getName()).thenReturn(methodName);
  when(aMethod.getParameterTypes()).thenReturn(parameterTypes);
  when(aClass.addInterceptor(eq(methodName),eq(parameterTypes),isA(Interceptor.class))).thenReturn(0);
  ProfilerPluginContext helper=new ProfilerPluginContext(instrumentor,traceContext);
  ClassEditorBuilder builder=helper.getClassEditorBuilderFor(targetClassName);
  builder.intercept(methodName,parameterTypes).with("com.nhn.pinpoint.bootstrap.plugin.TestInterceptor").constructedWith("provided").in(scopeName);
  builder.inject(TestMetadata.class).initializeWithDefaultConstructorOf("java.util.HashMap");
  ClassEditor editor=builder.build();
  editor.edit(classLoader,targetClassName,null,classFileBuffer);
  verify(aClass).addInterceptor(eq(methodName),isA(String[].class),isA(Interceptor.class));
  verify(aClass).addTraceValue(TestMetadata.class,"new java.util.HashMap();");
}
