{
  CtBehavior behavior=null;
  try {
    behavior=getBehavior(methodName,args);
  }
 catch (  NotFoundException e) {
    throw new NotFoundInstrumentException(interceptor.getClass().getSimpleName() + " add fail. Cause:" + e.getMessage(),e);
  }
  try {
    if (interceptor != null) {
      interceptorId=InterceptorRegistry.addInterceptor(interceptor);
    }
    if (type == Type.auto) {
      if (interceptor instanceof StaticAroundInterceptor) {
        addStaticAroundInterceptor(methodName,interceptorId,behavior);
      }
 else       if (interceptor instanceof StaticBeforeInterceptor) {
        addStaticBeforeInterceptor(methodName,interceptorId,behavior);
      }
 else       if (interceptor instanceof StaticAfterInterceptor) {
        addStaticAfterInterceptor(methodName,interceptorId,behavior);
      }
 else {
        throw new IllegalArgumentException("unsupported");
      }
    }
 else     if (type == Type.around && interceptor instanceof StaticAroundInterceptor) {
      addStaticAroundInterceptor(methodName,interceptorId,behavior);
    }
 else     if (type == Type.before && interceptor instanceof StaticBeforeInterceptor) {
      addStaticBeforeInterceptor(methodName,interceptorId,behavior);
    }
 else     if (type == Type.after && interceptor instanceof StaticAfterInterceptor) {
      addStaticAfterInterceptor(methodName,interceptorId,behavior);
    }
 else {
      throw new IllegalArgumentException("unsupported");
    }
    return interceptorId;
  }
 catch (  NotFoundException e) {
    throw new InstrumentException(interceptor.getClass().getSimpleName() + " add fail. Cause:" + e.getMessage(),e);
  }
catch (  CannotCompileException e) {
    throw new InstrumentException(interceptor.getClass().getSimpleName() + "add fail. Cause:" + e.getMessage(),e);
  }
}
