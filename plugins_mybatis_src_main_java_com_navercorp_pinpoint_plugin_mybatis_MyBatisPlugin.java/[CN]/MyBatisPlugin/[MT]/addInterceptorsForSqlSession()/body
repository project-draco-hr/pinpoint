{
  final MethodFilter methodFilter=MethodFilters.name("selectOne","selectList","selectMap","select","insert","update","delete");
  final String[] sqlSessionImpls={"org.apache.ibatis.session.defaults.DefaultSqlSession","org.mybatis.spring.SqlSessionTemplate"};
  for (  final String sqlSession : sqlSessionImpls) {
    transformTemplate.transform(sqlSession,new TransformCallback(){
      @Override public byte[] doInTransform(      Instrumentor instrumentor,      ClassLoader loader,      String className,      Class<?> classBeingRedefined,      ProtectionDomain protectionDomain,      byte[] classfileBuffer) throws InstrumentException {
        final InstrumentClass target=instrumentor.getInstrumentClass(loader,sqlSession,classfileBuffer);
        final List<InstrumentMethod> methodsToTrace=target.getDeclaredMethods(methodFilter);
        for (        InstrumentMethod methodToTrace : methodsToTrace) {
          String sqlSessionOperationInterceptor="com.navercorp.pinpoint.plugin.mybatis.interceptor.SqlSessionOperationInterceptor";
          methodToTrace.addScopedInterceptor(sqlSessionOperationInterceptor,MYBATIS_SCOPE,ExecutionPolicy.BOUNDARY);
        }
        return target.toBytecode();
      }
    }
);
  }
}
