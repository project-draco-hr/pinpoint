{
  final Map<LinkKey,LinkStatistics> linkStatMap=new HashMap<LinkKey,LinkStatistics>();
  final TimeSeriesStore timeSeriesStore=new DefaultTimeSeriesStoreImpl(range);
  final MapResponseHistogramSummary mapHistogramSummary=new MapResponseHistogramSummary();
  for (  List<SpanBo> transaction : filterList) {
    final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);
    for (    SpanBo span : transaction) {
      final Application srcApplication=createSourceApplication(span,transactionSpanMap);
      final Application destApplication=new Application(span.getApplicationId(),span.getServiceType());
      recordSpanResponseTime(destApplication,span,mapHistogramSummary);
      if (!destApplication.getServiceType().isRecordStatistics() || destApplication.getServiceType().isRpcClient()) {
        continue;
      }
      final LinkKey linkKey=new LinkKey(srcApplication,destApplication);
      LinkStatistics linkStat=linkStatMap.get(linkKey);
      if (linkStat == null) {
        linkStat=new LinkStatistics(srcApplication,destApplication);
        linkStatMap.put(linkKey,linkStat);
      }
      final short slotTime=getHistogramSlotTime(span,destApplication.getServiceType());
      linkStat.addCallData(span.getAgentId(),srcApplication.getServiceTypeCode(),destApplication.getName(),destApplication.getServiceTypeCode(),slotTime,1);
      timeSeriesStore.addLinkStat(linkKey,span.getCollectorAcceptTime(),slotTime,1L,span.hasException());
      Application node=new Application(span.getApplicationId(),span.getServiceType());
      timeSeriesStore.addNodeStat(node,span.getCollectorAcceptTime(),slotTime,1L,span.hasException());
      addNodeFromSpanEvent(span,linkStatMap,timeSeriesStore,transactionSpanMap);
    }
  }
  for (  LinkStatistics stat : linkStatMap.values()) {
    fillAdditionalInfo(stat);
  }
  List<LinkStatistics> linkStatisticsList=new ArrayList<LinkStatistics>(linkStatMap.values());
  ApplicationMap map=new ApplicationMapBuilder().build(linkStatisticsList);
  map.setTimeSeriesStore(timeSeriesStore);
  map.appendResponseTime(mapHistogramSummary);
  return map;
}
