{
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  if (target instanceof TServiceClient) {
    TServiceClient client=(TServiceClient)target;
    TProtocol oprot=client.getOutputProtocol();
    final Trace trace=traceContext.currentRawTraceObject();
    if (trace == null) {
      return;
    }
    ThriftRequestProperty parentTraceInfo=new ThriftRequestProperty();
    final boolean shouldSample=trace.canSampled();
    if (!shouldSample) {
      if (isDebug) {
        logger.debug("set Sampling flag=false");
      }
      parentTraceInfo.setShouldSample(shouldSample);
    }
 else {
      CallStackFrame recorder=trace.pushCallStackFrame();
      recorder.markBeforeTime();
      recorder.recordServiceType(THRIFT_CLIENT);
      String remoteAddress=UNKNOWN_ADDRESS;
      if (this.socketAccessor.isApplicable(oprot.getTransport())) {
        Socket socket=this.socketAccessor.get(oprot.getTransport());
        if (socket != null) {
          remoteAddress=ThriftUtils.getHostPort(socket.getRemoteSocketAddress());
        }
      }
      recorder.recordDestinationId(remoteAddress);
      String methodName=UNKNOWN_METHOD_NAME;
      if (args[0] instanceof String) {
        methodName=(String)args[0];
      }
      String serviceName=ThriftUtils.getClientServiceName(client);
      String thriftUrl=getServiceUrl(remoteAddress,serviceName,methodName);
      recorder.recordAttribute(THRIFT_URL,thriftUrl);
      TraceId nextId=trace.getTraceId().getNextTraceId();
      recorder.recordNextSpanId(nextId.getSpanId());
      parentTraceInfo.setTraceId(nextId.getTransactionId());
      parentTraceInfo.setSpanId(nextId.getSpanId());
      parentTraceInfo.setParentSpanId(nextId.getParentSpanId());
      parentTraceInfo.setFlags(nextId.getFlags());
      parentTraceInfo.setParentApplicationName(traceContext.getApplicationName());
      parentTraceInfo.setParentApplicationType(traceContext.getServerTypeCode());
      parentTraceInfo.setAcceptorHost(remoteAddress);
    }
    InterceptorGroupInvocation currentTransaction=this.group.getCurrentInvocation();
    currentTransaction.setAttachment(parentTraceInfo);
  }
}
