{
  final Channel channel=e.getChannel();
  Object message=e.getMessage();
  logger.debug("messageReceived:{} channel:{}",message,channel);
  ChannelContext channelContext=getChannelContext(channel);
  if (!PinpointServerSocketStateCode.isRun(channelContext.getCurrentStateCode())) {
    logger.warn("MessageReceived:{} from IllegalState Channel:{} this message will be ignore.",message,channel);
    return;
  }
  final short packetType=getPacketType(message);
switch (packetType) {
case PacketType.APPLICATION_SEND:
{
      SocketChannel socketChannel=getChannelContext(channel).getSocketChannel();
      messageListener.handleSend((SendPacket)message,socketChannel);
      return;
    }
case PacketType.APPLICATION_REQUEST:
{
    SocketChannel socketChannel=getChannelContext(channel).getSocketChannel();
    messageListener.handleRequest((RequestPacket)message,socketChannel);
    return;
  }
case PacketType.APPLICATION_RESPONSE:
{
  SocketChannel socketChannel=getChannelContext(channel).getSocketChannel();
  socketChannel.receiveResponsePacket((ResponsePacket)message);
  return;
}
case PacketType.APPLICATION_STREAM_CREATE:
case PacketType.APPLICATION_STREAM_CLOSE:
case PacketType.APPLICATION_STREAM_CREATE_SUCCESS:
case PacketType.APPLICATION_STREAM_CREATE_FAIL:
case PacketType.APPLICATION_STREAM_DATA:
handleStreamPacket((StreamPacket)message,channel);
return;
case PacketType.CONTROL_ENABLE_WORKER:
int requestId=((ControlEnableWorkerPacket)message).getRequestId();
Map<Object,Object> properties=decodeSocketProperties((ControlEnableWorkerPacket)message);
if (properties == null) {
sendEnableWorkerConfirmMessage(requestId,ControlEnableWorkerConfirmPacket.ILLEGAL_PROTOCOL,channel);
return;
}
channelContext.setChannelProperties(properties);
int returnCode=messageListener.handleEnableWorker(properties);
if (returnCode == ControlEnableWorkerConfirmPacket.SUCCESS) {
if (changeStateToRunDuplexCommunication(returnCode,channel)) {
sendEnableWorkerConfirmMessage(requestId,ControlEnableWorkerConfirmPacket.SUCCESS,channel);
}
 else {
sendEnableWorkerConfirmMessage(requestId,ControlEnableWorkerConfirmPacket.ALREADY_REGISTER,channel);
}
}
 else {
sendEnableWorkerConfirmMessage(requestId,returnCode,channel);
}
return;
case PacketType.CONTROL_CLIENT_CLOSE:
{
closeChannel(channel);
return;
}
default :
logger.warn("invalid messageReceived msg:{}, connection:{}",message,e.getChannel());
}
}
