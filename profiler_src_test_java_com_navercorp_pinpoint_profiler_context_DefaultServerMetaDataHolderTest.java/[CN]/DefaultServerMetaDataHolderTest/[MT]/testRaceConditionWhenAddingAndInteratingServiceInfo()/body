{
  final CountDownLatch initLatch=new CountDownLatch(THREAD_COUNT);
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CountDownLatch endLatch=new CountDownLatch(THREAD_COUNT);
  final Queue<Throwable> exceptions=new ConcurrentLinkedQueue<Throwable>();
  final ServerMetaDataHolder metaDataContext=new DefaultServerMetaDataHolder(VM_ARGS);
  metaDataContext.setServerName(SERVER_INFO);
  final List<ServerMetaData> serverMetaDatas=new Vector<ServerMetaData>(THREAD_COUNT / 2);
  for (int i=0; i < THREAD_COUNT; ++i) {
    if (i % 2 == 0) {
      final String serviceName="/name" + i;
      final List<String> serviceLibs=new ArrayList<String>();
      executorService.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          initLatch.countDown();
          try {
            startLatch.await();
            metaDataContext.addServiceInfo(serviceName,serviceLibs);
          }
 catch (          Throwable t) {
            exceptions.add(t);
          }
 finally {
            endLatch.countDown();
          }
          return null;
        }
      }
);
    }
 else {
      executorService.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          initLatch.countDown();
          try {
            startLatch.await();
            ServerMetaData serverMetaData=metaDataContext.getServerMetaData();
            serverMetaDatas.add(serverMetaData);
          }
 catch (          Throwable t) {
            exceptions.add(t);
          }
 finally {
            endLatch.countDown();
          }
          return null;
        }
      }
);
    }
  }
  initLatch.await();
  startLatch.countDown();
  endLatch.await();
  assertTrue("Failed with exceptions : " + exceptions,exceptions.isEmpty());
  ServerMetaData metaData=metaDataContext.getServerMetaData();
  assertEquals(metaData.getServerInfo(),SERVER_INFO);
  assertEquals(metaData.getVmArgs(),VM_ARGS);
  assertEquals(metaData.getServiceInfos().size(),THREAD_COUNT / 2);
  assertEquals(serverMetaDatas.size(),THREAD_COUNT / 2);
}
