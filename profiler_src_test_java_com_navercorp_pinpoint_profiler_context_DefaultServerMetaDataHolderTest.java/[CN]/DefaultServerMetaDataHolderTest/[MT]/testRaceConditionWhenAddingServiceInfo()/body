{
  final CountDownLatch initLatch=new CountDownLatch(THREAD_COUNT);
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CountDownLatch endLatch=new CountDownLatch(THREAD_COUNT);
  final Queue<Throwable> exceptions=new ConcurrentLinkedQueue<Throwable>();
  final String serviceName="/test";
  final TestableServerMetaDataListener listener=new TestableServerMetaDataListener();
  final ServerMetaDataHolder metaDataContext=new DefaultServerMetaDataHolder(VM_ARGS);
  metaDataContext.addListener(listener);
  metaDataContext.setServerName(SERVER_INFO);
  for (int i=0; i < THREAD_COUNT; ++i) {
    final List<String> serviceLibs=new ArrayList<String>();
    executorService.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        initLatch.countDown();
        try {
          startLatch.await();
          metaDataContext.addServiceInfo(serviceName,serviceLibs);
          metaDataContext.publishServerMetaData();
        }
 catch (        final Throwable t) {
          exceptions.add(t);
        }
 finally {
          endLatch.countDown();
        }
        return null;
      }
    }
);
  }
  initLatch.await();
  startLatch.countDown();
  endLatch.await();
  assertTrue("Failed with exceptions : " + exceptions,exceptions.isEmpty());
  ServerMetaData metaData=listener.getServerMetaData();
  assertEquals(metaData.getServerInfo(),SERVER_INFO);
  assertEquals(metaData.getVmArgs(),VM_ARGS);
  assertEquals(metaData.getServiceInfos().size(),THREAD_COUNT);
}
