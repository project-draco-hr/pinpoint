{
  HttpParams params=new BasicHttpParams();
  HttpConnectionParams.setConnectionTimeout(params,connectionTimeout);
  HttpConnectionParams.setSoTimeout(params,readTimeout);
  HttpClient httpClient;
  if (passSSLError) {
    int sslPort=getPortFromURL(theURL);
    try {
      SSLContext sslContext=SSLContext.getInstance("SSL");
      sslContext.init(null,new TrustManager[]{IgnoreSLLErrorTrustManager},new SecureRandom());
      SSLSocketFactory sf=new SSLSocketFactory(sslContext,SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
      Scheme httpsScheme=new Scheme("https",sslPort,sf);
      SchemeRegistry schemeRegistry=new SchemeRegistry();
      schemeRegistry.register(httpsScheme);
      ClientConnectionManager conman=new SingleClientConnManager(schemeRegistry);
      httpClient=new DefaultHttpClient(conman,params);
    }
 catch (    NoSuchAlgorithmException en) {
      throw new HttpUtilException(en.toString(),en);
    }
catch (    KeyManagementException ek) {
      throw new HttpUtilException(ek.toString(),ek);
    }
  }
 else {
    httpClient=new DefaultHttpClient(params);
  }
  HttpRequestBase request=null;
  try {
switch (method) {
case GET:
      request=new HttpGet(theURL);
    break;
case POST:
  String[] splitURL=StringUtils.split(theURL,"?",2);
HttpPost requestPost=new HttpPost(splitURL[0]);
if (jsonEntity == null) {
requestPost.setEntity(makeFormEntity(splitURL.length < 2 ? null : splitURL[1],charset));
}
 else {
requestPost.setEntity(new StringEntity(jsonEntity,"application/json","UTF-8"));
requestPost.addHeader("Content-Type","application/json");
requestPost.addHeader("accept","text/plain, application/json");
}
request=requestPost;
break;
}
if (header != null && header.size() > 0) {
Set<Entry<String,String>> entrySet=header.entrySet();
for (Entry<String,String> entry : entrySet) {
request.addHeader(entry.getKey(),entry.getValue());
}
}
HttpResponse response=httpClient.execute(request);
int statusCode=response.getStatusLine().getStatusCode();
if (statusCode < 200 || statusCode >= 300) {
throw new HttpUtilException(response.getStatusLine().getStatusCode() + ":" + response.getStatusLine().getReasonPhrase());
}
Charset encodingCharset=null;
try {
Header contentEncoding=response.getEntity().getContentEncoding();
if (contentEncoding != null) {
encodingCharset=Charset.forName(contentEncoding.getValue());
}
}
 catch (Exception e) {
}
if (charset != null) {
encodingCharset=charset;
}
if (encodingCharset == null) {
encodingCharset=defaultCharset;
}
return new InputStreamReader(response.getEntity().getContent(),encodingCharset);
}
 catch (IOException e) {
throw new HttpUtilException(e.toString(),e);
}
}
