{
  String filterTypeName=annotation.type();
  Asserts.notNull(filterTypeName,"type of @TargetFilter");
  final TraceContext traceContext=pluginContext.getTraceContext();
  final InterceptorArgumentProvider interceptorArgumentProvider=new InterceptorArgumentProvider(traceContext,this);
  AutoBindingObjectFactory filterFactory=new AutoBindingObjectFactory(pluginContext,classLoader,interceptorArgumentProvider);
  final ObjectFactory objectFactory=ObjectFactory.byConstructor(filterTypeName,(Object[])annotation.constructorArguments());
  MethodFilter filter=(MethodFilter)filterFactory.createInstance(objectFactory);
  boolean singleton=annotation.singleton();
  int interceptorId=-1;
  for (  InstrumentMethod m : getDeclaredMethods(filter)) {
    if (singleton && interceptorId != -1) {
      m.addInterceptor(interceptorId);
    }
 else {
      interceptorId=((JavassistMethod)m).addInterceptorInternal(interceptorClassName,constructorArgs,scope,executionPolicy);
    }
  }
  if (interceptorId == -1) {
    logger.warn("No methods are intercepted. target: " + ctClass.getName(),", interceptor: " + interceptorClassName + ", methodFilter: "+ filterTypeName);
  }
  return interceptorId;
}
