{
  context.addClassFileTransformer("org.apache.http.concurrent.BasicFuture",new PinpointClassFileTransformer(){
    @Override public byte[] transform(    PinpointInstrument instrumentContext,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentContext.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(AsyncTraceIdAccessor.class.getName());
      InstrumentMethod get=target.getDeclaredMethod("get");
      if (get != null) {
        get.addInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.BasicFutureMethodInterceptor");
      }
      InstrumentMethod get2=target.getDeclaredMethod("get","long","java.util.concurrent.TimeUnit");
      if (get2 != null) {
        get2.addInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.BasicFutureMethodInterceptor");
      }
      InstrumentMethod completed=target.getDeclaredMethod("completed","java.lang.Object");
      if (completed != null) {
        completed.addInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.BasicFutureMethodInterceptor");
      }
      InstrumentMethod failed=target.getDeclaredMethod("failed","java.lang.Exception");
      if (failed != null) {
        failed.addInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.BasicFutureMethodInterceptor");
      }
      InstrumentMethod cancel=target.getDeclaredMethod("cancel","boolean");
      if (cancel != null) {
        cancel.addInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.BasicFutureMethodInterceptor");
      }
      return target.toBytecode();
    }
  }
);
}
