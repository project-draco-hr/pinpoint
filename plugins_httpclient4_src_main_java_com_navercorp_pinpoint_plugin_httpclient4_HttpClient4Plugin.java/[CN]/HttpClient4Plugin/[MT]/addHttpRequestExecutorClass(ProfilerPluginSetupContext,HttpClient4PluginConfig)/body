{
  final ClassFileTransformerBuilder classEditorBuilder=context.getClassFileTransformerBuilder("org.apache.http.protocol.HttpRequestExecutor");
  final MethodTransformerBuilder executeMethodBuilder=classEditorBuilder.editMethod("execute","org.apache.http.HttpRequest","org.apache.http.HttpClientConnection","org.apache.http.protocol.HttpContext");
  executeMethodBuilder.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
  executeMethodBuilder.injectInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.HttpRequestExecutorExecuteMethodInterceptor");
  final MethodTransformerBuilder doSendRequestMethodBuilder=classEditorBuilder.editMethod("doSendRequest","org.apache.http.HttpRequest","org.apache.http.HttpClientConnection","org.apache.http.protocol.HttpContext");
  doSendRequestMethodBuilder.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
  doSendRequestMethodBuilder.injectInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.HttpRequestExecutorDoSendRequestAndDoReceiveResponseMethodInterceptor");
  final MethodTransformerBuilder doReceiveResponseMethodBuilder=classEditorBuilder.editMethod("doReceiveResponse","org.apache.http.HttpRequest","org.apache.http.HttpClientConnection","org.apache.http.protocol.HttpContext");
  doReceiveResponseMethodBuilder.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
  doReceiveResponseMethodBuilder.injectInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.HttpRequestExecutorDoSendRequestAndDoReceiveResponseMethodInterceptor");
  context.addClassFileTransformer(classEditorBuilder.build());
}
