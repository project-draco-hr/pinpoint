{
  transformTemplate.transform("org.apache.http.impl.nio.client.CloseableHttpAsyncClient",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor Instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=Instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      injectHttpAsyncClientExecuteMethodInterceptor(target,"org.apache.http.HttpHost","org.apache.http.HttpRequest","org.apache.http.protocol.HttpContext","org.apache.http.concurrent.FutureCallback");
      injectHttpAsyncClientExecuteMethodInterceptor(target,"org.apache.http.HttpHost","org.apache.http.HttpRequest","org.apache.http.concurrent.FutureCallback");
      injectHttpAsyncClientExecuteMethodInterceptor(target,"org.apache.http.nio.protocol.HttpAsyncRequestProducer","org.apache.http.nio.protocol.HttpAsyncResponseConsumer","org.apache.http.concurrent.FutureCallback");
      injectHttpAsyncClientExecuteMethodInterceptor(target,"org.apache.http.client.methods.HttpUriRequest","org.apache.http.concurrent.FutureCallback");
      injectHttpAsyncClientExecuteMethodInterceptor(target,"org.apache.http.client.methods.HttpUriRequest","org.apache.http.protocol.HttpContext","org.apache.http.concurrent.FutureCallback");
      return target.toBytecode();
    }
    private void injectHttpAsyncClientExecuteMethodInterceptor(    InstrumentClass target,    String... parameterTypeNames) throws InstrumentException {
      InstrumentMethod execute=target.getDeclaredMethod("execute",parameterTypeNames);
      if (execute != null) {
        execute.addInterceptor("com.navercorp.pinpoint.plugin.httpclient4.interceptor.HttpAsyncClientExecuteMethodInterceptor");
      }
    }
  }
);
}
