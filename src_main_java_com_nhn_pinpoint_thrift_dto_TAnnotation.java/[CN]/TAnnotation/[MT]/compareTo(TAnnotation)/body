{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  lastComparison=Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetKey()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.key,other.key);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetStringValue()).compareTo(other.isSetStringValue());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetStringValue()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.stringValue,other.stringValue);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBoolValue()).compareTo(other.isSetBoolValue());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBoolValue()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.boolValue,other.boolValue);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetIntValue()).compareTo(other.isSetIntValue());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetIntValue()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.intValue,other.intValue);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetLongValue()).compareTo(other.isSetLongValue());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetLongValue()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.longValue,other.longValue);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetShortValue()).compareTo(other.isSetShortValue());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetShortValue()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.shortValue,other.shortValue);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetDoubleValue()).compareTo(other.isSetDoubleValue());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetDoubleValue()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.doubleValue,other.doubleValue);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBinaryValue()).compareTo(other.isSetBinaryValue());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBinaryValue()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.binaryValue,other.binaryValue);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetByteValue()).compareTo(other.isSetByteValue());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetByteValue()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.byteValue,other.byteValue);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
