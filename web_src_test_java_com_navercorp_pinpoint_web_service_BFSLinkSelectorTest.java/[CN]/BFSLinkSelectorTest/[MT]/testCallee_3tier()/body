{
  when(calleeDao.selectCallee(any(Application.class),any(Range.class))).thenReturn(newEmptyLinkDataMap());
  int callCount_A_B=30;
  LinkDataMap linkDataMap_A_B=new LinkDataMap();
  linkDataMap_A_B.addLinkData(APP_A,"agentA",APP_B,"agentB",1000,BaseHistogramSchema.NORMAL_SCHEMA.getNormalSlot().getSlotTime(),callCount_A_B);
  when(calleeDao.selectCallee(eq(APP_B),any(Range.class))).thenReturn(linkDataMap_A_B);
  int callCount_B_C=40;
  LinkDataMap linkDataMap_B_C=new LinkDataMap();
  linkDataMap_B_C.addLinkData(APP_B,"agentB",APP_C,"agentC",1000,BaseHistogramSchema.NORMAL_SCHEMA.getNormalSlot().getSlotTime(),callCount_B_C);
  when(calleeDao.selectCallee(eq(APP_C),any(Range.class))).thenReturn(linkDataMap_B_C);
  when(callerDao.selectCaller(any(Application.class),any(Range.class))).thenReturn(newEmptyLinkDataMap());
  when(hostApplicationMapDao.findAcceptApplicationName(any(Application.class),any(Range.class))).thenReturn(new HashSet<AcceptApplication>());
  LinkSelector linkSelector=createLinkSelector();
  LinkDataDuplexMap linkData=linkSelector.select(APP_C,range,oneDepth);
  Assert.assertEquals(linkData.size(),1);
  Assert.assertEquals(linkData.getTotalCount(),callCount_B_C);
  Assert.assertEquals(linkData.getSourceLinkDataList().size(),0);
  Assert.assertEquals(linkData.getTargetLinkDataList().size(),1);
  Assert.assertEquals(linkData.getTotalCount(),callCount_B_C);
  LinkSelector linkSelector2=createLinkSelector();
  LinkDataDuplexMap linkData_depth2=linkSelector2.select(APP_C,range,twoDepth);
  Assert.assertEquals(linkData_depth2.size(),2);
  LinkKey linkKey_A_B=new LinkKey(APP_A,APP_B);
  assertTarget_Source_TotalCount("APP_A->APP_B",linkData_depth2,linkKey_A_B,callCount_A_B);
  LinkKey linkKey_B_C=new LinkKey(APP_B,APP_C);
  assertTarget_Source_TotalCount("APP_B->APP_C",linkData_depth2,linkKey_B_C,callCount_B_C);
}
