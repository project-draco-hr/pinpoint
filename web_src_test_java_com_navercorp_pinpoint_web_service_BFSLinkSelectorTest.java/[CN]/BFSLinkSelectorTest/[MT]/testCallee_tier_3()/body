{
  LinkDataMap linkDataMap_A_B=new LinkDataMap();
  linkDataMap_A_B.addLinkData(APP_A,"agentA",APP_B,"agentB",1000,HistogramSchema.NORMAL_SCHEMA.getNormalSlot().getSlotTime(),1);
  when(calleeDao.selectCallee(eq(APP_B),(Range)anyObject())).thenReturn(linkDataMap_A_B);
  LinkDataMap linkDataMap_B_C=new LinkDataMap();
  linkDataMap_B_C.addLinkData(APP_B,"agentB",APP_C,"agentC",1000,HistogramSchema.NORMAL_SCHEMA.getNormalSlot().getSlotTime(),2);
  when(calleeDao.selectCallee(eq(APP_C),(Range)anyObject())).thenReturn(linkDataMap_B_C);
  when(calleeDao.selectCallee((Application)anyObject(),(Range)anyObject())).thenReturn(new LinkDataMap());
  when(callerDao.selectCaller((Application)anyObject(),(Range)anyObject())).thenReturn(new LinkDataMap());
  when(hostApplicationMapDao.findAcceptApplicationName((Application)anyObject(),(Range)anyObject())).thenReturn(new HashSet<AcceptApplication>());
  BFSLinkSelector bfsLinkSelector=new BFSLinkSelector(this.callerDao,this.calleeDao,hostApplicationMapDao);
  Range range=new Range(0,100);
  SearchOption option=new SearchOption(1,1);
  LinkDataDuplexMap select=bfsLinkSelector.select(APP_B,range,option);
  Assert.assertEquals(select.size(),1);
  Assert.assertEquals(select.getSourceLinkDataList().size(),0);
  Assert.assertEquals(select.getTargetLinkDataList().size(),1);
  SearchOption depth2=new SearchOption(2,2);
  BFSLinkSelector bfsLinkSelector2=new BFSLinkSelector(this.callerDao,this.calleeDao,hostApplicationMapDao);
  LinkDataDuplexMap select_depth2=bfsLinkSelector2.select(APP_A,range,depth2);
  Assert.assertEquals(select_depth2.size(),2);
  LinkKey linkKey_A_B=new LinkKey(APP_A,APP_B);
  assertTarget_Source_TotalCount("APP_A->APP_B",select_depth2,linkKey_A_B,1);
  LinkKey linkKey_B_C=new LinkKey(APP_B,APP_C);
  assertTarget_Source_TotalCount("APP_B->APP_C",select_depth2,linkKey_B_C,2);
}
