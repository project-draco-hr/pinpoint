{
  Class<?> arcusClient=Class.forName("net.spy.memcached.ArcusClient");
  Class<?> cacheManager=Class.forName("net.spy.memcached.CacheManager");
  assertTrue(ServiceCodeAccessor.class.isAssignableFrom(cacheManager));
  Class<?> collectionFuture=Class.forName("net.spy.memcached.internal.CollectionFuture");
  assertTrue(OperationAccessor.class.isAssignableFrom(collectionFuture));
  Class<?> baseOperationImpl=Class.forName("net.spy.memcached.protocol.BaseOperationImpl");
  assertTrue(ServiceCodeAccessor.class.isAssignableFrom(baseOperationImpl));
  Class<?> getFuture=Class.forName("net.spy.memcached.internal.GetFuture");
  assertTrue(OperationAccessor.class.isAssignableFrom(getFuture));
  Class<?> immediateFuture=Class.forName("net.spy.memcached.internal.ImmediateFuture");
  Class<?> operationFuture=Class.forName("net.spy.memcached.internal.OperationFuture");
  assertTrue(OperationAccessor.class.isAssignableFrom(operationFuture));
  Class<?> frontCacheGetFuture=Class.forName("net.spy.memcached.plugin.FrontCacheGetFuture");
  assertTrue(CacheNameAccessor.class.isAssignableFrom(frontCacheGetFuture));
  assertTrue(CacheKeyAccessor.class.isAssignableFrom(frontCacheGetFuture));
  Class<?> frontCacheMemcachedClient=Class.forName("net.spy.memcached.plugin.FrontCacheMemcachedClient");
  Class<?> memcachedClient=Class.forName("net.spy.memcached.MemcachedClient");
  assertTrue(ServiceCodeAccessor.class.isAssignableFrom(memcachedClient));
}
