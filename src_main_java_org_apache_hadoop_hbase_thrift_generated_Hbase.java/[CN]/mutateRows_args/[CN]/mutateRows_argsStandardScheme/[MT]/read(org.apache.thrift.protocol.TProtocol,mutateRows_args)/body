{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.tableName=iprot.readBinary();
        struct.setTableNameIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list220=iprot.readListBegin();
      struct.rowBatches=new ArrayList<BatchMutation>(_list220.size);
      for (int _i221=0; _i221 < _list220.size; ++_i221) {
        BatchMutation _elem222;
        _elem222=new BatchMutation();
        _elem222.read(iprot);
        struct.rowBatches.add(_elem222);
      }
      iprot.readListEnd();
    }
    struct.setRowBatchesIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
