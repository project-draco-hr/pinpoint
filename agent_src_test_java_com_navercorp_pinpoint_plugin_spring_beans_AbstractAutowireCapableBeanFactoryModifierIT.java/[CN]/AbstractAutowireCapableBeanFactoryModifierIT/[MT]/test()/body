{
  ApplicationContext context=new ClassPathXmlApplicationContext("spring-beans-test.xml");
  Maru maru=context.getBean(Maru.class);
  maru.publicMethod();
  maru.protectedMethod();
  Morae morae=(Morae)context.getBean("morae");
  morae.doSomething();
  Morae duplicatedMorae=(Morae)context.getBean("duplicatedMorae");
  duplicatedMorae.doSomething();
  Mozzi mozzi=(Mozzi)context.getBean("mozzi");
  mozzi.doSomething();
  Excluded excluded=(Excluded)context.getBean("excluded");
  excluded.doSomething();
  Outer outer=(Outer)context.getBean("outer");
  outer.doSomething();
  Inner inner=outer.getInner();
  inner.doSomething();
  ProxyTarget proxyTarget=context.getBean(ProxyTarget.class);
  proxyTarget.doSomething();
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",Outer.class.getMethod("setInner",Inner.class)));
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",Maru.class.getMethod("publicMethod")));
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",Morae.class.getMethod("doSomething")));
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",Morae.class.getMethod("doSomething")));
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",Mozzi.class.getMethod("doSomething")));
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",Outer.class.getMethod("doSomething")));
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",Outer.class.getMethod("getInner")));
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",Inner.class.getMethod("doSomething")));
  verifier.verifyTrace(Expectations.event("SPRING_BEAN",ProxyTarget.class.getMethod("doSomething")));
  verifier.verifyTraceCount(0);
}
