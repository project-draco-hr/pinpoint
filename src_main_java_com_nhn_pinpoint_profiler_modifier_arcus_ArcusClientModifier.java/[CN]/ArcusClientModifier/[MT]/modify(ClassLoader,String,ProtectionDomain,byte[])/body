{
  if (logger.isInfoEnabled()) {
    logger.info("Modifing. {}",javassistClassName);
  }
  try {
    InstrumentClass arcusClient=byteCodeInstrumentor.getClass(javassistClassName);
    final Interceptor setCacheManagerInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.nhn.pinpoint.profiler.modifier.arcus.interceptor.SetCacheManagerInterceptor");
    final String[] args={"net.spy.memcached.CacheManager"};
    arcusClient.addInterceptor("setCacheManager",args,setCacheManagerInterceptor,Type.before);
    String[] ignored=new String[]{"__","shutdown"};
    List<Method> declaredMethods=arcusClient.getDeclaredMethods(new ArcusMethodFilter(ignored));
    for (    Method method : declaredMethods) {
      SimpleAroundInterceptor apiInterceptor=(SimpleAroundInterceptor)byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.nhn.pinpoint.profiler.modifier.arcus.interceptor.ApiInterceptor");
      ScopeDelegateSimpleInterceptor arcusScopeDelegateSimpleInterceptor=new ScopeDelegateSimpleInterceptor(apiInterceptor,ArcusScope.SCOPE);
      arcusClient.addInterceptor(method.getMethodName(),method.getMethodParams(),arcusScopeDelegateSimpleInterceptor,Type.around);
    }
    return arcusClient.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(e.getMessage(),e);
    }
    return null;
  }
}
