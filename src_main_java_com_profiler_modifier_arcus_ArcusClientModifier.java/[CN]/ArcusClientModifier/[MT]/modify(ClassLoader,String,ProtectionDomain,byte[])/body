{
  if (logger.isLoggable(Level.INFO)) {
    logger.info("Modifing. " + javassistClassName);
  }
  try {
    InstrumentClass aClass=byteCodeInstrumentor.getClass(javassistClassName);
    aClass.addTraceVariable("__traceId","__setTraceId","__getTraceId","com.profiler.context.TraceID");
    aClass.addTraceVariable("__nextTraceId","__setNextTraceId","__getNextTraceId","com.profiler.context.TraceID");
    aClass.insertCodeAfterConstructor(null,"{ __setTraceId(com.profiler.context.Trace.getCurrentTraceId()); __setNextTraceId(com.profiler.context.Trace.getNextTraceId()); }");
    aClass.addTraceVariable("__commandCreatedTime","__setCommandCreatedTime","__getCommandCreatedTime","long");
    aClass.insertCodeAfterConstructor(null,"{ __setCommandCreatedTime(System.nanoTime()); }");
    aClass.addTraceVariable("__cancelledTime","__setCancelledTime","__getCancelledTime","long");
    aClass.insertCodeBeforeMethod("transitionState",new String[]{"net.spy.memcached.ops.OperationState"},getTransitionStateAfterCode());
    aClass.insertCodeBeforeMethod("cancel",null,getCancelBeforeCode());
    return aClass.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
    return null;
  }
}
