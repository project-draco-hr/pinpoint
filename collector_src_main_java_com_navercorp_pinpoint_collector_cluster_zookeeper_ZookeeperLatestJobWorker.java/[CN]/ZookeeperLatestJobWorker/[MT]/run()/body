{
  while (workerState.isStarted()) {
    boolean eventCreated=await(60000,200);
    if (!workerState.isStarted()) {
      break;
    }
    if (eventCreated) {
      Iterator<PinpointServer> keyIterator=getLatestJobRepositoryKeyIterator();
      while (keyIterator.hasNext()) {
        PinpointServer pinpointServer=keyIterator.next();
        Job job=getJob(pinpointServer);
        if (job == null) {
          continue;
        }
        logger.info("Worker execute job({}).",job);
        if (job instanceof UpdateJob) {
          handleUpdate((UpdateJob)job);
        }
 else         if (job instanceof DeleteJob) {
          handleDelete((DeleteJob)job);
        }
      }
    }
 else {
      logger.debug("LeakDetector Start.");
      while (true) {
        Job job=leakJobQueue.poll();
        if (job == null) {
          break;
        }
        if (job instanceof UpdateJob) {
          putRetryJob(new UpdateJob(job.getPinpointServer(),1,((UpdateJob)job).getContents()));
        }
      }
      for (      PinpointServer pinpointServer : pinpointServerRepository) {
        if (PinpointServerStateCode.isFinished(pinpointServer.getCurrentStateCode())) {
          logger.info("LeakDetector Find Leak PinpointServer={}.",pinpointServer);
          putJob(new DeleteJob(pinpointServer));
        }
      }
    }
  }
  logger.info("{} stopped",this.getClass().getSimpleName());
}
