{
  if (sql == null) {
    return "";
  }
  int length=sql.length();
  StringBuilder normalized=new StringBuilder(length);
  boolean stringState=false;
  boolean flag2=false;
  boolean charToken=false;
  boolean commentState=false;
  for (int i=0; i < length; i++) {
    if (commentState) {
    }
    char c=sql.charAt(i);
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
      if (commentState) {
        normalized.append(c);
        break;
      }
    if (stringState) {
      outputParam.append(c);
      break;
    }
  if (flag) {
    if (!flag2) {
      normalized.append('#');
      flag2=true;
      outputParam.append(c);
    }
 else {
      outputParam.append(c);
    }
    break;
  }
if (!flag2 && !charToken) {
  normalized.append('#');
  flag2=true;
  outputParam.append(c);
  break;
}
if (charToken) {
normalized.append(c);
}
 else {
outputParam.append(c);
}
break;
case 39:
if (commentState) {
normalized.append(c);
break;
}
if (stringState) {
normalized.append('$').append('\'');
outputParam.append(',');
}
 else {
normalized.append('\'');
}
stringState=!stringState;
if (charToken) charToken=false;
break;
case '\t':
case ' ':
if (commentState) {
normalized.append(c);
break;
}
if (stringState) {
outputParam.append(c);
break;
}
normalized.append(c);
if (flag2) {
flag2=false;
outputParam.append(',');
}
if (charToken) {
charToken=false;
}
break;
case 46:
case 69:
if (commentState) {
normalized.append(c);
break;
}
if (stringState || flag2) {
outputParam.append(c);
break;
}
normalized.append(c);
if (!charToken) charToken=true;
break;
case 45:
if (commentState) {
normalized.append(c);
break;
}
if (stringState || flag2) {
outputParam.append(c);
break;
}
if (i + 1 < length && sql.charAt(i + 1) == '-') {
int j=sql.indexOf('\n',i);
if (j > -1) {
normalized.append(sql.substring(i,j + 1));
i+=j - i;
}
 else {
normalized.append(sql.substring(i));
i=length;
}
}
 else {
normalized.append(c);
}
if (charToken) charToken=false;
break;
case 10:
case 13:
if (!stringState) normalized.append(c);
if (charToken) charToken=false;
if (flag2) {
outputParam.append(',');
flag2=false;
}
break;
case '/':
if (stringState) {
outputParam.append(c);
break;
}
if (lookAhead(sql,i) == '*') {
commentState=true;
normalized.append("/*");
i++;
}
 else {
normalized.append(c);
}
if (charToken) charToken=false;
if (flag2) flag2=false;
break;
case '*':
if (stringState) {
outputParam.append(c);
break;
}
if (i + 1 < length && sql.charAt(i + 1) == '/') {
normalized.append("*/");
commentState=false;
i++;
}
 else {
normalized.append(c);
}
if (charToken) charToken=false;
if (flag2) flag2=false;
break;
case 11:
case 12:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 40:
case 41:
case 43:
case 44:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
default :
if (commentState) {
normalized.append(c);
break;
}
if (stringState) {
outputParam.append(c);
break;
}
if (flag2) {
normalized.append(c);
flag2=false;
outputParam.append(',');
}
 else {
normalized.append(c);
}
if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_') charToken=true;
 else charToken=false;
break;
}
}
return normalized.toString();
}
