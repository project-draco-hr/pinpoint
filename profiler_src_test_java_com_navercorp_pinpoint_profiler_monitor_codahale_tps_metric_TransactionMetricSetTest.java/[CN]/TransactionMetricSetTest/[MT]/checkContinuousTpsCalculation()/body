{
  final long oneSecond=1 * 1000L;
  final int expectedTpsForFirstSecond=1;
  final int expectedTpsForSecondSecond=1000;
  final int expectedTpsForThirdSecond=500;
  final int expectedTpsForFourthSecond=0;
  final int expectedTpsForFifthSecond=999;
  initializeGauge();
  this.transactionCounter.addTransactionCount(SamplingType.SAMPLED_NEW,expectedTpsForFirstSecond);
  Thread.sleep(oneSecond);
  final int actualTpsForFirstSecond=this.tpsGauge.getValue();
  this.transactionCounter.addTransactionCount(SamplingType.SAMPLED_CONTINUATION,expectedTpsForSecondSecond);
  Thread.sleep(oneSecond);
  final int actualTpsForSecondSecond=this.tpsGauge.getValue();
  this.transactionCounter.addTransactionCount(SamplingType.UNSAMPLED_NEW,expectedTpsForThirdSecond);
  Thread.sleep(oneSecond);
  final int actualTpsForThirdSecond=this.tpsGauge.getValue();
  this.transactionCounter.addTransactionCount(SamplingType.UNSAMPLED_CONTINUATION,expectedTpsForFourthSecond);
  Thread.sleep(oneSecond);
  final int actualTpsForFourthSecond=this.tpsGauge.getValue();
  this.transactionCounter.addTransactionCount(SamplingType.SAMPLED_NEW,expectedTpsForFifthSecond);
  Thread.sleep(oneSecond);
  final int actualTpsForFifthSecond=this.tpsGauge.getValue();
  assertApproximatelyEquals(expectedTpsForFirstSecond,actualTpsForFirstSecond);
  assertApproximatelyEquals(expectedTpsForSecondSecond,actualTpsForSecondSecond);
  assertApproximatelyEquals(expectedTpsForThirdSecond,actualTpsForThirdSecond);
  assertApproximatelyEquals(expectedTpsForFourthSecond,actualTpsForFourthSecond);
  assertApproximatelyEquals(expectedTpsForFifthSecond,actualTpsForFifthSecond);
}
