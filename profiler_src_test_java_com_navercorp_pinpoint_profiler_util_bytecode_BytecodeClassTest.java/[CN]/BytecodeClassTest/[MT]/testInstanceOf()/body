{
  BytecodeClass arrayList=BytecodeClassFactory.get("java/util/ArrayList",loader);
  assertTrue(arrayList.isInstanceOf("java/util/List",true));
  assertTrue(arrayList.isInstanceOf("java/lang/Object",false));
  assertTrue(arrayList.isInstanceOf("java/util/ArrayList",false));
  assertFalse(arrayList.isInstanceOf("java/util/Map",true));
  assertFalse(arrayList.isInstanceOf("java/util/Random",false));
  BytecodeClass concurrentHashMap=BytecodeClassFactory.get("java/util/concurrent/ConcurrentHashMap",loader);
  assertTrue(concurrentHashMap.isInstanceOf("java/util/concurrent/ConcurrentMap",true));
  assertTrue(concurrentHashMap.isInstanceOf("java/util/Map",true));
  assertTrue(concurrentHashMap.isInstanceOf("java/lang/Object",false));
  assertTrue(concurrentHashMap.isInstanceOf("java/util/concurrent/ConcurrentHashMap",false));
  assertFalse(concurrentHashMap.isInstanceOf("java/util/List",true));
  assertFalse(concurrentHashMap.isInstanceOf("java/util/Random",false));
  BytecodeClass concurrentMap=BytecodeClassFactory.get("java/util/concurrent/ConcurrentMap",loader);
  assertTrue(concurrentMap.isInstanceOf("java/util/concurrent/ConcurrentMap",true));
  assertTrue(concurrentMap.isInstanceOf("java/util/Map",true));
  assertTrue(concurrentMap.isInstanceOf("java/lang/Object",false));
  assertFalse(concurrentMap.isInstanceOf("java/util/concurrent/ConcurrentHashMap",false));
  assertFalse(concurrentMap.isInstanceOf("java/util/List",true));
  assertFalse(concurrentMap.isInstanceOf("java/util/Random",false));
}
