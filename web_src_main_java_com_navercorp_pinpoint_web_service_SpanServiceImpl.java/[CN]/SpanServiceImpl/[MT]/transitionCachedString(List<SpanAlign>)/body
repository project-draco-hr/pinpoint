{
  this.transitionAnnotation(spans,new AnnotationReplacementCallback(){
    @Override public void replacement(    SpanAlign spanAlign,    List<AnnotationBo> annotationBoList){
      List<AnnotationBo> cachedStringAnnotation=findCachedStringAnnotation(annotationBoList);
      if (cachedStringAnnotation.isEmpty()) {
        return;
      }
      for (      AnnotationBo annotationBo : cachedStringAnnotation) {
        final int cachedArgsKey=annotationBo.getKey();
        int stringMetaDataId=(Integer)annotationBo.getValue();
        List<StringMetaDataBo> stringMetaList=stringMetaDataDao.getStringMetaData(spanAlign.getAgentId(),spanAlign.getAgentStartTime(),stringMetaDataId);
        int size=stringMetaList.size();
        if (size == 0) {
          logger.warn("StringMetaData not Found {}/{}/{}",spanAlign.getAgentId(),stringMetaDataId,spanAlign.getAgentStartTime());
          AnnotationBo api=new AnnotationBo();
          api.setKey(AnnotationKey.ERROR_API_METADATA_NOT_FOUND.getCode());
          api.setValue("CACHED-STRING-ID not found. stringId:" + cachedArgsKey);
          annotationBoList.add(api);
        }
 else         if (size >= 1) {
          StringMetaDataBo stringMetaDataBo=stringMetaList.get(0);
          AnnotationBo stringMetaData=new AnnotationBo();
          stringMetaData.setKey(AnnotationKeyUtils.cachedArgsToArgs(cachedArgsKey));
          stringMetaData.setValue(stringMetaDataBo.getStringValue());
          annotationBoList.add(stringMetaData);
          if (size > 1) {
            logger.warn("stringMetaData size not 1 :{}",stringMetaList);
          }
        }
      }
    }
  }
);
}
