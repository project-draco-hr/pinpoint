{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.serverInfo=iprot.readString();
        struct.setServerInfoIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list8=iprot.readListBegin();
      struct.vmArgs=new ArrayList<String>(_list8.size);
      String _elem9;
      for (int _i10=0; _i10 < _list8.size; ++_i10) {
        _elem9=iprot.readString();
        struct.vmArgs.add(_elem9);
      }
      iprot.readListEnd();
    }
    struct.setVmArgsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list11=iprot.readListBegin();
  struct.serviceInfos=new ArrayList<TServiceInfo>(_list11.size);
  TServiceInfo _elem12;
  for (int _i13=0; _i13 < _list11.size; ++_i13) {
    _elem12=new TServiceInfo();
    _elem12.read(iprot);
    struct.serviceInfos.add(_elem12);
  }
  iprot.readListEnd();
}
struct.setServiceInfosIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
