{
  transformTemplate.transform("org.apache.commons.httpclient.HttpConnection",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addGetter("com.navercorp.pinpoint.plugin.httpclient3.HostNameGetter",HttpClient3Constants.FIELD_HOST_NAME);
      target.addGetter("com.navercorp.pinpoint.plugin.httpclient3.PortNumberGetter",HttpClient3Constants.FIELD_PORT_NUMBER);
      target.addGetter("com.navercorp.pinpoint.plugin.httpclient3.ProxyHostNameGetter",HttpClient3Constants.FIELD_PROXY_HOST_NAME);
      target.addGetter("com.navercorp.pinpoint.plugin.httpclient3.ProxyPortNumberGetter",HttpClient3Constants.FIELD_PROXY_PORT_NUMBER);
      InstrumentMethod open=target.getDeclaredMethod("open");
      if (open != null) {
        open.addInterceptor("com.navercorp.pinpoint.plugin.httpclient3.interceptor.HttpConnectionOpenMethodInterceptor");
      }
      return target.toBytecode();
    }
  }
);
}
