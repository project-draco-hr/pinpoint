{
  final boolean isAuthFromApp=check(link.getFrom().getApplication());
  final boolean isAuthToApp=check(link.getTo().getApplication());
  jgen.writeStartObject();
  jgen.writeStringField("key",link.getLinkName(isAuthFromApp,isAuthToApp));
  jgen.writeStringField("from",link.getFrom().getNodeName(isAuthFromApp));
  jgen.writeStringField("to",link.getTo().getNodeName(isAuthToApp));
  writeAgentId("fromAgent",link.getFrom(),jgen,isAuthFromApp);
  writeAgentId("toAgent",link.getTo(),jgen,isAuthToApp);
  writeSimpleNode("sourceInfo",link.getFrom(),jgen,isAuthFromApp);
  writeSimpleNode("targetInfo",link.getTo(),jgen,isAuthToApp);
  writeFilterApplicationInfo(link,jgen);
  if (link.isWasToWasLink()) {
    writeWasToWasTargetRpcList(link,jgen,isAuthToApp);
  }
  Histogram histogram=link.getHistogram();
  jgen.writeNumberField("totalCount",histogram.getTotalCount());
  jgen.writeNumberField("errorCount",histogram.getTotalErrorCount());
  jgen.writeNumberField("slowCount",histogram.getSlowCount());
  jgen.writeObjectField("histogram",histogram);
  writeAgentHistogram("sourceHistogram",link.getSourceList(),jgen,isAuthFromApp);
  writeAgentHistogram("targetHistogram",link.getTargetList(),jgen,isAuthToApp);
  writeTimeSeriesHistogram(link,jgen);
  writeSourceAgentTimeSeriesHistogram(link,jgen,isAuthFromApp);
  jgen.writeBooleanField("hasAlert",link.getLinkAlert());
  jgen.writeEndObject();
}
