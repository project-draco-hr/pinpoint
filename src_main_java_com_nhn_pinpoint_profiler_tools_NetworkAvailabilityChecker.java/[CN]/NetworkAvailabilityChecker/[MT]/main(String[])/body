{
  if (args.length != 1) {
    System.out.println("usage : " + NetworkAvailabilityChecker.class.getSimpleName() + " AGENT_CONFIG_FILE");
    return;
  }
  String configPath=args[0];
  DataSender udpSender=null;
  DataSender udpSpanSender=null;
  DataSender tcpSender=null;
  PinpointSocketFactory socketFactory=null;
  PinpointSocket socket=null;
  try {
    ProfilerConfig profilerConfig=new ProfilerConfig();
    profilerConfig.readConfigFile(configPath);
    String collector=profilerConfig.getCollectorServerIp();
    int uPort=profilerConfig.getCollectorUdpServerPort();
    int usPort=profilerConfig.getCollectorUdpSpanServerPort();
    int tPort=profilerConfig.getCollectorTcpServerPort();
    udpSender=new UdpDataSender(collector,uPort,"UDP",10);
    udpSpanSender=new UdpDataSender(collector,usPort,"UDP-SPAN",10);
    socketFactory=createPinpointSocketFactory();
    socket=createPinpointSocket(collector,tPort,socketFactory);
    tcpSender=new TcpDataSender(socket);
    boolean udpSenderResult=udpSender.isNetworkAvailable();
    boolean udpSpanSenderResult=udpSpanSender.isNetworkAvailable();
    boolean tcpSenderResult=tcpSender.isNetworkAvailable();
    StringBuilder sb=new StringBuilder();
    sb.append("\nTEST RESULT\n");
    sb.append("UDP://").append(collector).append(":").append(uPort).append("=").append((udpSenderResult) ? "OK" : "FAILED").append("\n");
    sb.append("UDP://").append(collector).append(":").append(usPort).append("=").append((udpSpanSenderResult) ? "OK" : "FAILED").append("\n");
    sb.append("TCP://").append(collector).append(":").append(tPort).append("=").append((tcpSenderResult) ? "OK" : "FAILED").append("\n");
    System.out.println(sb.toString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    closeDataSender(udpSender);
    closeDataSender(udpSpanSender);
    closeDataSender(tcpSender);
    System.out.println("END.");
    if (socket != null) {
      socket.close();
    }
    if (socketFactory != null) {
      socketFactory.release();
    }
  }
}
