{
  context.addClassFileTransformer("net.spy.memcached.MemcachedClient",new PinpointClassFileTransformer(){
    @Override public byte[] transform(    ProfilerPluginInstrumentContext context,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=context.getInstrumentClass(loader,className,classfileBuffer);
      if (target.hasDeclaredMethod("addOp",new String[]{"java.lang.String","net.spy.memcached.ops.Operation"})) {
        target.addField(SERVICE_CODE_ACCESSOR);
        target.addInterceptor("com.navercorp.pinpoint.plugin.arcus.interceptor.AddOpInterceptor");
      }
      boolean traceKey=config.isMemcachedKeyTrace();
      for (      InstrumentMethod m : target.getDeclaredMethods(new FrontCacheMemcachedMethodFilter())) {
        try {
          m.addInterceptor("com.navercorp.pinpoint.plugin.arcus.interceptor.ApiInterceptor",traceKey);
        }
 catch (        Exception e) {
          if (logger.isWarnEnabled()) {
            logger.warn("Unsupported method " + className + "."+ m.getName(),e);
          }
        }
      }
      return target.toBytecode();
    }
  }
);
}
