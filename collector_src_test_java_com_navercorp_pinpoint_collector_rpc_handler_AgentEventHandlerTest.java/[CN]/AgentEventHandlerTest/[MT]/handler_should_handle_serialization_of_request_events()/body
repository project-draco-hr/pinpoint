{
  final AgentEventType expectedEventType=AgentEventType.USER_THREAD_DUMP;
  final TCommandThreadDumpResponse expectedThreadDumpResponse=new TCommandThreadDumpResponse();
  final byte[] expectedThreadDumpResponseBody=new byte[0];
  final TCommandTransfer tCommandTransfer=new TCommandTransfer();
  tCommandTransfer.setAgentId(TEST_AGENT_ID);
  tCommandTransfer.setStartTime(TEST_START_TIMESTAMP);
  final TCommandTransferResponse tCommandTransferResponse=mock(TCommandTransferResponse.class);
  when(tCommandTransferResponse.getRouteResult()).thenReturn(TRouteResult.OK);
  when(tCommandTransferResponse.getPayload()).thenReturn(expectedThreadDumpResponseBody);
  final ResponseEvent responseEvent=new ResponseEvent(tCommandTransfer,null,0,tCommandTransferResponse);
  ArgumentCaptor<AgentEventBo> argCaptor=ArgumentCaptor.forClass(AgentEventBo.class);
  HeaderTBaseDeserializer deserializer=mock(HeaderTBaseDeserializer.class);
  when(this.deserializerFactory.createDeserializer()).thenReturn(deserializer);
  when(deserializer.deserialize(expectedThreadDumpResponseBody)).thenReturn((TBase)expectedThreadDumpResponse);
  this.agentEventHandler.handleResponseEvent(responseEvent,TEST_EVENT_TIMESTAMP);
  verify(this.agentEventDao,times(1)).insert(argCaptor.capture());
  AgentEventBo actualAgentEventBo=argCaptor.getValue();
  assertEquals(TEST_AGENT_ID,actualAgentEventBo.getAgentId());
  assertEquals(TEST_START_TIMESTAMP,actualAgentEventBo.getStartTimestamp());
  assertEquals(TEST_EVENT_TIMESTAMP,actualAgentEventBo.getEventTimestamp());
  assertEquals(expectedEventType,actualAgentEventBo.getEventType());
  assertEquals(expectedThreadDumpResponseBody,actualAgentEventBo.getEventBody());
}
