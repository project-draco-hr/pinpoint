{
  if (result.isEmpty()) {
    return Collections.emptyList();
  }
  byte[] rowKey=result.getRow();
  final TransactionId transactionId=this.rowKeyDecoder.decodeRowKey(rowKey);
  final Cell[] rawCells=result.rawCells();
  ListMultimap<Long,SpanBo> spanMap=LinkedListMultimap.create();
  List<SpanChunkBo> spanChunkList=new ArrayList<>();
  final SpanDecodingContext decodingContext=new SpanDecodingContext();
  decodingContext.setTransactionId(transactionId);
  for (  Cell cell : rawCells) {
    SpanDecoder spanDecoder=null;
    if (CellUtil.matchingFamily(cell,HBaseTables.TRACE_V2_CF_SPAN)) {
      decodingContext.setCollectorAcceptedTime(cell.getTimestamp());
      final Buffer qualifier=new OffsetFixedBuffer(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength());
      final Buffer columnValue=new OffsetFixedBuffer(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength());
      spanDecoder=resolveDecoder(columnValue);
      final Object decodeObject=spanDecoder.decode(qualifier,columnValue,decodingContext);
      if (decodeObject instanceof SpanBo) {
        SpanBo spanBo=(SpanBo)decodeObject;
        if (logger.isDebugEnabled()) {
          logger.debug("spanBo:{}",spanBo);
        }
        spanMap.put(spanBo.getSpanId(),spanBo);
      }
 else       if (decodeObject instanceof SpanChunkBo) {
        SpanChunkBo spanChunkBo=(SpanChunkBo)decodeObject;
        if (logger.isDebugEnabled()) {
          logger.debug("spanChunkBo:{}",spanChunkBo);
        }
        spanChunkList.add(spanChunkBo);
      }
    }
 else {
      logger.warn("Unknown ColumnFamily :{}",Bytes.toStringBinary(CellUtil.cloneFamily(cell)));
    }
    nextCell(spanDecoder,decodingContext);
  }
  decodingContext.finish();
  return buildSpanBoList(spanMap,spanChunkList);
}
