{
  final ClassFileTransformerBuilder classTransformerBuilder=context.getClassFileTransformerBuilder("org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer");
  classTransformerBuilder.injectMetadata(METADATA_SOCKET);
  classTransformerBuilder.injectFieldAccessor(FIELD_FRAME_BUFFER_IN_TRANSPORT);
  final String[] parameterTypeNames=new String[]{"org.apache.thrift.server.AbstractNonblockingServer","org.apache.thrift.transport.TNonblockingTransport","java.nio.channels.SelectionKey","org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread"};
  classTransformerBuilder.conditional(ClassConditions.hasField(FIELD_FRAME_BUFFER_IN_TRANSPORT_WRAPPER),new ConditionalClassFileTransformerSetup(){
    @Override public void setup(    ConditionalClassFileTransformerBuilder conditional){
      conditional.injectFieldAccessor(FIELD_FRAME_BUFFER_IN_TRANSPORT_WRAPPER);
      final ConstructorTransformerBuilder constructorTransformerBuilder=conditional.editConstructor(parameterTypeNames);
      constructorTransformerBuilder.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
      constructorTransformerBuilder.injectInterceptor("com.navercorp.pinpoint.plugin.thrift.interceptor.server.nonblocking.FrameBufferConstructInterceptor");
    }
  }
);
  classTransformerBuilder.conditional(ClassConditions.hasMethod("getInputTransport","org.apache.thrift.transport.TTransport"),new ConditionalClassFileTransformerSetup(){
    @Override public void setup(    ConditionalClassFileTransformerBuilder conditional){
      final MethodTransformerBuilder getInputTransportMethodTransformerBuilder=conditional.editMethod("getInputTransport");
      getInputTransportMethodTransformerBuilder.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
      getInputTransportMethodTransformerBuilder.injectInterceptor("com.navercorp.pinpoint.plugin.thrift.interceptor.server.nonblocking.FrameBufferGetInputTransportInterceptor");
    }
  }
);
  context.addClassFileTransformer(classTransformerBuilder.build());
}
