{
  final String targetClassName="org.apache.thrift.async.TAsyncMethodCall";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ThriftConstants.FIELD_ACCESSOR_SOCKET_ADDRESS);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_MARKER_FLAG);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_TRACE_ID);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_NEXT_SPAN_ID);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_CALL_END_FLAG);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_CALL_REMOTE_ADDRESS);
      target.addGetter(ThriftConstants.FIELD_GETTER_T_NON_BLOCKING_TRANSPORT,ThriftConstants.T_ASYNC_METHOD_CALL_FIELD_TRANSPORT);
      final InstrumentMethod constructor=target.getConstructor("org.apache.thrift.async.TAsyncClient","org.apache.thrift.protocol.TProtocolFactory","org.apache.thrift.transport.TNonblockingTransport","org.apache.thrift.async.AsyncMethodCallback","boolean");
      if (constructor != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallConstructInterceptor";
        constructor.addInterceptor(interceptor);
      }
      final InstrumentMethod start=target.getDeclaredMethod("start","java.nio.channels.Selector");
      if (start != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallStartInterceptor";
        start.addInterceptor(interceptor);
      }
      final InstrumentMethod doConnecting=target.getDeclaredMethod("doConnecting","java.nio.channels.SelectionKey");
      if (doConnecting != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallInternalMethodInterceptor";
        doConnecting.addInterceptor(interceptor);
      }
      final InstrumentMethod doWritingRequestSize=target.getDeclaredMethod("doWritingRequestSize");
      if (doWritingRequestSize != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallInternalMethodInterceptor";
        doWritingRequestSize.addInterceptor(interceptor);
      }
      final InstrumentMethod doWritingRequestBody=target.getDeclaredMethod("doWritingRequestBody","java.nio.channels.SelectionKey");
      if (doWritingRequestBody != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallDoWritingRequestBodyInterceptor";
        doWritingRequestBody.addInterceptor(interceptor);
      }
      final InstrumentMethod doReadingResponseSize=target.getDeclaredMethod("doReadingResponseSize");
      if (doReadingResponseSize != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallInternalMethodInterceptor";
        doReadingResponseSize.addInterceptor(interceptor);
      }
      final InstrumentMethod doReadingResponseBody=target.getDeclaredMethod("doReadingResponseBody","java.nio.channels.SelectionKey");
      if (doReadingResponseBody != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallDoReadingResponseBodyInterceptor";
        doReadingResponseBody.addInterceptor(interceptor);
      }
      final InstrumentMethod cleanUpAndFireCallback=target.getDeclaredMethod("cleanUpAndFireCallback","java.nio.channels.SelectionKey");
      if (cleanUpAndFireCallback != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallCleanUpAndFireCallbackInterceptor";
        cleanUpAndFireCallback.addInterceptor(interceptor);
      }
      final InstrumentMethod onError=target.getDeclaredMethod("onError","java.lang.Exception");
      if (onError != null) {
        String interceptor="com.navercorp.pinpoint.plugin.thrift.interceptor.client.async.TAsyncMethodCallOnErrorInterceptor";
        onError.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}
