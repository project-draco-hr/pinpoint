{
  this.transitionAnnotation(spans,new AnnotationReplacementCallback(){
    @Override public void replacement(    SpanAlign spanAlign,    List<AnnotationBo> annotationBoList){
      AnnotationBo apiIdAnnotation=findAnnotation(annotationBoList,AnnotationNames.API_ID.getCode());
      if (apiIdAnnotation == null) {
        return;
      }
      MethodMapping methodMapping=ApiMappingTable.findMethodMapping((Integer)apiIdAnnotation.getValue());
      if (methodMapping == null) {
        return;
      }
      String className=methodMapping.getClassMapping().getClassName();
      String methodName=methodMapping.getMethodName();
      String[] parameterType=methodMapping.getParameterType();
      String[] parameterName=methodMapping.getParameterName();
      String args=ApiUtils.mergeParameterVariableNameDescription(parameterType,parameterName);
      AnnotationBo api=new AnnotationBo();
      api.setKey(AnnotationNames.API.getCode());
      api.setValue(className + "." + methodName+ args);
      annotationBoList.add(api);
    }
  }
);
}
