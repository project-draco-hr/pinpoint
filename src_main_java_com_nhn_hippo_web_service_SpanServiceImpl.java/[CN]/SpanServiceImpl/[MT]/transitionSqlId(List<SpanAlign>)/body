{
  this.transitionAnnotation(spans,new AnnotationReplacementCallback(){
    @Override public void replacement(    SpanAlign spanAlign,    List<AnnotationBo> annotationBoList){
      AnnotationBo sqlIdAnnotation=findAnnotation(annotationBoList,AnnotationNames.SQL_ID);
      if (sqlIdAnnotation == null) {
        return;
      }
      String agentId=getAgentId(spanAlign);
      long startTime=spanAlign.getSpanBo().getStartTime();
      long agentStartTime=agentInfoDao.selectAgentInfoBeforeStartTime(agentId,startTime);
      logger.info("{} Agent StartTime fonud:{}",agentId,agentStartTime);
      int hashCode=(Integer)sqlIdAnnotation.getValue();
      List<SqlMetaDataBo> sqlMetaDataList=sqlMetaDataDao.getSqlMetaData(agentId,hashCode,agentStartTime);
      int size=sqlMetaDataList.size();
      if (size == 0) {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationNames.SQL_METADATA);
        api.setValue("SQL-ID not found hashCode:" + hashCode);
        annotationBoList.add(api);
      }
 else       if (size == 1) {
        AnnotationBo sqlParamAnnotationBo=findAnnotation(annotationBoList,AnnotationNames.SQL_PARAM);
        if (sqlParamAnnotationBo == null) {
          AnnotationBo sqlMeta=new AnnotationBo();
          sqlMeta.setKey(AnnotationNames.SQL_METADATA);
          sqlMeta.setValue(sqlMetaDataList.get(0).getSql());
          annotationBoList.add(sqlMeta);
          AnnotationBo sql=new AnnotationBo();
          sql.setKey(AnnotationNames.SQL);
          sql.setValue(sqlMetaDataList.get(0).getSql());
          annotationBoList.add(sql);
        }
 else {
        }
      }
 else {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationNames.SQL_METADATA);
        api.setValue(collisionSqlHashCodeMessage(hashCode,sqlMetaDataList));
        annotationBoList.add(api);
      }
    }
  }
);
}
