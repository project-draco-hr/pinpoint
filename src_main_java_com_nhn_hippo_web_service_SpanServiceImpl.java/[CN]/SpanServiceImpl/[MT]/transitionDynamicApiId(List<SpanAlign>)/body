{
  this.transitionAnnotation(spans,new AnnotationReplacementCallback(){
    @Override public void replacement(    SpanAlign spanAlign,    List<AnnotationBo> annotationBoList){
      AnnotationBo apiIdAnnotation=findAnnotation(annotationBoList,AnnotationKey.API_DID.getCode());
      if (apiIdAnnotation == null) {
        return;
      }
      AgentInfoBo agentInfoBo=null;
      try {
        agentInfoBo=findAgentInfoBoBeforeStartTime(spanAlign);
        logger.info("{} Agent StartTime found:{}",agentInfoBo.getAgentId(),agentInfoBo);
      }
 catch (      AgentIdNotFoundException ex) {
        AnnotationBo agentInfoNotFound=new AnnotationBo();
        agentInfoNotFound.setKey(AnnotationKey.ERROR_API_METADATA_AGENT_INFO_NOT_FOUND.getCode());
        agentInfoNotFound.setValue("API-DynamicID not found. Cause:agentInfo not found. agentId:" + ex.getAgentId() + " startTime:"+ ex.getStartTime());
        annotationBoList.add(agentInfoNotFound);
        return;
      }
      int apiId=(Integer)apiIdAnnotation.getValue();
      List<ApiMetaDataBo> apiMetaDataList=apiMetaDataDao.getApiMetaData(agentInfoBo.getAgentId(),agentInfoBo.getIdentifier(),apiId,agentInfoBo.getTimestamp());
      int size=apiMetaDataList.size();
      if (size == 0) {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationKey.ERROR_API_METADATA_NOT_FOUND.getCode());
        api.setValue("API-DynamicID not found. api:" + apiId);
        annotationBoList.add(api);
      }
 else       if (size == 1) {
        ApiMetaDataBo apiMetaDataBo=apiMetaDataList.get(0);
        AnnotationBo apiMetaData=new AnnotationBo();
        apiMetaData.setKey(AnnotationKey.API_METADATA.getCode());
        apiMetaData.setValue(apiMetaDataBo);
        annotationBoList.add(apiMetaData);
        AnnotationBo checkFail=checkIdentifier(spanAlign,apiMetaDataBo);
        if (checkFail != null) {
          annotationBoList.add(checkFail);
          return;
        }
        AnnotationBo apiAnnotation=new AnnotationBo();
        apiAnnotation.setKey(AnnotationKey.API.getCode());
        String apiInfo=getApiInfo(apiMetaDataBo);
        apiAnnotation.setValue(apiInfo);
        annotationBoList.add(apiAnnotation);
      }
 else {
        AnnotationBo apiAnnotation=new AnnotationBo();
        apiAnnotation.setKey(AnnotationKey.ERROR_API_METADATA_DID_COLLSION.getCode());
        String collisonMessage=collisionApiDidMessage(apiId,apiMetaDataList);
        apiAnnotation.setValue(collisonMessage);
        annotationBoList.add(apiAnnotation);
      }
    }
    private AnnotationBo checkIdentifier(    SpanAlign spanAlign,    ApiMetaDataBo apiMetaDataBo){
      short agentIdentifier=getAgentIdentifier(spanAlign);
      short sqlIdentifier=apiMetaDataBo.getIdentifier();
      if (agentIdentifier == sqlIdentifier) {
        return null;
      }
      AnnotationBo identifierCheckFail=new AnnotationBo();
      identifierCheckFail.setKey(AnnotationKey.ERROR_API_METADATA_IDENTIFIER_CHECK_ERROR.getCode());
      identifierCheckFail.setValue("invalid ApiMetaInfo:" + apiMetaDataBo);
      return identifierCheckFail;
    }
  }
);
}
