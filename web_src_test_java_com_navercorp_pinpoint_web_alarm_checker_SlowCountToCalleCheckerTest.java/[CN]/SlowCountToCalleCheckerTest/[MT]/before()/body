{
  dao=new MapStatisticsCallerDao(){
    @Override public List<LinkDataMap> selectCallerStatistics(    Application callerApplication,    Application calleeApplication,    Range range){
      return null;
    }
    @Override public LinkDataMap selectCaller(    Application callerApplication,    Range range){
      long timeStamp=1409814914298L;
      LinkDataMap linkDataMap=new LinkDataMap();
      Application fromApplication=new Application(FROM_SERVICE_NAME,ServiceType.TOMCAT);
      for (int i=1; i < 6; i++) {
        LinkCallDataMap linkCallDataMap=new LinkCallDataMap();
        Application toApplication=new Application(TO_SERVICE_NAME + i,ServiceType.TOMCAT);
        Collection<TimeHistogram> timeHistogramList=new ArrayList<TimeHistogram>();
        for (int j=1; j < 11; j++) {
          TimeHistogram timeHistogram=new TimeHistogram(ServiceType.TOMCAT,timeStamp);
          timeHistogram.addCallCountByElapsedTime(i * j * 1000);
          timeHistogramList.add(timeHistogram);
        }
        linkCallDataMap.addCallData(fromApplication.getName(),fromApplication.getServiceType().getCode(),toApplication.getName(),toApplication.getServiceType().getCode(),timeHistogramList);
        LinkData linkData=new LinkData(fromApplication,toApplication,linkCallDataMap);
        linkDataMap.addLinkData(linkData);
      }
      return linkDataMap;
    }
  }
;
}
