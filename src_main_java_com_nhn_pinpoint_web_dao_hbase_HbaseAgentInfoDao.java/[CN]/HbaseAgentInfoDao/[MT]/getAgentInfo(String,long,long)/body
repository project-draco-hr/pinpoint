{
  logger.debug("get agentInfo with, agentId={}, from={}, to={}",agentId,from,to);
  Scan scan=new Scan();
  scan.setCaching(20);
  long fromTime=TimeUtils.reverseCurrentTimeMillis(to);
  long toTime=TimeUtils.reverseCurrentTimeMillis(1);
  byte[] agentIdBytes=Bytes.toBytes(agentId);
  byte[] startKeyBytes=RowKeyUtils.concatFixedByteAndLong(agentIdBytes,HBaseTables.AGENT_NAME_MAX_LEN,fromTime);
  byte[] endKeyBytes=RowKeyUtils.concatFixedByteAndLong(agentIdBytes,HBaseTables.AGENT_NAME_MAX_LEN,toTime);
  scan.setStartRow(startKeyBytes);
  scan.setStopRow(endKeyBytes);
  scan.addFamily(HBaseTables.AGENTINFO_CF_INFO);
  List<AgentInfoBo> found=hbaseOperations2.find(HBaseTables.AGENTINFO,scan,new ResultsExtractor<List<AgentInfoBo>>(){
    @Override public List<AgentInfoBo> extractData(    ResultScanner results) throws Exception {
      List<AgentInfoBo> result=new ArrayList<AgentInfoBo>();
      int found=0;
      for (Result next; (next=results.next()) != null; ) {
        found++;
        byte[] row=next.getRow();
        long reverseStartTime=BytesUtils.bytesToLong(row,HBaseTables.AGENT_NAME_MAX_LEN);
        long startTime=TimeUtils.recoveryCurrentTimeMillis(reverseStartTime);
        byte[] value=next.getValue(HBaseTables.AGENTINFO_CF_INFO,HBaseTables.AGENTINFO_CF_INFO_IDENTIFIER);
        logger.debug("found={}, from={}, to={}, start={}",found,from,to,startTime);
        if (found > 1 && startTime <= from) {
          logger.debug("stop finding agentinfo.");
          break;
        }
        AgentInfoBo agentInfoBo=new AgentInfoBo();
        agentInfoBo.setAgentId(agentId);
        agentInfoBo.setStartTime(startTime);
        agentInfoBo.readValue(value);
        logger.debug("found agentInfoBo {}",agentInfoBo);
        result.add(agentInfoBo);
      }
      logger.debug("extracted agentInfoBo {}",result);
      return result;
    }
  }
);
  logger.debug("get agentInfo result, {}",found);
  return found;
}
