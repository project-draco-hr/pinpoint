{
  final ClassPathResolver classPathResolver=new ClassPathResolver();
  boolean agentJarNotFound=classPathResolver.findAgentJar();
  if (!agentJarNotFound) {
    logger.warn("pinpoint-bootstrap-x.x.x(-SNAPSHOT).jar Fnot found.");
    logPinpointAgentLoadFail();
    return;
  }
  final String pinpointCommonsJar=classPathResolver.getPinpointCommonsJar();
  if (pinpointCommonsJar == null) {
    logger.warn("pinpoint-commons-x.x.x(-SNAPSHOT).jar not found");
    logPinpointAgentLoadFail();
    return;
  }
  this.bootstrapJars.add(pinpointCommonsJar);
  final String bootStrapCoreJar=classPathResolver.getBootStrapCoreJar();
  if (bootStrapCoreJar == null) {
    logger.warn("pinpoint-bootstrap-core-x.x.x(-SNAPSHOT).jar not found");
    logPinpointAgentLoadFail();
    return;
  }
  this.bootstrapJars.add(bootStrapCoreJar);
  final String bootStrapCoreOptionalJar=classPathResolver.getBootStrapCoreOptionalJar();
  if (bootStrapCoreOptionalJar == null) {
    logger.info("pinpoint-bootstrap-core-optional-x.x.x(-SNAPSHOT).jar not found");
  }
 else {
    this.bootstrapJars.add(bootStrapCoreOptionalJar);
  }
  if (!isValidId("pinpoint.agentId",PinpointConstants.AGENT_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  if (!isValidId("pinpoint.applicationName",PinpointConstants.APPLICATION_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  URL[] pluginJars=classPathResolver.resolvePlugins();
  CommonLoggerFactory loggerFactory=StdoutCommonLoggerFactory.INSTANCE;
  TraceMetadataLoaderService typeLoaderService=new DefaultTraceMetadataLoaderService(pluginJars,loggerFactory);
  ServiceTypeRegistryService serviceTypeRegistryService=new DefaultServiceTypeRegistryService(typeLoaderService,loggerFactory);
  AnnotationKeyRegistryService annotationKeyRegistryService=new DefaultAnnotationKeyRegistryService(typeLoaderService,loggerFactory);
  String configPath=getConfigPath(classPathResolver);
  if (configPath == null) {
    logPinpointAgentLoadFail();
    return;
  }
  saveLogFilePath(classPathResolver);
  savePinpointVersion();
  try {
    ProfilerConfig profilerConfig=DefaultProfilerConfig.load(configPath);
    List<URL> libUrlList=resolveLib(classPathResolver);
    AgentClassLoader agentClassLoader=new AgentClassLoader(libUrlList.toArray(new URL[libUrlList.size()]));
    String bootClass=argMap.containsKey("bootClass") ? argMap.get("bootClass") : BOOT_CLASS;
    agentClassLoader.setBootClass(bootClass);
    logger.info("pinpoint agent [" + bootClass + "] starting...");
    AgentOption option=createAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootstrapJars,serviceTypeRegistryService,annotationKeyRegistryService);
    Agent pinpointAgent=agentClassLoader.boot(option);
    pinpointAgent.start();
    registerShutdownHook(pinpointAgent);
    logger.info("pinpoint agent started normally.");
  }
 catch (  Exception e) {
    logger.warn(ProductInfo.NAME + " start failed. Error:" + e.getMessage(),e);
    logPinpointAgentLoadFail();
  }
}
