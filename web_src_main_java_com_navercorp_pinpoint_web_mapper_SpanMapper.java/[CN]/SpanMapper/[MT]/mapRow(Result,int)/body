{
  if (result.isEmpty()) {
    return Collections.emptyList();
  }
  byte[] rowKey=result.getRow();
  final TransactionId transactionId=this.rowKeyDecoder.decodeRowKey(rowKey);
  final Cell[] rawCells=result.rawCells();
  Map<AgentKey,SpanBo> spanMap=new LinkedHashMap<>();
  ListMultimap<AgentKey,SpanEventBo> spanEventBoListMap=ArrayListMultimap.create();
  ListMultimap<Long,AnnotationBo> annotationBoListMap=ArrayListMultimap.create();
  final SpanDecodingContext decodingContext=new SpanDecodingContext();
  decodingContext.setTransactionId(transactionId);
  for (  Cell cell : rawCells) {
    decodingContext.setCollectorAcceptedTime(cell.getTimestamp());
    if (CellUtil.matchingFamily(cell,HBaseTables.TRACES_CF_SPAN)) {
      Buffer qualifierBuffer=new OffsetFixedBuffer(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength());
      Buffer valueBuffer=new OffsetFixedBuffer(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength());
      final SpanBo spanBo=spanDecoder.decodeSpanBo(qualifierBuffer,valueBuffer,decodingContext);
      AgentKey agentKey=newAgentKey(spanBo);
      spanMap.put(agentKey,spanBo);
    }
 else     if (CellUtil.matchingFamily(cell,HBaseTables.TRACES_CF_TERMINALSPAN)) {
      final Buffer qualifier=new OffsetFixedBuffer(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength());
      final Buffer valueBuffer=new OffsetFixedBuffer(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength());
      SpanEventBo spanEventBo=spanDecoder.decodeSpanEventBo(qualifier,valueBuffer,decodingContext);
      AgentKey agentKey=newAgentKey(decodingContext);
      spanEventBoListMap.put(agentKey,spanEventBo);
    }
 else     if (CellUtil.matchingFamily(cell,HBaseTables.TRACES_CF_ANNOTATION)) {
      final Buffer qualifier=new OffsetFixedBuffer(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength());
      final Buffer valueBuffer=new OffsetFixedBuffer(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength());
      List<AnnotationBo> annotationBoList=annotationBoDecoder.decode(qualifier,valueBuffer,decodingContext);
      if (CollectionUtils.isNotEmpty(annotationBoList)) {
        long spanId=decodingContext.getSpanId();
        annotationBoListMap.putAll(spanId,annotationBoList);
      }
    }
    spanDecoder.next(decodingContext);
  }
  decodingContext.finish();
  for (  Map.Entry<AgentKey,SpanEventBo> spanBoEntry : spanEventBoListMap.entries()) {
    final AgentKey agentKey=spanBoEntry.getKey();
    SpanBo spanBo=spanMap.get(agentKey);
    if (spanBo != null) {
      SpanEventBo value=spanBoEntry.getValue();
      spanBo.addSpanEvent(value);
    }
 else {
      if (logger.isInfoEnabled()) {
        logger.info("Span not exist spanId:{} spanEvent:{}",spanBoEntry.getKey(),spanBoEntry.getValue());
      }
    }
  }
  List<SpanBo> spanList=Lists.newArrayList(spanMap.values());
  if (!annotationBoListMap.isEmpty()) {
    addAnnotation(spanList,annotationBoListMap);
  }
  return spanList;
}
