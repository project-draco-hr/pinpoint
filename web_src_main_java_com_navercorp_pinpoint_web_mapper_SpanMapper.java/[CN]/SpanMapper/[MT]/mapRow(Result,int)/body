{
  if (result.isEmpty()) {
    return Collections.emptyList();
  }
  byte[] rowKey=result.getRow();
  final TransactionId transactionId=new TransactionId(rowKey,TransactionId.DISTRIBUTE_HASH_SIZE);
  final Cell[] rawCells=result.rawCells();
  List<SpanBo> spanList=new ArrayList<>();
  Map<Long,SpanBo> spanMap=new HashMap<>();
  LinkedHashMultimap<Long,SpanEventBo> spanEventBoListMap=LinkedHashMultimap.create();
  for (  Cell cell : rawCells) {
    if (CellUtil.matchingFamily(cell,HBaseTables.TRACES_CF_SPAN)) {
      SpanBo spanBo=new SpanBo();
      spanBo.setTraceAgentId(transactionId.getAgentId());
      spanBo.setTraceAgentStartTime(transactionId.getAgentStartTime());
      spanBo.setTraceTransactionSequence(transactionId.getTransactionSequence());
      spanBo.setCollectorAcceptTime(cell.getTimestamp());
      spanBo.setSpanId(Bytes.toLong(cell.getQualifierArray(),cell.getQualifierOffset()));
      readSpan(spanBo,cell.getValueArray(),cell.getValueOffset(),cell.getValueLength());
      if (logger.isDebugEnabled()) {
        logger.debug("read span :{}",spanBo);
      }
      spanList.add(spanBo);
      spanMap.put(spanBo.getSpanId(),spanBo);
    }
 else     if (CellUtil.matchingFamily(cell,HBaseTables.TRACES_CF_TERMINALSPAN)) {
      SpanEventBo spanEventBo=new SpanEventBo();
      spanEventBo.setTraceAgentId(transactionId.getAgentId());
      spanEventBo.setTraceAgentStartTime(transactionId.getAgentStartTime());
      spanEventBo.setTraceTransactionSequence(transactionId.getTransactionSequence());
      final Buffer qualifier=new OffsetFixedBuffer(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength());
      Long spanId=qualifier.readLong();
      short sequence=qualifier.readShort();
      int asyncId=-1;
      if (qualifier.hasRemaining()) {
        asyncId=qualifier.readInt();
      }
      short asyncSequence=-1;
      if (qualifier.hasRemaining()) {
        asyncSequence=qualifier.readShort();
      }
      spanEventBo.setSequence(sequence);
      spanEventBo.setAsyncId(asyncId);
      spanEventBo.setAsyncSequence(asyncSequence);
      readSpanEvent(spanEventBo,cell.getValueArray(),cell.getValueOffset(),cell.getValueLength());
      if (logger.isDebugEnabled()) {
        logger.debug("read spanEvent :{}",spanEventBo);
      }
      spanEventBoListMap.put(spanId,spanEventBo);
    }
  }
  for (  Map.Entry<Long,SpanEventBo> spanBoEntry : spanEventBoListMap.entries()) {
    final Long spanId=spanBoEntry.getKey();
    SpanBo spanBo=spanMap.get(spanId);
    if (spanBo != null) {
      spanBo.addSpanEventBoList(Lists.newArrayList(spanBoEntry.getValue()));
    }
 else {
      if (logger.isInfoEnabled()) {
        logger.info("Span not exist spanId:{} spanEvent:{}",spanBoEntry.getKey(),spanBoEntry.getValue());
      }
    }
  }
  if (annotationMapper != null) {
    Map<Long,List<AnnotationBo>> annotationMap=annotationMapper.mapRow(result,rowNum);
    addAnnotation(spanList,annotationMap);
  }
  return spanList;
}
