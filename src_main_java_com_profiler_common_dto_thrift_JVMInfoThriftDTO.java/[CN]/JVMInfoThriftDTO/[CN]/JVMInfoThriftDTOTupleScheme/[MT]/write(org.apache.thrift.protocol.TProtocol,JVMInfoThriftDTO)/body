{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetAgentId()) {
    optionals.set(0);
  }
  if (struct.isSetDataTime()) {
    optionals.set(1);
  }
  if (struct.isSetActiveThreadCount()) {
    optionals.set(2);
  }
  if (struct.isSetGc1Count()) {
    optionals.set(3);
  }
  if (struct.isSetGc1Time()) {
    optionals.set(4);
  }
  if (struct.isSetGc2Count()) {
    optionals.set(5);
  }
  if (struct.isSetGc2Time()) {
    optionals.set(6);
  }
  if (struct.isSetHeapUsed()) {
    optionals.set(7);
  }
  if (struct.isSetHeapCommitted()) {
    optionals.set(8);
  }
  if (struct.isSetNonHeapUsed()) {
    optionals.set(9);
  }
  if (struct.isSetNonHeapCommitted()) {
    optionals.set(10);
  }
  if (struct.isSetProcessCPUTime()) {
    optionals.set(11);
  }
  oprot.writeBitSet(optionals,12);
  if (struct.isSetAgentId()) {
    oprot.writeString(struct.agentId);
  }
  if (struct.isSetDataTime()) {
    oprot.writeI64(struct.dataTime);
  }
  if (struct.isSetActiveThreadCount()) {
    oprot.writeI32(struct.activeThreadCount);
  }
  if (struct.isSetGc1Count()) {
    oprot.writeI64(struct.gc1Count);
  }
  if (struct.isSetGc1Time()) {
    oprot.writeI64(struct.gc1Time);
  }
  if (struct.isSetGc2Count()) {
    oprot.writeI64(struct.gc2Count);
  }
  if (struct.isSetGc2Time()) {
    oprot.writeI64(struct.gc2Time);
  }
  if (struct.isSetHeapUsed()) {
    oprot.writeI64(struct.heapUsed);
  }
  if (struct.isSetHeapCommitted()) {
    oprot.writeI64(struct.heapCommitted);
  }
  if (struct.isSetNonHeapUsed()) {
    oprot.writeI64(struct.nonHeapUsed);
  }
  if (struct.isSetNonHeapCommitted()) {
    oprot.writeI64(struct.nonHeapCommitted);
  }
  if (struct.isSetProcessCPUTime()) {
    oprot.writeDouble(struct.processCPUTime);
  }
}
