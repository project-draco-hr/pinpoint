{
  SimpleStreamBO bo=new SimpleStreamBO();
  PinpointServerAcceptor serverAcceptor=createServerFactory(SimpleServerMessageListener.DUPLEX_ECHO_INSTANCE,new ServerListener(bo));
  serverAcceptor.bind("localhost",bindPort);
  PinpointClientFactory clientFactory=createSocketFactory();
  try {
    PinpointClient client=clientFactory.connect("127.0.0.1",bindPort);
    RecordedStreamChannelMessageListener clientListener=new RecordedStreamChannelMessageListener(4);
    ClientStreamChannelContext clientContext=client.openStream(new byte[0],clientListener);
    RecordedStreamChannelMessageListener clientListener2=new RecordedStreamChannelMessageListener(4);
    ClientStreamChannelContext clientContext2=client.openStream(new byte[0],clientListener2);
    int sendCount=4;
    for (int i=0; i < sendCount; i++) {
      sendRandomBytes(bo);
    }
    Thread.sleep(100);
    Assert.assertEquals(sendCount,clientListener.getReceivedMessage().size());
    Assert.assertEquals(sendCount,clientListener2.getReceivedMessage().size());
    clientContext.getStreamChannel().close();
    Thread.sleep(100);
    sendCount=4;
    for (int i=0; i < sendCount; i++) {
      sendRandomBytes(bo);
    }
    Thread.sleep(100);
    Assert.assertEquals(sendCount,clientListener.getReceivedMessage().size());
    Assert.assertEquals(8,clientListener2.getReceivedMessage().size());
    clientContext2.getStreamChannel().close();
    PinpointRPCTestUtils.close(client);
  }
  finally {
    clientFactory.release();
    PinpointRPCTestUtils.close(serverAcceptor);
  }
}
