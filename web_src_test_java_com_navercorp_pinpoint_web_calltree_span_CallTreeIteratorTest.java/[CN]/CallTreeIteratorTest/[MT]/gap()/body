{
  SpanAlign root=makeSpanAlign(START_TIME,240);
  CallTree callTree=new SpanCallTree(root);
  callTree.add(1,makeSpanAlign(root.getSpanBo(),SYNC,(short)0,1,1));
  callTree.add(2,makeSpanAlign(root.getSpanBo(),SYNC,(short)1,2,1));
  callTree.add(3,makeSpanAlign(root.getSpanBo(),SYNC,(short)2,3,1));
  callTree.add(4,makeSpanAlign(root.getSpanBo(),SYNC,(short)3,4,1));
  callTree.add(-1,makeSpanAlign(root.getSpanBo(),SYNC,(short)4,5,1));
  callTree.add(2,makeSpanAlign(root.getSpanBo(),SYNC,(short)5,6,1));
  callTree.add(3,makeSpanAlign(root.getSpanBo(),SYNC,(short)6,7,1));
  callTree.add(-1,makeSpanAlign(root.getSpanBo(),SYNC,(short)7,8,1));
  callTree.add(1,makeSpanAlign(root.getSpanBo(),SYNC,(short)8,9,1));
  CallTreeIterator iterator=callTree.iterator();
  final StringBuilder buffer=new StringBuilder("\n");
  while (iterator.hasNext()) {
    CallTreeNode node=iterator.next();
    SpanAlign align=node.getValue();
    for (int i=0; i <= align.getDepth(); i++) {
      buffer.append("#");
    }
    buffer.append(" : gap=");
    buffer.append(align.getGap());
    buffer.append("\n");
  }
  logger.debug(buffer.toString());
}
