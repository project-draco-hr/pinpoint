{
  final Class<AroundInterceptor0> aroundInterceptor3Class=AroundInterceptor0.class;
  final InterceptorDefinition interceptorDefinition=interceptorDefinitionFactory.createInterceptorDefinition(aroundInterceptor3Class);
  final InstrumentClass mockClass=mock(InstrumentClass.class);
  Mockito.when(mockClass.getName()).thenReturn("TestClass");
  final InstrumentMethod mockMethod=mock(InstrumentMethod.class);
  Mockito.when(mockMethod.getName()).thenReturn("TestMethod");
  Mockito.when(mockMethod.getParameterTypes()).thenReturn(new String[]{});
  Mockito.when(mockMethod.getReturnType()).thenReturn("java.lang.Object");
  TraceContext context=mock(TraceContext.class);
  final InvokeAfterCodeGenerator invokeAfterCodeGenerator=new InvokeAfterCodeGenerator(100,interceptorDefinition,mockClass,mockMethod,context,false,true);
  final String generate=invokeAfterCodeGenerator.generate();
  logger.debug("testGenerate_AroundInterceptor0:{}",generate);
  Assert.assertFalse(generate.contains("($w)$1"));
  Assert.assertFalse(generate.contains("($w)$2"));
  Assert.assertFalse(generate.contains("($w)$3"));
  Assert.assertTrue(generate.contains("$e"));
}
