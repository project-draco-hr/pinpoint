{
  final Class<AroundInterceptor3> aroundInterceptor3Class=AroundInterceptor3.class;
  final Method interceptorAfter=aroundInterceptor3Class.getMethod("after",Object.class,Object.class,Object.class,Object.class,Object.class,Throwable.class);
  final InstrumentClass mockClass=mock(InstrumentClass.class);
  Mockito.when(mockClass.getName()).thenReturn("TestClass");
  final InstrumentMethod mockMethod=mock(InstrumentMethod.class);
  Mockito.when(mockMethod.getName()).thenReturn("TestMethod");
  Mockito.when(mockMethod.getParameterTypes()).thenReturn(new String[]{"java.lang.Object","java.lang.Object","java.lang.Object"});
  Mockito.when(mockMethod.getReturnType()).thenReturn("java.lang.Object");
  TraceContext context=mock(TraceContext.class);
  final InvokeAfterCodeGenerator invokeAfterCodeGenerator=new InvokeAfterCodeGenerator(100,aroundInterceptor3Class,interceptorAfter,mockClass,mockMethod,context,false,true);
  final String generate=invokeAfterCodeGenerator.generate();
  logger.debug("testGenerate_AroundInterceptor3_catchClause:{}",generate);
  Assert.assertTrue(generate.contains("($w)$1"));
  Assert.assertTrue(generate.contains("($w)$2"));
  Assert.assertTrue(generate.contains("($w)$3"));
  Assert.assertTrue(generate.contains("$e"));
}
