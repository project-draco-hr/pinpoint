{
  if (isDebug) {
    logger.beforeInterceptor(target,"",methodDescriptor.getMethodName(),"",args);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  final HttpRequest httpRequest=getHttpRequest(target);
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    if (isDebug) {
      logger.debug("set Sampling flag=false");
    }
    if (httpRequest != null) {
      httpRequest.setHeader(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    }
    return;
  }
  SpanEventRecorder recorder=trace.traceBlockBegin();
  final TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  recorder.recordServiceType(HttpClient4Constants.HTTP_CLIENT_4);
  if (httpRequest != null) {
    httpRequest.setHeader(Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
    httpRequest.setHeader(Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
    httpRequest.setHeader(Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
    httpRequest.setHeader(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
    final NameIntValuePair<String> host=getHost(target);
    if (host != null) {
      httpRequest.setHeader(Header.HTTP_HOST.toString(),host.getName());
    }
  }
  try {
    if (isAsynchronousInvocation(target,args)) {
      final AsyncTraceId asyncTraceId=trace.getAsyncTraceId();
      recorder.recordNextAsyncId(asyncTraceId.getAsyncId());
      ((AsyncTraceIdAccessor)((ResultFutureGetter)target)._$PINPOINT$_getResultFuture())._$PINPOINT$_setAsyncTraceId(asyncTraceId);
      if (isDebug) {
        logger.debug("Set asyncTraceId metadata {}",asyncTraceId);
      }
    }
  }
 catch (  Throwable t) {
    logger.warn("Failed to BEFORE process. {}",t.getMessage(),t);
  }
}
