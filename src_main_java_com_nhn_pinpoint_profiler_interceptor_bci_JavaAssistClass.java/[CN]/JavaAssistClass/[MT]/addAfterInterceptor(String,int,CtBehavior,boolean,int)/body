{
  String returnType=getReturnType(behavior);
  String target=getTarget(behavior);
  String parameterTypeString=null;
  if (interceptorType == STATIC_INTERCEPTOR) {
    parameterTypeString=JavaAssistUtils.getParameterDescription(behavior.getParameterTypes());
  }
  final String parameter=getParameter(behavior);
  final CodeBuilder after=new CodeBuilder();
  if (useContextClassLoader) {
    after.begin();
    beginAddFindInterceptorCode(id,after,interceptorType);
    if (interceptorType == STATIC_INTERCEPTOR) {
      after.append("  java.lang.Class[] methodArgsClassParams = new Class[]{java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object[].class, java.lang.Object.class};");
    }
 else {
      after.append("  java.lang.Class[] methodArgsClassParams = new Class[]{java.lang.Object.class, java.lang.Object[].class, java.lang.Object.class};");
    }
    after.format("  java.lang.reflect.Method method = interceptor.getClass().getMethod(\"%1$s\", methodArgsClassParams);","after");
    if (interceptorType == STATIC_INTERCEPTOR) {
      after.format("  java.lang.Object[] methodParams = new java.lang.Object[] { %1$s, \"%2$s\", \"%3$s\", \"%4$s\", %5$s, %6$s };",target,ctClass.getName(),methodName,parameterTypeString,parameter,returnType);
    }
 else {
      after.format("  java.lang.Object[] methodParams = new java.lang.Object[] { %1$s, %2$s, %3$s };",target,parameter,returnType);
    }
    after.append("  method.invoke(interceptor, methodParams);");
    endAddFindInterceptorCode(after);
    after.end();
  }
 else {
    after.begin();
    if (interceptorType == STATIC_INTERCEPTOR) {
      after.format("  %1$s interceptor = com.nhn.pinpoint.profiler.interceptor.InterceptorRegistry.getInterceptor(%2$d);",StaticAroundInterceptor.class.getName(),id);
      after.format("  interceptor.after(%1$s, \"%2$s\", \"%3$s\", \"%4$s\", %5$s, %6$s);",target,ctClass.getName(),methodName,parameterTypeString,parameter,returnType);
    }
 else {
      after.format("  %1$s interceptor = com.nhn.pinpoint.profiler.interceptor.InterceptorRegistry.getSimpleInterceptor(%2$d);",SimpleAroundInterceptor.class.getName(),id);
      after.format("  interceptor.after(%1$s, %2$s, %3$s);",target,parameter,returnType);
    }
    after.end();
  }
  final String buildAfter=after.toString();
  if (logger.isDebugEnabled()) {
    logger.debug("addAfterInterceptor after behavior:{} code:{}",behavior.getLongName(),buildAfter);
  }
  behavior.insertAfter(buildAfter);
  CodeBuilder catchCode=new CodeBuilder();
  if (useContextClassLoader) {
    catchCode.begin();
    beginAddFindInterceptorCode(id,catchCode,interceptorType);
    if (interceptorType == STATIC_INTERCEPTOR) {
      catchCode.append("  java.lang.Class[] methodArgsClassParams = new Class[]{java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object[].class, java.lang.Object.class};");
    }
 else {
      catchCode.append("  java.lang.Class[] methodArgsClassParams = new Class[]{java.lang.Object.class, java.lang.Object[].class, java.lang.Object.class};");
    }
    catchCode.format("  java.lang.reflect.Method method = interceptor.getClass().getMethod(\"%1$s\", methodArgsClassParams);","after");
    if (interceptorType == STATIC_INTERCEPTOR) {
      catchCode.format("  java.lang.Object[] methodParams = new java.lang.Object[] { %1$s, \"%2$s\", \"%3$s\", \"%4$s\", %5$s, (java.lang.Object) $e };",target,ctClass.getName(),methodName,parameterTypeString,parameter);
    }
 else {
      catchCode.format("  java.lang.Object[] methodParams = new java.lang.Object[] { %1$s, %2$s, (java.lang.Object) $e };",target,parameter);
    }
    catchCode.append("  method.invoke(interceptor, methodParams);");
    endAddFindInterceptorCode(catchCode);
    catchCode.append("  throw $e;");
    catchCode.end();
  }
 else {
    catchCode.begin();
    if (interceptorType == STATIC_INTERCEPTOR) {
      catchCode.format("  %1$s interceptor = com.nhn.pinpoint.profiler.interceptor.InterceptorRegistry.getInterceptor(%2$d);",StaticAroundInterceptor.class.getName(),id);
      catchCode.format("  interceptor.after(%1$s, \"%2$s\", \"%3$s\", \"%4$s\", %5$s, $e);",target,ctClass.getName(),methodName,parameterTypeString,parameter);
    }
 else {
      catchCode.format("  %1$s interceptor = com.nhn.pinpoint.profiler.interceptor.InterceptorRegistry.getSimpleInterceptor(%2$d);",SimpleAroundInterceptor.class.getName(),id);
      catchCode.format("  interceptor.after(%1$s, %2$s, $e);",target,parameter);
    }
    catchCode.append("  throw $e;");
    catchCode.end();
  }
  String buildCatch=catchCode.toString();
  if (logger.isDebugEnabled()) {
    logger.debug("addAfterInterceptor catch behavior:{} code:{}",behavior.getLongName(),buildCatch);
  }
  CtClass th=instrumentor.getClassPool().get("java.lang.Throwable");
  behavior.addCatch(buildCatch,th);
}
