{
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  if (!validate(target,args)) {
    return;
  }
  final Trace trace=this.traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  try {
    ThriftRequestProperty parentTraceInfo=new ThriftRequestProperty();
    final boolean shouldSample=trace.canSampled();
    if (!shouldSample) {
      if (isDebug) {
        logger.debug("set Sampling flag=false");
      }
      parentTraceInfo.setShouldSample(shouldSample);
    }
 else {
      SpanEventRecorder recorder=trace.traceBlockBegin();
      Object asyncMethodCallObj=args[0];
      final AsyncTraceId asyncTraceId=injectAsyncTraceId(asyncMethodCallObj,trace);
      recorder.recordServiceType(ThriftConstants.THRIFT_CLIENT_INTERNAL);
      String remoteAddress=getRemoteAddress(asyncMethodCallObj);
      final TraceId nextId=asyncTraceId.getNextTraceId();
      final long nextSpanId=nextId.getSpanId();
      parentTraceInfo.setSpanId(nextSpanId);
      parentTraceInfo.setTraceId(nextId.getTransactionId());
      parentTraceInfo.setParentSpanId(nextId.getParentSpanId());
      parentTraceInfo.setFlags(nextId.getFlags());
      parentTraceInfo.setParentApplicationName(this.traceContext.getApplicationName());
      parentTraceInfo.setParentApplicationType(this.traceContext.getServerTypeCode());
      parentTraceInfo.setAcceptorHost(remoteAddress);
      ((AsyncCallRemoteAddressFieldAccessor)asyncMethodCallObj)._$PINPOINT$_setAsyncCallRemoteAddress(remoteAddress);
      ((AsyncNextSpanIdFieldAccessor)asyncMethodCallObj)._$PINPOINT$_setAsyncNextSpanId(nextSpanId);
    }
    InterceptorGroupInvocation currentTransaction=this.group.getCurrentInvocation();
    currentTransaction.setAttachment(parentTraceInfo);
  }
 catch (  Throwable t) {
    logger.warn("BEFORE error. Caused:{}",t.getMessage(),t);
  }
}
