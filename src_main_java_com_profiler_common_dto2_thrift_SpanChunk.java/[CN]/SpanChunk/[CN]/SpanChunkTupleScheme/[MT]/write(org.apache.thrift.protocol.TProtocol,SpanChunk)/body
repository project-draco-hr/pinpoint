{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetAgentId()) {
    optionals.set(0);
  }
  if (struct.isSetApplicationName()) {
    optionals.set(1);
  }
  if (struct.isSetAgentStartTime()) {
    optionals.set(2);
  }
  if (struct.isSetServiceType()) {
    optionals.set(3);
  }
  if (struct.isSetMostTraceId()) {
    optionals.set(4);
  }
  if (struct.isSetLeastTraceId()) {
    optionals.set(5);
  }
  if (struct.isSetSpanId()) {
    optionals.set(6);
  }
  if (struct.isSetEndPoint()) {
    optionals.set(7);
  }
  if (struct.isSetSpanEventList()) {
    optionals.set(8);
  }
  oprot.writeBitSet(optionals,9);
  if (struct.isSetAgentId()) {
    oprot.writeString(struct.agentId);
  }
  if (struct.isSetApplicationName()) {
    oprot.writeString(struct.applicationName);
  }
  if (struct.isSetAgentStartTime()) {
    oprot.writeI64(struct.agentStartTime);
  }
  if (struct.isSetServiceType()) {
    oprot.writeI16(struct.serviceType);
  }
  if (struct.isSetMostTraceId()) {
    oprot.writeI64(struct.mostTraceId);
  }
  if (struct.isSetLeastTraceId()) {
    oprot.writeI64(struct.leastTraceId);
  }
  if (struct.isSetSpanId()) {
    oprot.writeI32(struct.spanId);
  }
  if (struct.isSetEndPoint()) {
    oprot.writeString(struct.endPoint);
  }
  if (struct.isSetSpanEventList()) {
{
      oprot.writeI32(struct.spanEventList.size());
      for (      SpanEvent _iter36 : struct.spanEventList) {
        _iter36.write(oprot);
      }
    }
  }
}
