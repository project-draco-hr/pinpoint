{
  PinpointServerAcceptor serverAcceptor=PinpointRPCTestUtils.createPinpointServerFactory(bindPort,SimpleServerMessageListener.DUPLEX_INSTANCE);
  EchoClientListener echoMessageListener1=PinpointRPCTestUtils.createEchoClientListener();
  PinpointClientFactory clientSocketFactory1=PinpointRPCTestUtils.createClientFactory(PinpointRPCTestUtils.getParams(),echoMessageListener1);
  EchoClientListener echoMessageListener2=PinpointRPCTestUtils.createEchoClientListener();
  PinpointClientFactory clientSocketFactory2=PinpointRPCTestUtils.createClientFactory(PinpointRPCTestUtils.getParams(),echoMessageListener2);
  try {
    PinpointClient client=clientSocketFactory1.connect("127.0.0.1",bindPort);
    PinpointClient client2=clientSocketFactory2.connect("127.0.0.1",bindPort);
    assertAvaiableWritableSocket(serverAcceptor,2);
    List<PinpointSocket> writableServerList=serverAcceptor.getWritableSocketList();
    PinpointSocket writableServer=writableServerList.get(0);
    assertRequestMessage(writableServer,"socket1",null);
    PinpointSocket writableServer2=writableServerList.get(1);
    assertRequestMessage(writableServer2,"socket2",null);
    Assert.assertEquals(1,echoMessageListener1.getRequestPacketRepository().size());
    Assert.assertEquals(1,echoMessageListener2.getRequestPacketRepository().size());
    PinpointRPCTestUtils.close(client,client2);
  }
  finally {
    clientSocketFactory1.release();
    clientSocketFactory2.release();
    PinpointRPCTestUtils.close(serverAcceptor);
  }
}
