{
  final Application toApplication=linkData.getToApplication();
  if (!toApplication.getServiceType().isRpcClient()) {
    return Collections.singletonList(linkData);
  }
  logger.debug("checkRpcCallAccepted(). Find applicationName:{} {}",toApplication,range);
  final Set<AcceptApplication> acceptApplicationList=findAcceptApplication(linkData.getFromApplication(),toApplication.getName(),range);
  logger.debug("find accept application:{}",acceptApplicationList);
  if (CollectionUtils.isNotEmpty(acceptApplicationList)) {
    if (acceptApplicationList.size() == 1) {
      logger.debug("Application info replaced. {} => {}",linkData,acceptApplicationList);
      AcceptApplication first=acceptApplicationList.iterator().next();
      final LinkData acceptedLinkData=new LinkData(linkData.getFromApplication(),first.getApplication());
      acceptedLinkData.setLinkCallDataMap(linkData.getLinkCallDataMap());
      return Collections.singletonList(acceptedLinkData);
    }
 else {
      return createVirtualLinkData(linkData,toApplication,acceptApplicationList);
    }
  }
 else {
    final Application unknown=new Application(toApplication.getName(),ServiceType.UNKNOWN);
    final LinkData unknownLinkData=new LinkData(linkData.getFromApplication(),unknown);
    unknownLinkData.setLinkCallDataMap(linkData.getLinkCallDataMap());
    return Collections.singletonList(unknownLinkData);
  }
}
