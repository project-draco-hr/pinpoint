{
  if (sql == null || sql.length() == 0 || bindValues == null || bindValues.size() == 0) {
    return sql;
  }
  final Queue<String> bindValueQueue=new LinkedList<String>(bindValues);
  final int length=sql.length();
  final StringBuilder result=new StringBuilder(length + 16);
  boolean inQuotes=false;
  char quoteChar=0;
  for (int i=0; i < length; i++) {
    final char ch=sql.charAt(i);
    if (inQuotes) {
      if (((ch == '\'') || (ch == '"')) && ch == quoteChar) {
        if (lookAhead1(sql,i) == quoteChar) {
          result.append(ch);
          i++;
          continue;
        }
        inQuotes=!inQuotes;
        quoteChar=0;
      }
      result.append(ch);
    }
 else {
      if (ch == '/') {
        int lookAhead1Char=lookAhead1(sql,i);
        if (lookAhead1Char == '*') {
          result.append("/*");
          i+=2;
          for (; i < length; i++) {
            char stateCh=sql.charAt(i);
            if (stateCh == '*') {
              if (lookAhead1(sql,i) == '/') {
                result.append("*/");
                i++;
                break;
              }
            }
            result.append(stateCh);
          }
        }
 else         if (lookAhead1Char == '/') {
          result.append("//");
          i+=2;
          i=readLine(sql,result,i);
        }
 else {
          result.append(ch);
        }
      }
 else       if (ch == '-') {
        if (lookAhead1(sql,i) == '-') {
          result.append("--");
          i+=2;
          i=readLine(sql,result,i);
        }
 else {
          result.append(ch);
        }
      }
 else       if (ch == '\'' || ch == '"') {
        inQuotes=true;
        quoteChar=ch;
        result.append(ch);
      }
 else       if (ch == '?') {
        if (!bindValueQueue.isEmpty()) {
          result.append('\'').append(bindValueQueue.poll()).append('\'');
        }
      }
 else {
        result.append(ch);
      }
    }
  }
  return result.toString();
}
