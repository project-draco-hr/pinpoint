{
  final ProfilerConfig config=context.getConfig();
  final boolean errorMark=config.readBoolean(SPRING_BEANS_MARK_ERROR,false);
  transformTemplate.transform("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      final BeanMethodTransformer beanTransformer=new BeanMethodTransformer(errorMark);
      final ObjectFactory beanFilterFactory=ObjectFactory.byStaticFactory("com.navercorp.pinpoint.plugin.spring.beans.interceptor.TargetBeanFilter","of",config);
      final InstrumentMethod createBeanInstance=target.getDeclaredMethod("createBeanInstance","java.lang.String","org.springframework.beans.factory.support.RootBeanDefinition","java.lang.Object[]");
      createBeanInstance.addInterceptor("com.navercorp.pinpoint.plugin.spring.beans.interceptor.CreateBeanInstanceInterceptor",va(beanTransformer,beanFilterFactory));
      final InstrumentMethod postProcessor=target.getDeclaredMethod("applyBeanPostProcessorsBeforeInstantiation","java.lang.Class","java.lang.String");
      postProcessor.addInterceptor("com.navercorp.pinpoint.plugin.spring.beans.interceptor.PostProcessorInterceptor",va(beanTransformer,beanFilterFactory));
      return target.toBytecode();
    }
  }
);
}
