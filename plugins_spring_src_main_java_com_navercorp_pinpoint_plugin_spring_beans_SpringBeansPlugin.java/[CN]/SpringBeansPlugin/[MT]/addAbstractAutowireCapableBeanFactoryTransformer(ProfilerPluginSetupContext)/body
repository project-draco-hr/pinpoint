{
  context.addClassFileTransformer("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentContext,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentContext.getInstrumentClass(loader,className,classfileBuffer);
      BeanMethodTransformer beanTransformer=new BeanMethodTransformer();
      ObjectRecipe beanFilterRecipe=ObjectRecipe.byStaticFactory("com.navercorp.pinpoint.plugin.spring.beans.interceptor.TargetBeanFilter","of",context.getConfig());
      InstrumentMethod createBeanInstance=target.getDeclaredMethod("createBeanInstance","java.lang.String","org.springframework.beans.factory.support.RootBeanDefinition","java.lang.Object[]");
      createBeanInstance.addInterceptor("com.navercorp.pinpoint.plugin.spring.beans.interceptor.CreateBeanInstanceInterceptor",va(beanTransformer,beanFilterRecipe));
      InstrumentMethod postProcessor=target.getDeclaredMethod("applyBeanPostProcessorsBeforeInstantiation","java.lang.Class","java.lang.String");
      postProcessor.addInterceptor("com.navercorp.pinpoint.plugin.spring.beans.interceptor.PostProcessorInterceptor",va(beanTransformer,beanFilterRecipe));
      return target.toBytecode();
    }
  }
);
}
