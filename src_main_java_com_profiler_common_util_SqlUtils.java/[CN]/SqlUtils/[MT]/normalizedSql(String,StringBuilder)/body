{
  if (sql == null) {
    return "";
  }
  final int length=sql.length();
  final StringBuilder normalized=new StringBuilder(length);
  boolean numberTokenStartEnable=true;
  for (int i=0; i < length; i++) {
    final char ch=sql.charAt(i);
switch (ch) {
case '/':
      int lookAhead1Char=lookAhead1(sql,i);
    if (lookAhead1Char == '*') {
      normalized.append("/*");
      i+=2;
      for (; i < length; i++) {
        char stateCh=sql.charAt(i);
        if (stateCh == '*') {
          if (lookAhead1(sql,i) == '/') {
            normalized.append("*/");
            i++;
            break;
          }
        }
        normalized.append(stateCh);
      }
      break;
    }
 else     if (lookAhead1Char == '/') {
      normalized.append("//");
      i+=2;
      for (; i < length; i++) {
        char stateCh=sql.charAt(i);
        if (stateCh == '\n') {
          normalized.append(stateCh);
          break;
        }
        normalized.append(stateCh);
      }
      break;
    }
 else {
      numberTokenStartEnable=true;
      normalized.append(ch);
      break;
    }
case '-':
  if (lookAhead1(sql,i) == '-') {
    normalized.append("--");
    i+=2;
    for (; i < length; i++) {
      char stateCh=sql.charAt(i);
      if (stateCh == '\n') {
        normalized.append(stateCh);
        break;
      }
      normalized.append(stateCh);
    }
    break;
  }
 else {
    numberTokenStartEnable=true;
    normalized.append(ch);
    break;
  }
case '\'':
if (lookAhead1(sql,i) == '\'') {
  normalized.append("''");
  i+=2;
  break;
}
 else {
  normalized.append('\'');
  i++;
  for (; i < length; i++) {
    char stateCh=sql.charAt(i);
    if (stateCh == '\'') {
      if (lookAhead1(sql,i) == '\'') {
        i++;
        outputParam.append("''");
        continue;
      }
 else {
        normalized.append(SYMBOL_REPLACE);
        normalized.append('\'');
        outputParam.append(',');
        break;
      }
    }
    outputParam.append(stateCh);
  }
  break;
}
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
if (numberTokenStartEnable) {
normalized.append('#');
outputParam.append(ch);
i++;
tokenEnd: for (; i < length; i++) {
  char stateCh=sql.charAt(i);
switch (stateCh) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case '.':
case 'E':
    outputParam.append(stateCh);
  break;
default :
i--;
break tokenEnd;
}
}
break;
}
 else {
normalized.append(ch);
break;
}
case ' ':
case '\t':
case '\n':
case '\r':
numberTokenStartEnable=true;
normalized.append(ch);
break;
case '*':
case '+':
case '%':
case '=':
case '<':
case '>':
case '&':
case '|':
case '^':
case '~':
case '!':
numberTokenStartEnable=true;
normalized.append(ch);
break;
case '(':
case ')':
case ',':
case ';':
numberTokenStartEnable=true;
normalized.append(ch);
break;
case '.':
case '_':
case '@':
numberTokenStartEnable=false;
normalized.append(ch);
break;
default :
if (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z') {
numberTokenStartEnable=false;
}
 else {
numberTokenStartEnable=true;
}
normalized.append(ch);
break;
}
}
return normalized.toString();
}
