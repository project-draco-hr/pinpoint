{
  if (group != null && policy == null) {
    policy=ExecutionPolicy.BOUNDARY;
  }
  CtClass invoker=behavior.getDeclaringClass().getClassPool().makeClass("com.navercorp.pinpoint.profiler.generated.InterceptorInvoker" + interceptorId);
  String fieldDeclaration="private static final " + interceptor.getClass().getName() + " INTERCEPTOR = ("+ interceptor.getClass().getName()+ ") "+ InterceptorRegistry.class.getName()+ ".findInterceptor("+ interceptorId+ ");";
  logger.debug(fieldDeclaration);
  CtField interceptorField=CtField.make(fieldDeclaration,invoker);
  invoker.addField(interceptorField);
  CtField groupField=CtField.make("private static " + InterceptorGroup.class.getName() + " group;",invoker);
  CtField policyField=CtField.make("private static " + ExecutionPolicy.class.getName() + " policy;",invoker);
  invoker.addField(groupField);
  invoker.addField(policyField);
  invoker.addMethod(CtNewMethod.make("public static void setGroup(" + InterceptorGroup.class.getName() + " g) { group = g; }",invoker));
  invoker.addMethod(CtNewMethod.make("public static void setPolicy(" + ExecutionPolicy.class.getName() + " p) { policy = p; }",invoker));
  StringBuilder beforeBuilder=new StringBuilder("public static void before(");
  Method before=getBefore(interceptor.getClass());
  int index=0;
  for (  Class<?> paramType : before.getParameterTypes()) {
    if (index != 0) {
      beforeBuilder.append(',');
    }
    String typeName=JavaAssistUtils.toPinpointParameterType(paramType);
    beforeBuilder.append(typeName);
    beforeBuilder.append(" arg");
    beforeBuilder.append(index);
    index++;
  }
  beforeBuilder.append(") { try { ");
  beforeBuilder.append("if (group.getCurrentInvocation().tryEnter(policy)) {");
  beforeBuilder.append("INTERCEPTOR.before(");
  for (int i=0; i < index; i++) {
    if (i != 0) {
      beforeBuilder.append(',');
    }
    beforeBuilder.append("arg");
    beforeBuilder.append(i);
  }
  String global=InterceptorInvoker.class.getName();
  beforeBuilder.append("); } else { " + global + ".logger.log(java.util.logging.Level.FINE, \"tryEnter() returns false: interceptorGroupTransaction: "+ group.getName()+ ", policy: "+ policy+ ". Skip interceptor "+ interceptor.getClass().getName()+ "\"); }}");
  beforeBuilder.append("catch (Throwable t) {");
  beforeBuilder.append("    if (" + global + ".throwException) { throw new RuntimeException(t); }");
  beforeBuilder.append("    else { " + global + ".logger.log(java.util.logging.Level.WARNING, \"Excetpion occured from interceptor\", t); }");
  beforeBuilder.append("}}");
  String beforeBody=beforeBuilder.toString();
  logger.debug(beforeBody);
  invoker.addMethod(CtNewMethod.make(beforeBody,invoker));
  StringBuilder afterBuilder=new StringBuilder("public static void after(");
  Method after=getAfter(interceptor.getClass());
  index=0;
  for (  Class<?> paramType : after.getParameterTypes()) {
    if (index != 0) {
      afterBuilder.append(',');
    }
    String typeName=JavaAssistUtils.toPinpointParameterType(paramType);
    afterBuilder.append(typeName);
    afterBuilder.append(" arg");
    afterBuilder.append(index);
    index++;
  }
  afterBuilder.append(") { try { ");
  afterBuilder.append(InterceptorGroupInvocation.class.getName() + " transaction = group.getCurrentInvocation();");
  afterBuilder.append("if (transaction.canLeave(policy)) { INTERCEPTOR.after(");
  for (int i=0; i < index; i++) {
    if (i != 0) {
      afterBuilder.append(',');
    }
    afterBuilder.append("arg");
    afterBuilder.append(i);
  }
  afterBuilder.append("); transaction.leave(policy);} else { " + global + ".logger.log(java.util.logging.Level.FINE, \"canLeave() returns false: interceptorGroupTransaction: "+ group.getName()+ ", policy: "+ policy+ ". Skip interceptor "+ interceptor.getClass().getName()+ "\"); }}");
  afterBuilder.append("catch (Throwable t) {");
  afterBuilder.append("    if (" + global + ".throwException) { throw new RuntimeException(t); }");
  afterBuilder.append("    else { " + global + ".logger.log(java.util.logging.Level.WARNING, \"Excetpion occured from interceptor\", t); }");
  afterBuilder.append("}}");
  String afterBody=afterBuilder.toString();
  logger.debug(afterBody);
  invoker.addMethod(CtNewMethod.make(afterBody,invoker));
  Class<?> result=invoker.toClass(declaringClass.getClassLoader(),null);
  logger.debug("Created class: " + result);
  result.getMethod("setGroup",InterceptorGroup.class).invoke(null,group);
  result.getMethod("setPolicy",ExecutionPolicy.class).invoke(null,policy);
  return result;
}
