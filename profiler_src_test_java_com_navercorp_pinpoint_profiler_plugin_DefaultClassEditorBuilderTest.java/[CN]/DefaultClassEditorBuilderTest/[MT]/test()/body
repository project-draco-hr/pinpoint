{
  ByteCodeInstrumentor instrumentor=mock(ByteCodeInstrumentor.class);
  TraceContext traceContext=mock(TraceContext.class);
  InstrumentClass aClass=mock(InstrumentClass.class);
  MethodInfo aMethod=mock(MethodInfo.class);
  MethodDescriptor aDescriptor=mock(MethodDescriptor.class);
  Scope aScope=mock(Scope.class);
  ClassLoader classLoader=getClass().getClassLoader();
  String methodName="someMethod";
  Class<?>[] parameterTypes=new Class<?>[]{String.class};
  String[] parameterTypeNames=TypeUtils.toClassNames(parameterTypes);
  when(instrumentor.getScope(SCOPE_NAME)).thenReturn(aScope);
  when(aClass.getDeclaredMethod(methodName,parameterTypeNames)).thenReturn(aMethod);
  when(aMethod.getName()).thenReturn(methodName);
  when(aMethod.getParameterTypes()).thenReturn(parameterTypeNames);
  when(aMethod.getDescriptor()).thenReturn(aDescriptor);
  when(aClass.addInterceptor(eq(methodName),eq(parameterTypeNames),isA(Interceptor.class))).thenReturn(0);
  DefaultProfilerPluginContext context=new DefaultProfilerPluginContext(null);
  DefaultClassEditorBuilder builder=new DefaultClassEditorBuilder(context);
  builder.injectMetadata("a","java.util.HashMap");
  builder.injectFieldSnooper("someField");
  MethodEditorBuilder ib=builder.editMethod(methodName,parameterTypeNames);
  ib.injectInterceptor("com.navercorp.pinpoint.profiler.plugin.TestInterceptor","provided");
  ClassEditor editor=builder.build(traceContext,instrumentor);
  editor.edit(classLoader,aClass);
  verify(aClass).addInterceptor(eq(methodName),isA(String[].class),isA(Interceptor.class));
  verify(aClass).addTraceValue(MetadataAccessor.get(0).getType(),"new java.util.HashMap();");
  verify(aClass).addGetter(FieldSnooper.get(0).getType(),"someField");
}
