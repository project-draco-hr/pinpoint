{
  ByteCodeInstrumentor instrumentor=mock(ByteCodeInstrumentor.class);
  TraceContext traceContext=mock(TraceContext.class);
  InstrumentClass aClass=mock(InstrumentClass.class);
  MethodInfo aMethod=mock(MethodInfo.class);
  MethodDescriptor aDescriptor=mock(MethodDescriptor.class);
  DefaultPluginClassLoaderFactory classLoaderFactory=mock(DefaultPluginClassLoaderFactory.class);
  DefaultAgent agent=mock(DefaultAgent.class);
  ClassLoader classLoader=getClass().getClassLoader();
  ClassLoader childClassLoader=new URLClassLoader(new URL[0],classLoader);
  String className="someClass";
  String methodName="someMethod";
  byte[] classFileBuffer=new byte[0];
  Class<?>[] parameterTypes=new Class<?>[]{String.class};
  String[] parameterTypeNames=TypeUtils.toClassNames(parameterTypes);
  when(agent.getByteCodeInstrumentor()).thenReturn(instrumentor);
  when(agent.getTraceContext()).thenReturn(traceContext);
  when(agent.getPluginClassLoaderFactory()).thenReturn(classLoaderFactory);
  when(classLoaderFactory.get(classLoader)).thenReturn(childClassLoader);
  when(instrumentor.getClass(classLoader,className,classFileBuffer)).thenReturn(aClass);
  when(aClass.getDeclaredMethod(methodName,parameterTypeNames)).thenReturn(aMethod);
  when(aMethod.getName()).thenReturn(methodName);
  when(aMethod.getParameterTypes()).thenReturn(parameterTypeNames);
  when(aMethod.getDescriptor()).thenReturn(aDescriptor);
  when(aClass.addInterceptor(eq(methodName),eq(parameterTypeNames),isA(Interceptor.class))).thenReturn(0);
  DefaultProfilerPluginContext context=new DefaultProfilerPluginContext(agent);
  DefaultClassFileTransformerBuilder builder=new DefaultClassFileTransformerBuilder(context,"TargetClass");
  builder.injectMetadata("a","java.util.HashMap");
  builder.injectFieldAccessor("someField");
  MethodTransformerBuilder ib=builder.editMethod(methodName,parameterTypeNames);
  ib.injectInterceptor("com.navercorp.pinpoint.profiler.plugin.TestInterceptor","provided");
  ClassFileTransformer transformer=builder.build();
  transformer.transform(classLoader,className,null,null,classFileBuffer);
  verify(aClass).addInterceptor(eq(methodName),isA(String[].class),isA(Interceptor.class));
  verify(aClass).addTraceValue(MetadataAccessor.get(0).getType(),"new java.util.HashMap();");
  verify(aClass).addGetter(FieldAccessor.get(0).getType(),"someField");
}
