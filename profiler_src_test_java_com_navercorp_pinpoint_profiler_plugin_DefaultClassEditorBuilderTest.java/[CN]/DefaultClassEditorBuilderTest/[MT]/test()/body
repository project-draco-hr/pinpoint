{
  JavassistClassPool pool=mock(JavassistClassPool.class);
  TraceContext traceContext=mock(TraceContext.class);
  InstrumentClass aClass=mock(InstrumentClass.class);
  InstrumentMethod aMethod=mock(InstrumentMethod.class);
  MethodDescriptor aDescriptor=mock(MethodDescriptor.class);
  DefaultAgent agent=mock(DefaultAgent.class);
  DefaultProfilerPluginContext context=new DefaultProfilerPluginContext(agent,new TestProfilerPluginClassLoader());
  ClassLoader classLoader=getClass().getClassLoader();
  String className="someClass";
  String methodName="someMethod";
  byte[] classFileBuffer=new byte[0];
  Class<?>[] parameterTypes=new Class<?>[]{String.class};
  String[] parameterTypeNames=TypeUtils.toClassNames(parameterTypes);
  when(agent.getClassPool()).thenReturn(pool);
  when(agent.getTraceContext()).thenReturn(traceContext);
  when(pool.getClass(context,classLoader,className,classFileBuffer)).thenReturn(aClass);
  when(aClass.getDeclaredMethod(methodName,parameterTypeNames)).thenReturn(aMethod);
  when(aMethod.getName()).thenReturn(methodName);
  when(aMethod.getParameterTypes()).thenReturn(parameterTypeNames);
  when(aMethod.getDescriptor()).thenReturn(aDescriptor);
  when(aClass.addInterceptor(eq(methodName),eq(parameterTypeNames),isA(Interceptor.class))).thenReturn(0);
  DefaultClassFileTransformerBuilder builder=new DefaultClassFileTransformerBuilder(context,"TargetClass");
  builder.injectField("some.accessor.Type","java.util.HashMap");
  builder.injectGetter("some.getter.Type","someField");
  MethodTransformerBuilder ib=builder.editMethod(methodName,parameterTypeNames);
  ib.injectInterceptor("com.navercorp.pinpoint.profiler.plugin.TestInterceptor","provided");
  ClassFileTransformer transformer=builder.build();
  transformer.transform(classLoader,className,null,null,classFileBuffer);
  verify(aMethod).addInterceptor(eq("com.navercorp.pinpoint.profiler.plugin.TestInterceptor"),(InterceptorGroup)isNull(),(ExecutionPolicy)isNull(),eq("provided"));
  verify(aClass).addField("some.accessor.Type","new java.util.HashMap();");
  verify(aClass).addGetter("some.getter.Type","someField");
}
