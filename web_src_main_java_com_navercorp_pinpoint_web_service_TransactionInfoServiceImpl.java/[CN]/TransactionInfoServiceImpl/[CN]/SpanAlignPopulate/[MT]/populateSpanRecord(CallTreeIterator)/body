{
  if (callTreeIterator == null) {
    throw new NullPointerException("callTreeIterator must not be null");
  }
  final List<Record> recordList=new ArrayList<>(callTreeIterator.size() * 2);
  final RecordFactory factory=new RecordFactory(registry,annotationKeyRegistryService);
  while (callTreeIterator.hasNext()) {
    final CallTreeNode node=callTreeIterator.next();
    if (node == null) {
      logger.warn("Corrupt CallTree found : {}",callTreeIterator.toString());
      throw new IllegalStateException("CallTree corrupted");
    }
    final SpanAlign align=node.getValue();
    final String argument=getArgument(align);
    final Record record=factory.get(node,argument);
    recordList.add(record);
    if (align.hasException()) {
      final Record exceptionRecord=factory.getException(record.getTab() + 1,record.getId(),align);
      if (exceptionRecord != null) {
        recordList.add(exceptionRecord);
      }
    }
    if (!align.getAnnotationBoList().isEmpty()) {
      final List<Record> annotations=factory.getAnnotations(record.getTab() + 1,record.getId(),align);
      recordList.addAll(annotations);
    }
    if (align.getRemoteAddr() != null) {
      final Record remoteAddressRecord=factory.getParameter(record.getTab() + 1,record.getId(),"REMOTE_ADDRESS",align.getRemoteAddr());
      recordList.add(remoteAddressRecord);
    }
  }
  return recordList;
}
