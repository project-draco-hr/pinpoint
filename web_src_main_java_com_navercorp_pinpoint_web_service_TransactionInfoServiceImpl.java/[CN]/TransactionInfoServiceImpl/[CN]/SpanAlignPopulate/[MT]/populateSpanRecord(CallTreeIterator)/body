{
  if (callTreeIterator == null) {
    throw new NullPointerException("callTreeIterator must not be null");
  }
  final List<Record> recordList=new ArrayList<Record>(callTreeIterator.size() * 2);
  while (callTreeIterator.hasNext()) {
    final CallTreeNode node=callTreeIterator.next();
    final SpanAlign spanAlign=node.getValue();
    spanAlign.setId(getNextId());
    if (spanAlign.isSpan()) {
      SpanBo spanBo=spanAlign.getSpanBo();
      String argument=getRpcArgument(spanBo);
      final long begin=spanBo.getStartTime();
      final long elapsed=spanBo.getElapsed();
      final int spanBoSequence=spanAlign.getId();
      int parentSequence;
      final CallTreeNode prev=node.getParent();
      if (prev == null) {
        parentSequence=0;
      }
 else {
        parentSequence=prev.getValue().getId();
      }
      logger.debug("apiId={}",spanBo.getApiId());
      logger.debug("spanBoSequence:{}, parentSequence:{}",spanBoSequence,parentSequence);
      String method=AnnotationUtils.findApiAnnotation(spanBo.getAnnotationBoList());
      if (method != null) {
        ApiDescription apiDescription=apiDescriptionParser.parse(method);
        Record record=new Record(spanAlign.getDepth(),spanBoSequence,parentSequence,true,apiDescription.getSimpleMethodDescription(),argument,begin,elapsed,spanAlign.getGap(),spanBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanBo.getServiceType()),null,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId(),spanAlign.getExecutionMilliseconds());
        record.setSimpleClassName(apiDescription.getSimpleClassName());
        record.setFullApiDescription(method);
        recordList.add(record);
      }
 else {
        String apiTag=AnnotationUtils.findApiTagAnnotation(spanBo.getAnnotationBoList());
        if (apiTag != null) {
          Record record=new Record(spanAlign.getDepth(),spanBoSequence,parentSequence,true,apiTag,argument,begin,elapsed,spanAlign.getGap(),spanBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanBo.getServiceType()),null,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId(),spanAlign.getExecutionMilliseconds());
          record.setSimpleClassName("");
          record.setFullApiDescription("");
          recordList.add(record);
        }
 else {
          AnnotationKey apiMetaDataError=getApiMetaDataError(spanBo.getAnnotationBoList());
          Record record=new Record(spanAlign.getDepth(),spanBoSequence,parentSequence,true,apiMetaDataError.getName(),argument,begin,elapsed,spanAlign.getGap(),spanBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanBo.getServiceType()),null,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId(),spanAlign.getExecutionMilliseconds());
          record.setSimpleClassName("");
          record.setFullApiDescription("");
          recordList.add(record);
        }
      }
      final Record exceptionRecord=getExceptionRecord(spanAlign.getDepth(),spanAlign,spanBoSequence);
      if (exceptionRecord != null) {
        recordList.add(exceptionRecord);
      }
      List<Record> annotationRecord=createAnnotationRecord(spanAlign.getDepth() + 1,spanBoSequence,spanBo.getAnnotationBoList());
      recordList.addAll(annotationRecord);
      if (spanBo.getRemoteAddr() != null) {
        Record remoteAddress=createParameterRecord(spanAlign.getDepth() + 1,spanBoSequence,"REMOTE_ADDRESS",spanBo.getRemoteAddr());
        recordList.add(remoteAddress);
      }
    }
 else {
      SpanEventBo spanEventBo=spanAlign.getSpanEventBo();
      SpanBo spanBo=spanAlign.getSpanBo();
      String argument=getDisplayArgument(spanEventBo);
      final int spanBoEventSequence=spanAlign.getId();
      final CallTreeNode parent=node.getParent();
      if (parent == null) {
        throw new IllegalStateException("prev is null. nodes=" + callTreeIterator);
      }
      final int parentSequence=parent.getValue().getId();
      logger.debug("spanBoEventSequence:{}, parentSequence:{}",spanBoEventSequence,parentSequence);
      String title="";
      String className="";
      String apiDescriptor="";
      final AnnotationBo annotation=AnnotationUtils.findAnnotationBo(spanEventBo.getAnnotationBoList(),AnnotationKey.API_METADATA);
      if (annotation != null) {
        ApiMetaDataBo apiMetaData=(ApiMetaDataBo)annotation.getValue();
        apiDescriptor=getApiInfo(apiMetaData);
        title=apiDescriptor;
        if (apiMetaData.getType() == 0) {
          ApiDescription apiDescription=apiDescriptionParser.parse(apiDescriptor);
          title=apiDescription.getSimpleMethodDescription();
          className=apiDescription.getSimpleClassName();
        }
      }
 else {
        AnnotationKey apiMetaDataError=getApiMetaDataError(spanEventBo.getAnnotationBoList());
        title=apiMetaDataError.getName();
      }
      String destinationId=spanEventBo.getDestinationId();
      long begin=spanAlign.getSpanBo().getStartTime() + spanEventBo.getStartElapsed();
      long elapsed=spanEventBo.getEndElapsed();
      Record record=new Record(spanAlign.getDepth(),spanBoEventSequence,parentSequence,true,title,argument,begin,elapsed,spanAlign.getGap(),spanEventBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanEventBo.getServiceType()),destinationId,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId(),spanAlign.getExecutionMilliseconds());
      record.setSimpleClassName(className);
      record.setFullApiDescription(apiDescriptor);
      recordList.add(record);
      final Record exceptionRecord=getExceptionRecord(spanAlign.getDepth(),spanAlign,spanBoEventSequence);
      if (exceptionRecord != null) {
        recordList.add(exceptionRecord);
      }
      List<Record> annotationRecord=createAnnotationRecord(spanAlign.getDepth() + 1,spanBoEventSequence,spanEventBo.getAnnotationBoList());
      recordList.addAll(annotationRecord);
    }
  }
  return recordList;
}
