{
  if (spanAlignList == null) {
    throw new NullPointerException("spanAlignList must not be null");
  }
  final List<Record> recordList=new ArrayList<Record>(spanAlignList.size() * 2);
  for (int i=0; i < spanAlignList.size(); i++) {
    final SpanAlign spanAlign=spanAlignList.get(i);
    if (i == 0) {
      if (!spanAlign.isSpan()) {
        throw new IllegalArgumentException("root is not span");
      }
      final SpanDepth spanDepth=new SpanDepth(spanAlign,getNextId(),spanAlign.getSpanBo().getStartTime());
      stack.push(spanDepth);
    }
 else {
      final SpanDepth lastSpanDepth=stack.getLast();
      final int parentDepth=lastSpanDepth.getSpanAlign().getDepth();
      final int currentDepth=spanAlign.getDepth();
      logger.debug("parentDepth:{} currentDepth:{} sequence:{}",parentDepth,currentDepth,lastSpanDepth.getId());
      if (parentDepth < spanAlign.getDepth()) {
        final SpanDepth last=stack.getLast();
        final long beforeStartTime=getStartTime(last.getSpanAlign());
        final SpanDepth spanDepth=new SpanDepth(spanAlign,getNextId(),beforeStartTime);
        stack.push(spanDepth);
      }
 else {
        if (parentDepth > currentDepth) {
          SpanDepth lastPopSpanDepth;
          while (true) {
            logger.trace("pop");
            lastPopSpanDepth=stack.pop();
            SpanDepth popLast=stack.getLast();
            if (popLast.getSpanAlign().getDepth() < currentDepth) {
              break;
            }
          }
          final long beforeLastEndTime=getLastTime(lastPopSpanDepth.getSpanAlign());
          stack.push(new SpanDepth(spanAlign,getNextId(),beforeLastEndTime));
        }
 else {
          final SpanDepth before=stack.pop();
          final long beforeLastEndTime=getLastTime(before.getSpanAlign());
          stack.push(new SpanDepth(spanAlign,getNextId(),beforeLastEndTime));
        }
      }
    }
    if (spanAlign.isSpan()) {
      SpanBo spanBo=spanAlign.getSpanBo();
      String argument=getRpcArgument(spanBo);
      final long begin=spanBo.getStartTime();
      final long elapsed=spanBo.getElapsed();
      final int spanBoSequence=stack.getLast().getId();
      int parentSequence;
      final SpanDepth parent=stack.getParent();
      if (parent == null) {
        parentSequence=0;
      }
 else {
        parentSequence=parent.getId();
      }
      logger.debug("apiId={}",spanBo.getApiId());
      logger.debug("spanBoSequence:{}, parentSequence:{}",spanBoSequence,parentSequence);
      String method=AnnotationUtils.findApiAnnotation(spanBo.getAnnotationBoList());
      if (method != null) {
        ApiDescription apiDescription=apiDescriptionParser.parse(method);
        Record record=new Record(spanAlign.getDepth(),spanBoSequence,parentSequence,true,apiDescription.getSimpleMethodDescription(),argument,begin,elapsed,getGap(stack),spanBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanBo.getServiceType()),null,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId());
        record.setSimpleClassName(apiDescription.getSimpleClassName());
        record.setFullApiDescription(method);
        recordList.add(record);
      }
 else {
        String apiTag=AnnotationUtils.findApiTagAnnotation(spanBo.getAnnotationBoList());
        if (apiTag != null) {
          Record record=new Record(spanAlign.getDepth(),spanBoSequence,parentSequence,true,apiTag,argument,begin,elapsed,getGap(stack),spanBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanBo.getServiceType()),null,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId());
          record.setSimpleClassName("");
          record.setFullApiDescription("");
          recordList.add(record);
        }
 else {
          AnnotationKey apiMetaDataError=getApiMetaDataError(spanBo.getAnnotationBoList());
          Record record=new Record(spanAlign.getDepth(),spanBoSequence,parentSequence,true,apiMetaDataError.getName(),argument,begin,elapsed,getGap(stack),spanBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanBo.getServiceType()),null,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId());
          record.setSimpleClassName("");
          record.setFullApiDescription("");
          recordList.add(record);
        }
      }
      final Record exceptionRecord=getExceptionRecord(spanAlign,spanBoSequence);
      if (exceptionRecord != null) {
        recordList.add(exceptionRecord);
      }
      List<Record> annotationRecord=createAnnotationRecord(spanAlign.getDepth() + 1,spanBoSequence,spanBo.getAnnotationBoList());
      recordList.addAll(annotationRecord);
      if (spanBo.getRemoteAddr() != null) {
        Record remoteAddress=createParameterRecord(spanAlign.getDepth() + 1,spanBoSequence,"REMOTE_ADDRESS",spanBo.getRemoteAddr());
        recordList.add(remoteAddress);
      }
    }
 else {
      SpanEventBo spanEventBo=spanAlign.getSpanEventBo();
      SpanBo spanBo=spanAlign.getSpanBo();
      String argument=getDisplayArgument(spanEventBo);
      final int spanBoEventSequence=stack.getLast().getId();
      final SpanDepth parent=stack.getParent();
      if (parent == null) {
        throw new IllegalStateException("parent is null. stack:" + stack);
      }
      final int parentSequence=parent.getId();
      logger.debug("spanBoEventSequence:{}, parentSequence:{}",spanBoEventSequence,parentSequence);
      final String method=AnnotationUtils.findApiAnnotation(spanEventBo.getAnnotationBoList());
      if (method != null) {
        ApiDescription apiDescription=apiDescriptionParser.parse(method);
        String destinationId=spanEventBo.getDestinationId();
        long begin=spanAlign.getSpanBo().getStartTime() + spanEventBo.getStartElapsed();
        long elapsed=spanEventBo.getEndElapsed();
        int asyncParentId=-1;
        long gap=0;
        if (isFirstAsyncEvent(spanAlign)) {
          final SpanDepth asyncParentDepth=findAsyncParent(stack,spanAlign.getSpanEventBo().getAsyncId());
          if (asyncParentDepth != null) {
            asyncParentId=asyncParentDepth.getId();
            gap=spanAlign.getSpanEventBo().getStartElapsed() - asyncParentDepth.getSpanAlign().getSpanEventBo().getStartElapsed();
          }
        }
 else {
          gap=getGap(stack);
        }
        Record record=new Record(spanAlign.getDepth(),spanBoEventSequence,parentSequence,true,apiDescription.getSimpleMethodDescription(),argument,begin,elapsed,gap,spanEventBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanEventBo.getServiceType()),destinationId,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId());
        record.setSimpleClassName(apiDescription.getSimpleClassName());
        record.setFullApiDescription(method);
        recordList.add(record);
      }
 else {
        AnnotationKey apiMetaDataError=getApiMetaDataError(spanEventBo.getAnnotationBoList());
        String destinationId=spanEventBo.getDestinationId();
        long begin=spanAlign.getSpanBo().getStartTime() + spanEventBo.getStartElapsed();
        long elapsed=spanEventBo.getEndElapsed();
        Record record=new Record(spanAlign.getDepth(),spanBoEventSequence,parentSequence,true,apiMetaDataError.getName(),argument,begin,elapsed,getGap(stack),spanEventBo.getAgentId(),spanBo.getApplicationId(),registry.findServiceType(spanEventBo.getServiceType()),destinationId,spanAlign.isHasChild(),false,spanBo.getTransactionId(),spanBo.getSpanId());
        record.setSimpleClassName("");
        record.setFullApiDescription(method);
        recordList.add(record);
      }
      final Record exceptionRecord=getExceptionRecord(spanAlign,spanBoEventSequence);
      if (exceptionRecord != null) {
        recordList.add(exceptionRecord);
      }
      List<Record> annotationRecord=createAnnotationRecord(spanAlign.getDepth() + 1,spanBoEventSequence,spanEventBo.getAnnotationBoList());
      recordList.addAll(annotationRecord);
    }
  }
  return recordList;
}
