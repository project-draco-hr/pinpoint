{
  if (init.get()) {
    return;
  }
  Range range=Range.createUncheckedRange(timeSlotEndTime - slotInterval,timeSlotEndTime);
  List<String> agentIds=applicationIndexDao.selectAgentIds(application.getName());
  for (  String agentId : agentIds) {
    List<JvmGcBo> jvmGcBos=jvmGcDao.getAgentStatList(agentId,range);
    List<CpuLoadBo> cpuLoadBos=cpuLoadDao.getAgentStatList(agentId,range);
    long totalHeapSize=0;
    long usedHeapSize=0;
    long jvmCpuUsaged=0;
    for (    JvmGcBo jvmGcBo : jvmGcBos) {
      totalHeapSize+=jvmGcBo.getHeapMax();
      usedHeapSize+=jvmGcBo.getHeapUsed();
    }
    for (    CpuLoadBo cpuLoadBo : cpuLoadBos) {
      jvmCpuUsaged+=cpuLoadBo.getJvmCpuLoad() * 100;
    }
    if (!jvmGcBos.isEmpty()) {
      long percent=calculatePercent(usedHeapSize,totalHeapSize);
      agentHeapUsageRate.put(agentId,percent);
      long accruedLastGcCount=jvmGcBos.get(0).getGcOldCount();
      long accruedFirstGcCount=jvmGcBos.get(jvmGcBos.size() - 1).getGcOldCount();
      agentGcCount.put(agentId,accruedLastGcCount - accruedFirstGcCount);
    }
    if (!cpuLoadBos.isEmpty()) {
      long percent=calculatePercent(jvmCpuUsaged,100 * cpuLoadBos.size());
      agentJvmCpuUsageRate.put(agentId,percent);
    }
  }
  init.set(true);
}
