{
  PinpointServerSocket pinpointServerSocket=null;
  TestingServer ts=null;
  try {
    ts=ZookeeperTestUtils.createZookeeperServer(DEFAULT_ACCEPTOR_PORT);
    ZookeeperClusterService service=new ZookeeperClusterService(collectorConfig,clusterPointRouter);
    service.setUp();
    ZookeeperProfilerClusterManager profiler=service.getProfilerClusterManager();
    pinpointServerSocket=new PinpointServerSocket(service.getChannelStateChangeEventListener());
    pinpointServerSocket.setMessageListener(ZookeeperTestUtils.getServerMessageListener());
    pinpointServerSocket.bind("127.0.0.1",DEFAULT_ACCEPTOR_SOCKET_PORT);
    InetSocketAddress address=new InetSocketAddress("127.0.0.1",DEFAULT_ACCEPTOR_SOCKET_PORT);
    CountDownLatch latch=new CountDownLatch(2);
    List<TestSocket> socketList1=connectPoint(new ArrayList<TestSocket>(),address,doCount);
    List<TestSocket> socketList2=connectPoint(new ArrayList<TestSocket>(),address,doCount);
    WorkerJob job1=new WorkerJob(latch,socketList1,address,5);
    WorkerJob job2=new WorkerJob(latch,socketList2,address,5);
    Thread worker1=new Thread(job1);
    worker1.setDaemon(false);
    worker1.start();
    Thread worker2=new Thread(job2);
    worker2.setDaemon(false);
    worker2.start();
    latch.await();
    List<TestSocket> socketList=new ArrayList<ZookeeperProfilerClusterStressIT.TestSocket>();
    socketList.addAll(job1.getSocketList());
    socketList.addAll(job2.getSocketList());
    logger.info(profiler.getClusterData().toString());
    Assert.assertEquals(socketList.size(),profiler.getClusterData().size());
    disconnectPoint(socketList,socketList.size());
    Thread.sleep(1000);
    service.tearDown();
  }
  finally {
    closeZookeeperServer(ts);
    pinpointServerSocket.close();
  }
}
