{
  ArgsArrayInterceptor.clear();
  StaticInterceptor.clear();
  ApiIdAwareInterceptor.clear();
  BasicInterceptor.clear();
  ExceptionInterceptor.clear();
  Constructor constructor=null;
  Method method=null;
  if (methodName.equals("<init>")) {
    constructor=clazz.getConstructor(parameterTypes);
    try {
      constructor.newInstance(args);
      if (throwable) {
        fail("can't throw Throwable.");
      }
    }
 catch (    Throwable t) {
      if (!throwable) {
        throw new RuntimeException(t.getMessage());
      }
    }
  }
 else {
    method=clazz.getDeclaredMethod(methodName,parameterTypes);
    try {
      method.invoke(clazz.newInstance(),args);
      if (throwable) {
        fail("can't throw Throwable.");
      }
    }
 catch (    Throwable t) {
      if (!throwable) {
        t.printStackTrace();
        throw new RuntimeException(t.getMessage());
      }
    }
  }
  final String name=clazz.getName() + "." + methodName;
  if (interceptorClass == ArgsArrayInterceptor.class) {
    assertEquals(name,true,ArgsArrayInterceptor.before);
    assertEquals(name,true,ArgsArrayInterceptor.after);
    if (method != null && Modifier.isStatic(method.getModifiers())) {
      assertNull(name,ArgsArrayInterceptor.beforeTarget);
      assertNull(name,ArgsArrayInterceptor.afterTarget);
    }
 else     if (method != null) {
      assertNotNull(name,ArgsArrayInterceptor.beforeTarget);
      assertNotNull(name,ArgsArrayInterceptor.afterTarget);
    }
    assertEquals(name,ArgsArrayInterceptor.beforeTarget,ArgsArrayInterceptor.afterTarget);
    if (ArgsArrayInterceptor.beforeArgs != null) {
      assertEquals(name,args.length,ArgsArrayInterceptor.beforeArgs.length);
    }
    if (ArgsArrayInterceptor.afterArgs != null) {
      assertEquals(name,args.length,ArgsArrayInterceptor.afterArgs.length);
    }
    assertEquals(name,returnValue,ArgsArrayInterceptor.result);
    if (throwable) {
      assertNotNull(name,ArgsArrayInterceptor.throwable);
    }
  }
 else   if (interceptorClass == ExceptionInterceptor.class) {
    assertEquals(name,true,ExceptionInterceptor.before);
    assertEquals(name,true,ExceptionInterceptor.after);
    if (method != null && Modifier.isStatic(method.getModifiers())) {
      assertNull(name,ExceptionInterceptor.beforeTarget);
      assertNull(name,ExceptionInterceptor.afterTarget);
    }
 else     if (method != null) {
      assertNotNull(name,ExceptionInterceptor.beforeTarget);
      assertNotNull(name,ExceptionInterceptor.afterTarget);
    }
    assertEquals(name,ExceptionInterceptor.beforeTarget,ExceptionInterceptor.afterTarget);
    if (ExceptionInterceptor.beforeArgs != null) {
      assertEquals(name,args.length,ExceptionInterceptor.beforeArgs.length);
    }
    if (ExceptionInterceptor.afterArgs != null) {
      assertEquals(name,args.length,ExceptionInterceptor.afterArgs.length);
    }
    assertEquals(name,returnValue,ExceptionInterceptor.result);
    if (throwable) {
      assertNotNull(name,ExceptionInterceptor.throwable);
    }
  }
 else   if (interceptorClass == StaticInterceptor.class) {
    assertEquals(true,StaticInterceptor.before);
    assertEquals(true,StaticInterceptor.after);
    if (method != null && Modifier.isStatic(method.getModifiers())) {
      assertNull(name,StaticInterceptor.beforeTarget);
      assertNull(name,StaticInterceptor.afterTarget);
    }
 else     if (method != null) {
      assertNotNull(name,StaticInterceptor.beforeTarget);
      assertNotNull(name,StaticInterceptor.afterTarget);
    }
    assertEquals(StaticInterceptor.beforeTarget,StaticInterceptor.afterTarget);
    assertEquals(clazz.getName(),StaticInterceptor.beforeClassName);
    assertNotNull(StaticInterceptor.beforeMethodName);
    assertNotNull(StaticInterceptor.beforeParameterDescription);
    assertNotNull(StaticInterceptor.afterClassName);
    assertNotNull(StaticInterceptor.afterMethodName);
    assertNotNull(StaticInterceptor.afterParameterDescription);
    if (StaticInterceptor.beforeArgs != null) {
      assertEquals(args.length,StaticInterceptor.beforeArgs.length);
    }
    if (StaticInterceptor.afterArgs != null) {
      assertEquals(args.length,StaticInterceptor.afterArgs.length);
    }
    assertEquals(returnValue,StaticInterceptor.result);
    if (throwable) {
      assertNotNull(name,StaticInterceptor.throwable);
    }
  }
 else   if (interceptorClass == ApiIdAwareInterceptor.class) {
    assertEquals(name,true,ApiIdAwareInterceptor.before);
    assertEquals(name,true,ApiIdAwareInterceptor.after);
    if (method != null && Modifier.isStatic(method.getModifiers())) {
      assertNull(name,ApiIdAwareInterceptor.beforeTarget);
      assertNull(name,ApiIdAwareInterceptor.afterTarget);
    }
 else     if (method != null) {
      assertNotNull(name,ApiIdAwareInterceptor.beforeTarget);
      assertNotNull(name,ApiIdAwareInterceptor.afterTarget);
    }
    assertEquals(name,ApiIdAwareInterceptor.beforeTarget,ApiIdAwareInterceptor.afterTarget);
    assertEquals(99,ApiIdAwareInterceptor.beforeApiId);
    assertEquals(99,ApiIdAwareInterceptor.afterApiId);
    if (ApiIdAwareInterceptor.beforeArgs != null) {
      assertEquals(name,args.length,ApiIdAwareInterceptor.beforeArgs.length);
    }
    if (ApiIdAwareInterceptor.afterArgs != null) {
      assertEquals(name,args.length,ApiIdAwareInterceptor.afterArgs.length);
    }
    assertEquals(name,returnValue,ApiIdAwareInterceptor.result);
    if (throwable) {
      assertNotNull(name,ApiIdAwareInterceptor.throwable);
    }
  }
 else   if (interceptorClass == BasicInterceptor.class) {
    assertEquals(name,true,BasicInterceptor.before);
    assertEquals(name,true,BasicInterceptor.after);
    if (method != null && Modifier.isStatic(method.getModifiers())) {
      assertNull(name,BasicInterceptor.beforeTarget);
      assertNull(name,BasicInterceptor.afterTarget);
    }
 else     if (method != null) {
      assertNotNull(name,BasicInterceptor.beforeTarget);
      assertNotNull(name,BasicInterceptor.afterTarget);
    }
    assertEquals(name,BasicInterceptor.beforeTarget,BasicInterceptor.afterTarget);
    if (args != null && args.length >= 1) {
      assertEquals(args[0],BasicInterceptor.beforeArg0);
      assertEquals(args[0],BasicInterceptor.afterArg0);
    }
    if (args != null && args.length >= 2) {
      assertEquals(args[1],BasicInterceptor.beforeArg1);
      assertEquals(args[1],BasicInterceptor.afterArg1);
    }
    if (args != null && args.length >= 3) {
      assertEquals(args[2],BasicInterceptor.beforeArg2);
      assertEquals(args[2],BasicInterceptor.afterArg2);
    }
    if (args != null && args.length >= 4) {
      assertEquals(args[3],BasicInterceptor.beforeArg3);
      assertEquals(args[3],BasicInterceptor.afterArg3);
    }
    if (args != null && args.length >= 5) {
      assertEquals(args[4],BasicInterceptor.beforeArg4);
      assertEquals(args[4],BasicInterceptor.afterArg4);
    }
    assertEquals(name,returnValue,BasicInterceptor.result);
    if (throwable) {
      assertNotNull(name,BasicInterceptor.throwable);
    }
  }
}
