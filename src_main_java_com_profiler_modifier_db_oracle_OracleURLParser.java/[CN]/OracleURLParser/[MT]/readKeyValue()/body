{
  this.tokenizer.checkStartToken();
  KeyValue keyValue=new KeyValue();
  Token literalToken=this.tokenizer.getLiteralToken();
  keyValue.setKey(literalToken.getToken());
  this.tokenizer.checkEqualToken();
  while (true) {
    Token token=this.tokenizer.lookAheadToken();
    if (token == OracleConnectionStringTokenizer.TOKEN_KEY_END_OBJECT) {
      tokenizer.nextPosition();
      return keyValue;
    }
    if (token.getType() == OracleConnectionStringTokenizer.TYPE_KEY_START) {
      KeyValue child=readKeyValue();
      keyValue.addKeyValueList(child);
    }
 else {
      this.tokenizer.nextPosition();
      if (token.getType() == OracleConnectionStringTokenizer.TYPE_LITERAL) {
        keyValue.setValue(token.getToken());
        this.tokenizer.checkEndToken();
        return keyValue;
      }
      if (token.getType() == OracleConnectionStringTokenizer.TYPE_KEY_END) {
        Token last=tokenizer.lookAheadToken();
        if (last == OracleConnectionStringTokenizer.TOKEN_KEY_END_OBJECT) {
          tokenizer.nextPosition();
          return keyValue;
        }
      }
 else {
        throw new OracleConnectionStringException("syntax error. Expected token='literal' :" + token.getToken());
      }
    }
  }
}
