{
  try {
    long timestamp=dto.getDataTime();
    String rowName=DATE_FORMAT_YMD.format(new Date(timestamp));
    ByteBuffer row=ByteBuffer.wrap(rowName.getBytes());
    List<Mutation> mutations=new ArrayList<Mutation>();
    mutations.add(getMutation(HBASE_JVM_COLUMN_ACTIVE_THREAD_COUNT + timestamp,(dto.getActiveThreadCount() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_GC1_COUNT + timestamp,(dto.getGc1Count() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_GC1_TIME + timestamp,(dto.getGc1Time() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_GC2_COUNT + timestamp,(dto.getGc2Count() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_GC2_TIME + timestamp,(dto.getGc2Time() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_HEAP_USED + timestamp,(dto.getHeapUsed() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_HEAP_COMMITTED + timestamp,(dto.getHeapCommitted() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_NON_HEAP_USED + timestamp,(dto.getNonHeapUsed() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_NON_HEAP_COMMITTED + timestamp,(dto.getNonHeapCommitted() + "").getBytes()));
    mutations.add(getMutation(HBASE_JVM_COLUMN_PROCESS_CPU_TIME + timestamp,(dto.getProcessCPUTime() + "").getBytes()));
    client.mutateRowTs(tableNameBuffer,row,mutations,timestamp);
  }
 catch (  IOError ioe) {
    logger.error("JVMData " + ioe.getMessage());
  }
catch (  Exception e) {
    System.out.println(e.getClass().getName());
    e.printStackTrace();
  }
}
