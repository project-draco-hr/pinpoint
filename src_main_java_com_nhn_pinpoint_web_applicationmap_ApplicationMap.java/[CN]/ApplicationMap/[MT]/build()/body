{
  if (built)   return this;
  Map<String,Set<AgentInfoBo>> agentMap=rawData.getAgentMap();
  MergeableMap<String,ResponseHistogram> hostHistogramMap=new MergeableHashMap<String,ResponseHistogram>();
  for (  TransactionFlowStatistics stat : rawData) {
    if (!stat.getFromServiceType().isRpcClient()) {
      String id=stat.getFromApplicationId();
      Set<AgentInfoBo> agentSet=agentMap.get(id);
      addApplication(new Application(id,stat.getFrom(),stat.getFromServiceType(),null,agentSet));
    }
    if (!stat.getToServiceType().isRpcClient()) {
      String id=stat.getToApplicationId();
      for (      Entry<String,Host> entry : stat.getToHostList().entrySet()) {
        Host host=entry.getValue();
        ResponseHistogram histogram=host.getHistogram();
        ResponseHistogram value=new ResponseHistogram(histogram.getId(),histogram.getServiceType());
        hostHistogramMap.putOrMerge(value.getId(),value.mergeWith(histogram));
      }
      addApplication(new Application(id,stat.getTo(),stat.getToServiceType(),stat.getToHostList(),null));
    }
  }
  System.out.println("");
  System.out.println("hostHistogramMap=" + hostHistogramMap);
  System.out.println("");
  for (  Entry<String,Application> entry : applications.entrySet()) {
    Application application=entry.getValue();
    application.mapHistogram(hostHistogramMap);
  }
  indexingApplication();
  for (  TransactionFlowStatistics stat : rawData) {
    Application from=findApplication(stat.getFromApplicationId());
    Application to=findApplication(stat.getToApplicationId());
    if (to == null) {
      continue;
    }
    if (to.getServiceType().isRpcClient()) {
      if (!applicationNames.contains(to.getApplicationName())) {
        addRelation(new ApplicationRelation(from,to,stat.getToHostList()));
      }
    }
 else {
      addRelation(new ApplicationRelation(from,to,stat.getToHostList()));
    }
  }
  built=true;
  return this;
}
