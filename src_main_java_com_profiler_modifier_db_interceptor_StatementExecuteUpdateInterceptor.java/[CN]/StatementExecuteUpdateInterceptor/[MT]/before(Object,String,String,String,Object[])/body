{
  if (logger.isLoggable(Level.INFO)) {
    logger.info("before " + StringUtils.toString(target) + " "+ className+ "."+ methodName+ parameterDescription+ " args:"+ Arrays.toString(args));
  }
  if (JDBCScope.isInternal()) {
    logger.info("internal jdbc scope. skip trace");
    return;
  }
  TraceContext traceContext=TraceContext.getTraceContext();
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  trace.traceBlockBegin();
  trace.markBeforeTime();
  try {
    if (args.length > 0) {
      DatabaseInfo databaseInfo=(DatabaseInfo)this.getUrl.invoke(target);
      trace.recordRpcName(databaseInfo.getType() + "/" + databaseInfo.getDatabaseId(),databaseInfo.getUrl());
      trace.recordTerminalEndPoint(databaseInfo.getUrl());
      trace.recordAttribute("Query",args[0]);
    }
 else {
      DatabaseInfo databaseInfo=(DatabaseInfo)this.getUrl.invoke(target);
      trace.recordRpcName(databaseInfo.getType() + "/" + databaseInfo.getDatabaseId(),databaseInfo.getUrl());
      trace.recordTerminalEndPoint(databaseInfo.getUrl());
      trace.recordAttribute("Query","args size is 0");
    }
    trace.record(Annotation.ClientSend);
  }
 catch (  Exception e) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}
