{
  this.transitionAnnotation(spans,new AnnotationReplacementCallback(){
    @Override public void replacement(    SpanAlign spanAlign,    List<AnnotationBo> annotationBoList){
      AnnotationBo sqlIdAnnotation=findAnnotation(annotationBoList,AnnotationKey.SQL_ID.getCode());
      if (sqlIdAnnotation == null) {
        return;
      }
      AgentInfoBo agentInfoBo=null;
      try {
        agentInfoBo=getAgentInfoBo(spanAlign);
        logger.info("{} Agent StartTime found:{}",agentInfoBo.getAgentId(),agentInfoBo);
      }
 catch (      AgentIdNotFoundException ex) {
        AnnotationBo agentInfoNotFound=new AnnotationBo();
        agentInfoNotFound.setKey(AnnotationKey.SQL.getCode());
        agentInfoNotFound.setValue("SQL-ID not found. Cause:agentInfo not found. agentId:" + ex.getAgentId() + " startTime:"+ ex.getStartTime());
        annotationBoList.add(agentInfoNotFound);
        return;
      }
      int hashCode=(Integer)sqlIdAnnotation.getValue();
      List<SqlMetaDataBo> sqlMetaDataList=sqlMetaDataDao.getSqlMetaData(agentInfoBo.getAgentId(),hashCode,agentInfoBo.getStartTime());
      int size=sqlMetaDataList.size();
      if (size == 0) {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationKey.SQL.getCode());
        api.setValue("SQL-ID not found hashCode:" + hashCode);
        annotationBoList.add(api);
      }
 else       if (size == 1) {
        AnnotationBo sqlParamAnnotationBo=findAnnotation(annotationBoList,AnnotationKey.SQL_PARAM.getCode());
        final SqlMetaDataBo sqlMetaDataBo=sqlMetaDataList.get(0);
        if (sqlParamAnnotationBo == null) {
          AnnotationBo sqlMeta=new AnnotationBo();
          sqlMeta.setKey(AnnotationKey.SQL_METADATA.getCode());
          sqlMeta.setValue(sqlMetaDataBo.getSql());
          annotationBoList.add(sqlMeta);
          AnnotationBo sql=new AnnotationBo();
          sql.setKey(AnnotationKey.SQL.getCode());
          sql.setValue(sqlMetaDataBo.getSql());
          annotationBoList.add(sql);
        }
 else {
          logger.debug("sqlMetaDataBo:{}",sqlMetaDataBo);
          String outputParams=(String)sqlParamAnnotationBo.getValue();
          List<String> parsedOutputParams=outputParameterParser.parseOutputParameter(outputParams);
          logger.debug("outputPrams:{}, parsedOutputPrams:{}",outputParams,parsedOutputParams);
          String originalSql=sqlParser.combineOutputParams(sqlMetaDataBo.getSql(),parsedOutputParams);
          logger.debug("outputPrams{}, originalSql:{}",outputParams,originalSql);
          AnnotationBo sqlMeta=new AnnotationBo();
          sqlMeta.setKey(AnnotationKey.SQL_METADATA.getCode());
          sqlMeta.setValue(sqlMetaDataBo.getSql());
          annotationBoList.add(sqlMeta);
          AnnotationBo sql=new AnnotationBo();
          sql.setKey(AnnotationKey.SQL.getCode());
          sql.setValue(originalSql);
          annotationBoList.add(sql);
        }
      }
 else {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationKey.SQL.getCode());
        api.setValue(collisionSqlHashCodeMessage(hashCode,sqlMetaDataList));
        annotationBoList.add(api);
      }
    }
  }
);
}
