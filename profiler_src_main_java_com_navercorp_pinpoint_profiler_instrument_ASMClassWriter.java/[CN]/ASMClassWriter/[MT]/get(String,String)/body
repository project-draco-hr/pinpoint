{
  if (type1 == null || type1.equals(OBJECT) || type2 == null || type2.equals(OBJECT)) {
    return OBJECT;
  }
  if (type1.equals(type2)) {
    return type1;
  }
  if (type1.equals(className)) {
    return getCommonSuperClass(superClassName,type2);
  }
 else   if (type2.equals(className)) {
    return getCommonSuperClass(type1,superClassName);
  }
  ClassReader type1ClassReader=getClassReader(type1);
  ClassReader type2ClassReader=getClassReader(type2);
  if (type1ClassReader == null || type2ClassReader == null) {
    logger.warn("Skip get common super class. not found class {type1={}, reader={}}, {type2={}, reader={}}",type1,type1ClassReader,type2,type2ClassReader);
    return OBJECT;
  }
  if (isInterface(type1ClassReader)) {
    String interfaceName=type1;
    if (isImplements(interfaceName,type2ClassReader)) {
      return interfaceName;
    }
    if (isInterface(type2ClassReader)) {
      interfaceName=type2;
      if (isImplements(interfaceName,type1ClassReader)) {
        return interfaceName;
      }
    }
    return OBJECT;
  }
  if (isInterface(type2ClassReader)) {
    String interfaceName=type2;
    if (isImplements(interfaceName,type1ClassReader)) {
      return interfaceName;
    }
    return OBJECT;
  }
  final Set<String> superClassNames=new HashSet<String>();
  superClassNames.add(type1);
  superClassNames.add(type2);
  String type1SuperClassName=type1ClassReader.getSuperName();
  if (!superClassNames.add(type1SuperClassName)) {
    return type1SuperClassName;
  }
  String type2SuperClassName=type2ClassReader.getSuperName();
  if (!superClassNames.add(type2SuperClassName)) {
    return type2SuperClassName;
  }
  while (type1SuperClassName != null || type2SuperClassName != null) {
    if (type1SuperClassName != null) {
      type1SuperClassName=getSuperClassName(type1SuperClassName);
      if (type1SuperClassName != null) {
        if (!superClassNames.add(type1SuperClassName)) {
          return type1SuperClassName;
        }
      }
    }
    if (type2SuperClassName != null) {
      type2SuperClassName=getSuperClassName(type2SuperClassName);
      if (type2SuperClassName != null) {
        if (!superClassNames.add(type2SuperClassName)) {
          return type2SuperClassName;
        }
      }
    }
  }
  return OBJECT;
}
