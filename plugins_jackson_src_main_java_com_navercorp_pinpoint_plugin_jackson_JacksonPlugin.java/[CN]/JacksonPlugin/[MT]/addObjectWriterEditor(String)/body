{
  transformTemplate.transform(clazzName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor Instrumentor,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=Instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
      for (      InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name("writeValue"))) {
        addInterceptor(method,BASIC_METHOD_INTERCEPTOR,va(JacksonConstants.SERVICE_TYPE));
      }
      for (      InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name("writeValueAsString"))) {
        addInterceptor(method,WRITE_VALUE_AS_STRING_INTERCEPTOR);
      }
      for (      InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name("writeValueAsBytes"))) {
        addInterceptor(method,WRITE_VALUE_AS_BYTES_INTERCEPTOR);
      }
      return target.toBytecode();
    }
  }
);
}
