{
  transformTemplate.transform(clazzName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentContext,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentContext.getInstrumentClass(classLoader,className,classfileBuffer);
      final InstrumentMethod constructor1=target.getConstructor();
      addInterceptor(constructor1,BASIC_METHOD_INTERCEPTOR,va(JacksonConstants.SERVICE_TYPE));
      final InstrumentMethod constructor2=target.getConstructor("org.codehaus.jackson.JsonFactory");
      addInterceptor(constructor2,BASIC_METHOD_INTERCEPTOR,va(JacksonConstants.SERVICE_TYPE));
      final InstrumentMethod constructor3=target.getConstructor("org.codehaus.jackson.JsonFactory","org.codehaus.jackson.map.SerializerProvider","org.codehaus.jackson.map.DeserializerProvider");
      addInterceptor(constructor3,BASIC_METHOD_INTERCEPTOR,va(JacksonConstants.SERVICE_TYPE));
      final InstrumentMethod constructor4=target.getConstructor("org.codehaus.jackson.map.SerializerFactory");
      addInterceptor(constructor4,BASIC_METHOD_INTERCEPTOR,va(JacksonConstants.SERVICE_TYPE));
      final InstrumentMethod constructor5=target.getConstructor("org.codehaus.jackson.JsonFactory","org.codehaus.jackson.map.SerializerProvider","org.codehaus.jackson.map.DeserializerProvider","org.codehaus.jackson.map.SerializationConfig","org.codehaus.jackson.map.DeserializationConfig");
      addInterceptor(constructor5,BASIC_METHOD_INTERCEPTOR,va(JacksonConstants.SERVICE_TYPE));
      for (      InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name("writeValue"))) {
        addInterceptor(method,BASIC_METHOD_INTERCEPTOR,va(JacksonConstants.SERVICE_TYPE));
      }
      for (      InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name("writeValueAsString"))) {
        addInterceptor(method,WRITE_VALUE_AS_STRING_INTERCEPTOR);
      }
      for (      InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name("writeValueAsBytes"))) {
        addInterceptor(method,WRITE_VALUE_AS_BYTES_INTERCEPTOR);
      }
      for (      InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name("readValue"))) {
        addInterceptor(method,READ_VALUE_INTERCEPTOR);
      }
      return target.toBytecode();
    }
  }
);
}
