{
  final TestClassLoader loader=getTestClassLoader();
  final String testClassObject="com.navercorp.pinpoint.profiler.interceptor.bci.TestObject2";
  loader.addTransformer(testClassObject,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      try {
        logger.info("modify cl:{}",classLoader);
        InstrumentClass aClass=instrumentor.getInstrumentClass(classLoader,testClassObject,classfileBuffer);
        String methodName="callA";
        aClass.getDeclaredMethod(methodName).addInterceptor("com.navercorp.pinpoint.profiler.interceptor.TestAfterInterceptor");
        String methodName2="callB";
        aClass.getDeclaredMethod(methodName2).addInterceptor("com.navercorp.pinpoint.profiler.interceptor.TestAfterInterceptor");
        return aClass.toBytecode();
      }
 catch (      InstrumentException e) {
        throw new RuntimeException(e.getMessage(),e);
      }
    }
  }
);
  loader.initialize();
  Class<?> testObjectClazz=loader.loadClass(testClassObject);
  final String methodName="callA";
  logger.info("class:{}",testObjectClazz.toString());
  final Object testObject=testObjectClazz.newInstance();
  Method callA=testObjectClazz.getMethod(methodName);
  Object result=callA.invoke(testObject);
  Interceptor interceptor=getInterceptor(loader,0);
  assertEqualsIntField(interceptor,"call",1);
  assertEqualsObjectField(interceptor,"className",testClassObject);
  assertEqualsObjectField(interceptor,"methodName",methodName);
  assertEqualsObjectField(interceptor,"args",null);
  assertEqualsObjectField(interceptor,"target",testObject);
  assertEqualsObjectField(interceptor,"result",result);
  final String methodName2="callB";
  Method callBMethod=testObject.getClass().getMethod(methodName2);
  callBMethod.invoke(testObject);
  Interceptor interceptor2=getInterceptor(loader,1);
  assertEqualsIntField(interceptor2,"call",1);
  assertEqualsObjectField(interceptor2,"className",testClassObject);
  assertEqualsObjectField(interceptor2,"methodName",methodName2);
  assertEqualsObjectField(interceptor2,"args",null);
  assertEqualsObjectField(interceptor2,"target",testObject);
  assertEqualsObjectField(interceptor2,"result",null);
}
