{
  this.profileEnable=readBoolean(prop,"profiler.enable",true);
  this.collectorServerIp=readString(prop,"profiler.collector.ip","127.0.0.1");
  this.collectorUdpSpanServerPort=readInt(prop,"profiler.collector.udpspan.port",9996);
  this.collectorUdpServerPort=readInt(prop,"profiler.collector.udp.port",9995);
  this.collectorTcpServerPort=readInt(prop,"profiler.collector.tcp.port",9994);
  this.spanDataSenderWriteQueueSize=readInt(prop,"profiler.spandatasender.write.queue.size",1024 * 5);
  this.spanDataSenderSocketSendBufferSize=readInt(prop,"profiler.spandatasender.socket.sendbuffersize",1024 * 64 * 16);
  this.spanDataSenderSocketTimeout=readInt(prop,"profiler.spandatasender.socket.timout",1024 * 5);
  this.statDataSenderWriteQueueSize=readInt(prop,"profiler.statdatasender.write.queue.size",1024 * 5);
  this.statDataSenderSocketSendBufferSize=readInt(prop,"profiler.statdatasender.socket.sendbuffersize",1024 * 64 * 16);
  this.statDataSenderSocketTimeout=readInt(prop,"profiler.statdatasender.socket.timout",1024 * 5);
  this.jdbcProfile=readBoolean(prop,"profiler.jdbc",true);
  this.jdbcSqlCacheSize=readInt(prop,"profiler.jdbc.sqlcachesize",1024);
  this.jdbcMaxSqlBindValueSize=readInt(prop,"profiler.jdbc.maxsqlbindvaluesize",1024);
  this.jdbcProfileMySql=readBoolean(prop,"profiler.jdbc.mysql",true);
  this.jdbcProfileMySqlSetAutoCommit=readBoolean(prop,"profiler.jdbc.mysql.setautocommit",false);
  this.jdbcProfileMySqlCommit=readBoolean(prop,"profiler.jdbc.mysql.commit",false);
  this.jdbcProfileMySqlRollback=readBoolean(prop,"profiler.jdbc.mysql.rollback",false);
  this.jdbcProfileMsSql=readBoolean(prop,"profiler.jdbc.mssql",true);
  this.jdbcProfileOracle=readBoolean(prop,"profiler.jdbc.oracle",true);
  this.jdbcProfileOracleSetAutoCommit=readBoolean(prop,"profiler.jdbc.oracle.setautocommit",false);
  this.jdbcProfileOracleCommit=readBoolean(prop,"profiler.jdbc.oracle.commit",false);
  this.jdbcProfileOracleRollback=readBoolean(prop,"profiler.jdbc.oracle.rollback",false);
  this.jdbcProfileCubrid=readBoolean(prop,"profiler.jdbc.cubrid",true);
  this.jdbcProfileCubridSetAutoCommit=readBoolean(prop,"profiler.jdbc.cubrid.setautocommit",false);
  this.jdbcProfileCubridCommit=readBoolean(prop,"profiler.jdbc.cubrid.commit",false);
  this.jdbcProfileCubridRollback=readBoolean(prop,"profiler.jdbc.cubrid.rollback",false);
  this.jdbcProfileDbcp=readBoolean(prop,"profiler.jdbc.dbcp",true);
  this.jdbcProfileDbcpConnectionClose=readBoolean(prop,"profiler.jdbc.dbcp.connectionclose",false);
  this.arucs=readBoolean(prop,"profiler.arcus",true);
  this.arucsKeyTrace=readBoolean(prop,"profiler.arcus.keytrace",false);
  this.memcached=readBoolean(prop,"profiler.memcached",true);
  this.memcachedKeyTrace=readBoolean(prop,"profiler.memcached.keytrace",false);
  this.apacheHttpClient4Profile=readBoolean(prop,"profiler.apache.httpclient4",true);
  this.apacheHttpClient4ProfileCookie=readBoolean(prop,"profiler.apache.httpclient4.cookie",false);
  this.apacheHttpClient4ProfileCookieDumpType=readDumpType(prop,"profiler.apache.httpclient4.cookie.dumptype",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileCookieSamplingRate=readInt(prop,"profiler.apache.httpclient4.cookie.sampling.rate",1);
  this.apacheHttpClient4ProfileEntity=readBoolean(prop,"profiler.apache.httpclient4.entity",false);
  this.apacheHttpClient4ProfileEntityDumpType=readDumpType(prop,"profiler.apache.httpclient4.entity.dumptype",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileEntitySamplingRate=readInt(prop,"profiler.apache.httpclient4.entity.sampling.rate",1);
  this.apacheNIOHttpClient4Profile=readBoolean(prop,"profiler.apache.nio.httpclient4",true);
  this.ningAsyncHttpClientProfile=readBoolean(prop,"profiler.ning.asynchttpclient",true);
  this.ningAsyncHttpClientProfileCookie=readBoolean(prop,"profiler.ning.asynchttpclient.cookie",false);
  this.ningAsyncHttpClientProfileCookieDumpType=readDumpType(prop,"profiler.ning.asynchttpclient.cookie.dumptype",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileCookieDumpSize=readInt(prop,"profiler.ning.asynchttpclient.cookie.dumpsize",1024);
  this.ningAsyncHttpClientProfileCookieSamplingRate=readInt(prop,"profiler.ning.asynchttpclient.cookie.sampling.rate",1);
  this.ningAsyncHttpClientProfileEntity=readBoolean(prop,"profiler.ning.asynchttpclient.entity",false);
  this.ningAsyncHttpClientProfileEntityDumpType=readDumpType(prop,"profiler.ning.asynchttpclient.entity.dumptype",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileEntityDumpSize=readInt(prop,"profiler.ning.asynchttpclient.entity.dumpsize",1024);
  this.ningAsyncHttpClientProfileEntitySamplingRate=readInt(prop,"profiler.asynchttpclient.entity.sampling.rate",1);
  this.ningAsyncHttpClientProfileParam=readBoolean(prop,"profiler.ning.asynchttpclient.param",false);
  this.ningAsyncHttpClientProfileParamDumpType=readDumpType(prop,"profiler.ning.asynchttpclient.param.dumptype",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileParamDumpSize=readInt(prop,"profiler.ning.asynchttpclient.param.dumpsize",1024);
  this.ningAsyncHttpClientProfileParamSamplingRate=readInt(prop,"profiler.asynchttpclient.param.sampling.rate",1);
  this.lineGameNettyParamDumpSize=readInt(prop,"profiler.line.game.netty.param.dumpsize",512);
  this.lineGameNettyEntityDumpSize=readInt(prop,"profiler.line.game.netty.entity.dumpsize",512);
  this.ibatis=readBoolean(prop,"profiler.orm.ibatis",true);
  this.mybatis=readBoolean(prop,"profiler.orm.mybatis",true);
  this.samplingEnable=readBoolean(prop,"profiler.sampling.enable",true);
  this.samplingRate=readInt(prop,"profiler.sampling.rate",1);
  this.ioBufferingEnable=readBoolean(prop,"profiler.io.buffering.enable",true);
  this.ioBufferingBufferSize=readInt(prop,"profiler.io.buffering.buffersize",20);
  this.profileJvmCollectInterval=readInt(prop,"profiler.jvm.collect.interval",1000);
  this.heartbeatInterval=readLong(prop,"profiler.heartbeat.interval",DEFAULT_HEART_BEAT_INTERVAL);
  this.applicationServerType=readServiceType(prop,"profiler.applicationservertype");
  String profileableClass=readString(prop,"profiler.include","");
  setProfilableClass(profileableClass);
  logger.info("configuration loaded successfully.");
}
