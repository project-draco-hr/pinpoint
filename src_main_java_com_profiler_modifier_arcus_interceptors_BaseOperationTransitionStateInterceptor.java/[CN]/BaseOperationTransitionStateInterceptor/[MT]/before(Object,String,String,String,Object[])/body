{
  if (isDebug) {
    LoggingUtils.logBefore(logger,target,className,methodName,parameterDescription,args);
  }
  AsyncTrace asyncTrace=(AsyncTrace)getAsyncTrace.invoke(target);
  if (asyncTrace == null) {
    logger.debug("asyncTrace not found");
    return;
  }
  OperationState newState=(OperationState)args[0];
  BaseOperationImpl baseOperation=(BaseOperationImpl)target;
  if (newState == OperationState.READING) {
    if (logger.isDebugEnabled()) {
      logger.debug("event:" + newState + " asyncTrace:"+ asyncTrace);
    }
    if (asyncTrace.getState() != AsyncTrace.STATE_INIT) {
      return;
    }
    MemcachedNode handlingNode=baseOperation.getHandlingNode();
    SocketAddress socketAddress=handlingNode.getSocketAddress();
    if (socketAddress instanceof InetSocketAddress) {
      InetSocketAddress address=(InetSocketAddress)socketAddress;
      asyncTrace.recordEndPoint(address.getHostName() + ":" + address.getPort());
    }
    String serviceCode=(String)getServiceCode.invoke(target);
    if (serviceCode == null) {
      serviceCode="UNKNOWN";
    }
    ServiceType svcType=ServiceType.ARCUS;
    if (serviceCode.equals(ServiceType.MEMCACHED.getDesc())) {
      svcType=ServiceType.MEMCACHED;
    }
    asyncTrace.recordServiceType(svcType);
    asyncTrace.recordApi(methodDescriptor);
    asyncTrace.recordDestinationId(serviceCode);
    String cmd=getCommand(baseOperation);
    asyncTrace.recordAttribute(AnnotationKey.ARCUS_COMMAND,cmd);
    asyncTrace.markAfterTime();
  }
 else   if (newState == OperationState.COMPLETE || newState == OperationState.TIMEDOUT) {
    if (logger.isDebugEnabled()) {
      logger.debug("event:" + newState + " asyncTrace:"+ asyncTrace);
    }
    boolean fire=asyncTrace.fire();
    if (!fire) {
      return;
    }
    Exception exception=baseOperation.getException();
    asyncTrace.recordException(exception);
    if (!baseOperation.isCancelled()) {
      TimeObject timeObject=(TimeObject)asyncTrace.getAttachObject();
      asyncTrace.markAfterTime();
      asyncTrace.traceBlockEnd();
    }
 else {
      asyncTrace.recordAttribute(AnnotationKey.EXCEPTION,"cancelled by user");
      TimeObject timeObject=(TimeObject)asyncTrace.getAttachObject();
      asyncTrace.markAfterTime();
      asyncTrace.traceBlockEnd();
    }
  }
}
