{
  if (logger.isLoggable(Level.INFO)) {
    logger.info("before " + StringUtils.toString(target) + " "+ className+ "."+ methodName+ parameterDescription+ " args:"+ Arrays.toString(args));
  }
  AsyncTrace asyncTrace=(AsyncTrace)asyncTraceId.invoke(target);
  if (asyncTrace == null) {
    logger.fine("asyncTrace not found");
    return;
  }
  OperationState newState=(OperationState)args[0];
  BaseOperationImpl baseOperation=(BaseOperationImpl)target;
  if (newState == OperationState.READING) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine("event:" + newState + " asyncTrace:"+ asyncTrace);
    }
    if (asyncTrace.getState() != AsyncTrace.STATE_INIT) {
      return;
    }
    MemcachedNode handlingNode=baseOperation.getHandlingNode();
    SocketAddress socketAddress=handlingNode.getSocketAddress();
    if (socketAddress instanceof InetSocketAddress) {
      InetSocketAddress address=(InetSocketAddress)socketAddress;
      asyncTrace.recordTerminalEndPoint("ARCUS:" + address.getHostName() + ":"+ address.getPort());
    }
    asyncTrace.recordRpcName("ARCUS",baseOperation.getClass().getSimpleName());
    String cmd=getCommand(baseOperation);
    asyncTrace.recordAttibute("arcus.command",cmd);
    TimeObject timeObject=(TimeObject)asyncTrace.getAttachObject();
    timeObject.markSendTime();
    long createTime=asyncTrace.getSpan().getCreateTime();
    asyncTrace.record(Annotation.ClientSend,System.currentTimeMillis() - createTime);
  }
 else   if (newState == OperationState.COMPLETE || newState == OperationState.TIMEDOUT) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine("event:" + newState + " asyncTrace:"+ asyncTrace);
    }
    boolean fire=asyncTrace.fire();
    if (!fire) {
      return;
    }
    Exception exception=baseOperation.getException();
    if (exception != null) {
      asyncTrace.recordAttibute("exception",InterceptorUtils.exceptionToString(exception));
    }
    if (!baseOperation.isCancelled()) {
      TimeObject timeObject=(TimeObject)asyncTrace.getAttachObject();
      asyncTrace.record(Annotation.ClientRecv,timeObject.getSendTime());
    }
 else {
      asyncTrace.recordAttribute("exception","cancelled by user");
      TimeObject timeObject=(TimeObject)asyncTrace.getAttachObject();
      asyncTrace.record(Annotation.ClientRecv,timeObject.getCancelTime());
    }
  }
}
