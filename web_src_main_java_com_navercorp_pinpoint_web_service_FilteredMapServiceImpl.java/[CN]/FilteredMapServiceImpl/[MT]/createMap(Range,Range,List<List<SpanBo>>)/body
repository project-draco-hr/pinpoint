{
  final TimeWindow window=new TimeWindow(range,TimeWindowDownSampler.SAMPLER);
  final LinkDataDuplexMap linkDataDuplexMap=new LinkDataDuplexMap();
  final DotExtractor dotExtractor=new DotExtractor(scanRange,registry);
  final ResponseHistogramBuilder mapHistogramSummary=new ResponseHistogramBuilder(range);
  for (  List<SpanBo> transaction : filterList) {
    final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);
    for (    SpanBo span : transaction) {
      final Application parentApplication=createParentApplication(span,transactionSpanMap);
      final Application spanApplication=new Application(span.getApplicationId(),registry.findServiceType(span.getApplicationServiceType()));
      recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());
      if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {
        logger.warn("invalid span application:{}",spanApplication);
        continue;
      }
      final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());
      long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());
      if (parentApplication.getServiceType() == ServiceType.USER) {
        if (logger.isTraceEnabled()) {
          logger.trace("span user:{} {} -> span:{} {}",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();
        sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
        if (logger.isTraceEnabled()) {
          logger.trace("span target user:{} {} -> span:{} {}",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();
        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
      }
 else {
        if (logger.isTraceEnabled()) {
          logger.trace("span target parent:{} {} -> span:{} {}",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();
        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
      }
      addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);
      dotExtractor.addDot(span);
    }
  }
  List<ApplicationScatterScanResult> applicationScatterScanResult=dotExtractor.getApplicationScatterScanResult();
  ApplicationMapBuilder applicationMapBuilder=new ApplicationMapBuilder(range,matcherGroup);
  mapHistogramSummary.build();
  ApplicationMap map=applicationMapBuilder.build(linkDataDuplexMap,agentInfoService,mapHistogramSummary);
  map.setApplicationScatterScanResult(applicationScatterScanResult);
  return map;
}
