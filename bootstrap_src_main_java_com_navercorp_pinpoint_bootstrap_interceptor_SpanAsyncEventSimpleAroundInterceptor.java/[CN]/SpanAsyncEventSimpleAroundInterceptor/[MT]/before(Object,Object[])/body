{
  if (isDebug) {
    logger.beforeInterceptor(target,methodDescriptor.getClassName(),methodDescriptor.getMethodName(),"",args);
  }
  System.out.println("Before " + methodDescriptor.getClassName() + "."+ methodDescriptor.getMethodName());
  if (!asyncTraceIdAccessor.isApplicable(target) || asyncTraceIdAccessor.get(target) == null) {
    logger.debug("Not found asynchronous invocation metadata");
    return;
  }
  final AsyncTraceId asyncTraceId=asyncTraceIdAccessor.get(target);
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    trace=traceContext.continueAsyncTraceObject(asyncTraceId,asyncTraceId.getAsyncId(),asyncTraceId.getSpanStartTime());
    if (trace == null) {
      logger.warn("Failed to continue async trace. 'result is null'");
      return;
    }
    if (isDebug) {
      logger.debug("Continue async trace. {}",asyncTraceId);
    }
    traceFirstBlockBegin(trace);
  }
  try {
    trace.traceBlockBegin();
    doInBeforeTrace(trace,asyncTraceId,target,args);
  }
 catch (  Throwable th) {
    if (logger.isWarnEnabled()) {
      logger.warn("before. Caused:{}",th.getMessage(),th);
    }
  }
}
