{
  if (isDebug) {
    LoggingUtils.logBefore(logger,target,className,methodName,parameterDescription,args);
  }
  TraceContext traceContext=TraceContext.getTraceContext();
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  trace.traceBlockBegin();
  trace.markBeforeTime();
  TraceID nextId=trace.getTraceId().getNextTraceId();
  trace.recordNextSpanId(nextId.getSpanId());
  final HttpHost host=(HttpHost)args[0];
  final HttpRequest request=(HttpRequest)args[1];
  request.addHeader(Header.HTTP_TRACE_ID.toString(),nextId.getId().toString());
  request.addHeader(Header.HTTP_SPAN_ID.toString(),Long.toString(nextId.getSpanId()));
  request.addHeader(Header.HTTP_PARENT_SPAN_ID.toString(),Long.toString(nextId.getParentSpanId()));
  request.addHeader(Header.HTTP_SAMPLED.toString(),String.valueOf(nextId.isSampled()));
  request.addHeader(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
  trace.recordRpcName(ServiceType.HTTP_CLIENT,request.getProtocolVersion().toString(),"CLIENT");
  int port=host.getPort();
  trace.recordEndPoint(request.getProtocolVersion() + ":" + host.getHostName()+ ((port > 0) ? ":" + port : ""));
  trace.recordAttribute(AnnotationNames.HTTP_URL,request.getRequestLine().getUri());
}
