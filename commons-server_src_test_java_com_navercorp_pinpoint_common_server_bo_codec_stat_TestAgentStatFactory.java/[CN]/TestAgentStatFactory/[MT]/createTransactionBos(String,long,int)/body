{
  List<TransactionBo> transactionBos=new ArrayList<>(numValues);
  List<Long> timestamps=createTimestamps(initialTimestamp,numValues);
  List<Long> collectIntervals=TestAgentStatDataPointFactory.LONG.createFluctuatingValues(100L,10000L,10L,100L,numValues);
  List<Long> sampledNewCounts=TestAgentStatDataPointFactory.LONG.createFluctuatingValues(100L,10000L,10L,100L,numValues);
  List<Long> sampledContinuationCounts=TestAgentStatDataPointFactory.LONG.createFluctuatingValues(100L,10000L,10L,100L,numValues);
  List<Long> unsampledNewCount=TestAgentStatDataPointFactory.LONG.createFluctuatingValues(100L,10000L,10L,100L,numValues);
  List<Long> unsampledContinuationCount=TestAgentStatDataPointFactory.LONG.createFluctuatingValues(100L,10000L,10L,100L,numValues);
  for (int i=0; i < numValues; ++i) {
    TransactionBo transactionBo=new TransactionBo();
    transactionBo.setAgentId(agentId);
    transactionBo.setTimestamp(timestamps.get(i));
    transactionBo.setCollectInterval(collectIntervals.get(i));
    transactionBo.setSampledNewCount(sampledNewCounts.get(i));
    transactionBo.setSampledContinuationCount(sampledContinuationCounts.get(i));
    transactionBo.setUnsampledNewCount(unsampledNewCount.get(i));
    transactionBo.setUnsampledContinuationCount(unsampledContinuationCount.get(i));
    transactionBos.add(transactionBo);
  }
  return transactionBos;
}
