{
  List<ActiveTraceBo> activeTraceBos=new ArrayList<>(numValues);
  List<Long> timestamps=createTimestamps(initialTimestamp,numValues);
  List<Integer> fastTraceCounts=TestAgentStatDataPointFactory.INTEGER.createRandomValues(0,1000,numValues);
  List<Integer> normalTraceCounts=TestAgentStatDataPointFactory.INTEGER.createRandomValues(0,1000,numValues);
  List<Integer> slowTraceCounts=TestAgentStatDataPointFactory.INTEGER.createRandomValues(0,1000,numValues);
  List<Integer> verySlowTraceCounts=TestAgentStatDataPointFactory.INTEGER.createRandomValues(0,1000,numValues);
  int histogramSchemaType=1;
  for (int i=0; i < numValues; ++i) {
    ActiveTraceBo activeTraceBo=new ActiveTraceBo();
    activeTraceBo.setAgentId(agentId);
    activeTraceBo.setTimestamp(timestamps.get(i));
    activeTraceBo.setHistogramSchemaType(histogramSchemaType);
    Map<SlotType,Integer> activeTraceCounts=new HashMap<>();
    activeTraceCounts.put(SlotType.FAST,fastTraceCounts.get(i));
    activeTraceCounts.put(SlotType.NORMAL,normalTraceCounts.get(i));
    activeTraceCounts.put(SlotType.SLOW,slowTraceCounts.get(i));
    activeTraceCounts.put(SlotType.VERY_SLOW,verySlowTraceCounts.get(i));
    activeTraceBo.setActiveTraceCounts(activeTraceCounts);
    activeTraceBos.add(activeTraceBo);
  }
  return activeTraceBos;
}
