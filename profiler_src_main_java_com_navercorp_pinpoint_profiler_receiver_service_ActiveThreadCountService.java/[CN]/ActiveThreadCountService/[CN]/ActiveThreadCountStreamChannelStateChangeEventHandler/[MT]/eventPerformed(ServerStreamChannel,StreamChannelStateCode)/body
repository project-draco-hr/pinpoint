{
  logger.info("eventPerformed. ServerStreamChannel:{}, StreamChannelStateCode:{}.",streamChannel,updatedStateCode);
synchronized (lock) {
switch (updatedStateCode) {
case CONNECTED:
      streamChannelRepository.add(streamChannel);
    boolean turnOn=onTimerTask.compareAndSet(false,true);
  if (turnOn) {
    logger.info("turn on ActiveThreadCountTimerTask.");
    timer.newTimeout(new ActiveThreadCountTimerTask(),flushDelay,TimeUnit.MILLISECONDS);
  }
break;
case CLOSED:
case ILLEGAL_STATE:
boolean removed=streamChannelRepository.remove(streamChannel);
if (removed && streamChannelRepository.size() == 0) {
boolean turnOff=onTimerTask.compareAndSet(true,false);
if (turnOff) {
logger.info("turn off ActiveThreadCountTimerTask.");
}
}
break;
}
}
}
