{
  List<Record> recordList=new ArrayList<Record>(spanAlignList.size() * 2);
  Integer annotationSeq=spanAlignList.size() + 1;
  for (  SpanAlign spanAlign : spanAlignList) {
    if (spanAlign.isSpan()) {
      SpanBo spanBo=spanAlign.getSpanBo();
      String argument=getRpcArgument(spanBo);
      long begin=spanBo.getStartTime();
      long elapsed=spanBo.getElapsed();
      String method=AnnotationUtils.findApiAnnotation(spanBo.getAnnotationBoList());
      if (method != null) {
        ApiDescription apiDescription=apiDescriptionParser.parse(method);
        Record record=new Record(spanAlign.getDepth(),spanAlign.getSequence(),spanAlign.getParentSequence(),true,apiDescription.getSimpleMethodDescription(),argument,begin,elapsed,spanBo.getAgentId(),spanBo.getApplicationId(),spanBo.getServiceType(),null,spanAlign.isHasChild());
        record.setSimpleClassName(apiDescription.getSimpleClassName());
        record.setFullApiDescription(method);
        recordList.add(record);
      }
 else {
        AnnotationKey apiMetaDataError=AnnotationUtils.getApiMetaDataError(spanBo.getAnnotationBoList());
        Record record=new Record(spanAlign.getDepth(),spanAlign.getSequence(),spanAlign.getParentSequence(),true,apiMetaDataError.getValue(),argument,begin,elapsed,spanBo.getAgentId(),spanBo.getApplicationId(),spanBo.getServiceType(),null,spanAlign.isHasChild());
        record.setSimpleClassName("");
        record.setFullApiDescription("");
        recordList.add(record);
      }
      List<Record> annotationRecord=createAnnotationRecord(spanAlign.getDepth() + 1,annotationSeq++,spanAlign.getSequence(),spanBo.getAnnotationBoList());
      recordList.addAll(annotationRecord);
      if (spanBo.getRemoteAddr() != null) {
        Record remoteAddress=createParameterRecord(spanAlign.getDepth() + 1,annotationSeq++,spanAlign.getSequence(),"REMOTE_ADDRESS",spanBo.getRemoteAddr());
        recordList.add(remoteAddress);
      }
    }
 else {
      SpanEventBo spanEventBo=spanAlign.getSpanEventBo();
      String argument=getDisplayArgument(spanEventBo);
      final String method=AnnotationUtils.findApiAnnotation(spanEventBo.getAnnotationBoList());
      if (method != null) {
        ApiDescription apiDescription=apiDescriptionParser.parse(method);
        String destinationId=spanEventBo.getDestinationId();
        long begin=spanAlign.getSpanBo().getStartTime() + spanEventBo.getStartElapsed();
        long elapsed=spanEventBo.getEndElapsed();
        Record record=new Record(spanAlign.getDepth(),spanAlign.getSequence(),spanAlign.getParentSequence(),true,apiDescription.getSimpleMethodDescription(),argument,begin,elapsed,spanEventBo.getAgentId(),spanEventBo.getDestinationId(),spanEventBo.getServiceType(),destinationId,spanAlign.isHasChild());
        record.setSimpleClassName(apiDescription.getSimpleClassName());
        record.setFullApiDescription(method);
        recordList.add(record);
      }
 else {
        AnnotationKey apiMetaDataError=AnnotationUtils.getApiMetaDataError(spanEventBo.getAnnotationBoList());
        String destinationId=spanEventBo.getDestinationId();
        long begin=spanAlign.getSpanBo().getStartTime() + spanEventBo.getStartElapsed();
        long elapsed=spanEventBo.getEndElapsed();
        Record record=new Record(spanAlign.getDepth(),spanAlign.getSequence(),spanAlign.getParentSequence(),true,apiMetaDataError.getValue(),argument,begin,elapsed,spanEventBo.getAgentId(),spanEventBo.getDestinationId(),spanEventBo.getServiceType(),destinationId,spanAlign.isHasChild());
        record.setSimpleClassName("");
        record.setFullApiDescription(method);
        recordList.add(record);
      }
      List<Record> annotationRecord=createAnnotationRecord(spanAlign.getDepth() + 1,annotationSeq++,spanAlign.getSequence(),spanEventBo.getAnnotationBoList());
      recordList.addAll(annotationRecord);
    }
  }
  return recordList;
}
