{
  if (spanAlignList == null) {
    throw new NullPointerException("spanAlignList must not be null");
  }
  List<Record> recordList=new ArrayList<Record>(spanAlignList.size() * 2);
  for (int i=0; i < spanAlignList.size(); i++) {
    SpanAlign spanAlign=spanAlignList.get(i);
    if (i == 0) {
      if (!spanAlign.isSpan()) {
        throw new IllegalArgumentException("root is not span");
      }
      stack.push(new SpanDepth(spanAlign,getNextId()));
    }
 else {
      final SpanDepth lastSpanDepth=stack.getLast();
      final int parentDepth=lastSpanDepth.getSpanAlign().getDepth();
      final int currentDepth=spanAlign.getDepth();
      logger.debug("parentDepth:{} currentDepth:{} sequence:{}",parentDepth,currentDepth,lastSpanDepth.getId());
      if (parentDepth < spanAlign.getDepth()) {
        stack.push(new SpanDepth(spanAlign,getNextId()));
      }
 else       if (parentDepth > currentDepth) {
        while (true) {
          logger.debug("pop");
          stack.pop();
          SpanDepth popLast=stack.getLast();
          if (popLast.getSpanAlign().getDepth() < currentDepth) {
            break;
          }
        }
        stack.push(new SpanDepth(spanAlign,getNextId()));
      }
 else {
        stack.pop();
        stack.push(new SpanDepth(spanAlign,getNextId()));
      }
    }
    if (spanAlign.isSpan()) {
      SpanBo spanBo=spanAlign.getSpanBo();
      String argument=getRpcArgument(spanBo);
      final long begin=spanBo.getStartTime();
      final long elapsed=spanBo.getElapsed();
      final int spanBoSequence=stack.getLast().getId();
      int parentSequence;
      if (stack.getParent() == null) {
        parentSequence=0;
      }
 else {
        parentSequence=stack.getParent().getId();
      }
      logger.debug("spanBoSequence:{}, parentSequence:{}",spanBoSequence,parentSequence);
      String method=AnnotationUtils.findApiAnnotation(spanBo.getAnnotationBoList());
      if (method != null) {
        ApiDescription apiDescription=apiDescriptionParser.parse(method);
        Record record=new Record(spanAlign.getDepth(),spanBoSequence,parentSequence,true,apiDescription.getSimpleMethodDescription(),argument,begin,elapsed,spanBo.getAgentId(),spanBo.getApplicationId(),spanBo.getServiceType(),null,spanAlign.isHasChild());
        record.setSimpleClassName(apiDescription.getSimpleClassName());
        record.setFullApiDescription(method);
        recordList.add(record);
      }
 else {
        AnnotationKey apiMetaDataError=AnnotationUtils.getApiMetaDataError(spanBo.getAnnotationBoList());
        Record record=new Record(spanAlign.getDepth(),spanBoSequence,parentSequence,true,apiMetaDataError.getValue(),argument,begin,elapsed,spanBo.getAgentId(),spanBo.getApplicationId(),spanBo.getServiceType(),null,spanAlign.isHasChild());
        record.setSimpleClassName("");
        record.setFullApiDescription("");
        recordList.add(record);
      }
      List<Record> annotationRecord=createAnnotationRecord(spanAlign.getDepth() + 1,spanBoSequence,spanBo.getAnnotationBoList());
      recordList.addAll(annotationRecord);
      if (spanBo.getRemoteAddr() != null) {
        Record remoteAddress=createParameterRecord(spanAlign.getDepth() + 1,spanBoSequence,"REMOTE_ADDRESS",spanBo.getRemoteAddr());
        recordList.add(remoteAddress);
      }
    }
 else {
      SpanEventBo spanEventBo=spanAlign.getSpanEventBo();
      String argument=getDisplayArgument(spanEventBo);
      final int spanBoEventSequence=stack.getLast().getId();
      final int parentSequence=stack.getParent().getId();
      logger.debug("spanBoEventSequence:{}, parentSequence:{}",spanBoEventSequence,parentSequence);
      final String method=AnnotationUtils.findApiAnnotation(spanEventBo.getAnnotationBoList());
      if (method != null) {
        ApiDescription apiDescription=apiDescriptionParser.parse(method);
        String destinationId=spanEventBo.getDestinationId();
        long begin=spanAlign.getSpanBo().getStartTime() + spanEventBo.getStartElapsed();
        long elapsed=spanEventBo.getEndElapsed();
        Record record=new Record(spanAlign.getDepth(),spanBoEventSequence,parentSequence,true,apiDescription.getSimpleMethodDescription(),argument,begin,elapsed,spanEventBo.getAgentId(),spanEventBo.getDestinationId(),spanEventBo.getServiceType(),destinationId,spanAlign.isHasChild());
        record.setSimpleClassName(apiDescription.getSimpleClassName());
        record.setFullApiDescription(method);
        recordList.add(record);
      }
 else {
        AnnotationKey apiMetaDataError=AnnotationUtils.getApiMetaDataError(spanEventBo.getAnnotationBoList());
        String destinationId=spanEventBo.getDestinationId();
        long begin=spanAlign.getSpanBo().getStartTime() + spanEventBo.getStartElapsed();
        long elapsed=spanEventBo.getEndElapsed();
        Record record=new Record(spanAlign.getDepth(),spanBoEventSequence,parentSequence,true,apiMetaDataError.getValue(),argument,begin,elapsed,spanEventBo.getAgentId(),spanEventBo.getDestinationId(),spanEventBo.getServiceType(),destinationId,spanAlign.isHasChild());
        record.setSimpleClassName("");
        record.setFullApiDescription(method);
        recordList.add(record);
      }
      List<Record> annotationRecord=createAnnotationRecord(spanAlign.getDepth() + 1,spanBoEventSequence,spanEventBo.getAnnotationBoList());
      recordList.addAll(annotationRecord);
    }
  }
  return recordList;
}
