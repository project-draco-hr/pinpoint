{
  StringBuilder data=new StringBuilder();
  Hbase.Client client=getClient();
  if (client != null) {
    try {
      totalDataCount=0;
      GetServerData getServer=new GetServerData();
      List<ByteBuffer> agentList=getServer.getServerList(client);
      long fromTime=timestamp - period;
      List<ByteBuffer> rows=new ArrayList<ByteBuffer>();
      for (int loop=1; loop <= minutes; loop++) {
        String tempTimeString=DATE_FORMAT_YMD_HM.format(new Date(fromTime + loop * 60000));
        rows.add(Converter.toByteBuffer(tempTimeString));
      }
      scatterChartData.append("[");
      for (      ByteBuffer agent : agentList) {
        String agentHashCode=Converter.toString(agent);
        agentNameList.add(agentHashCode);
        String tableName=HBASE_REQUEST_TABLE + "_" + agentHashCode;
        ByteBuffer tableNameBuffer=ByteBuffer.wrap(tableName.getBytes());
        long startTime=System.nanoTime();
        List<ByteBuffer> columnList=new ArrayList<ByteBuffer>();
        columnList.add(Converter.toByteBuffer(HBASE_REQUEST_COLUMN_REQUEST_TIME));
        columnList.add(Converter.toByteBuffer(HBASE_REQUEST_COLUMN_RESPONSE_TIME));
        columnList.add(Converter.toByteBuffer(HBASE_REQUEST_COLUMN_ELAPSED_TIME));
        columnList.add(Converter.toByteBuffer(HBASE_REQUEST_COLUMN_REQUEST_URL));
        columnList.add(Converter.toByteBuffer(HBASE_REQUEST_COLUMN_REQUEST_PARAMS));
        List<TRowResult> dataList=client.getRowsWithColumns(tableNameBuffer,rows,columnList);
        long endTime=System.nanoTime();
        int dataListSize=dataList.size();
        double getTime=(endTime - startTime) / 1000000.0;
        log("Request getDataTime=" + getTime);
        int columnListSize=columnList.size();
        data.append("RowData count=").append(dataListSize).append("<BR>");
        if (dataList != null && dataListSize > 0) {
          for (          TRowResult rowResult : dataList) {
            int columnSize=rowResult.getColumnsSize();
            Map<ByteBuffer,TCell> columns=rowResult.getColumns();
            String keyList[]=getDataKeyList(columnSize,columns);
            int perColumnDataCount=columnSize / (columnListSize);
            totalDataCount+=perColumnDataCount;
            int maxValuePos=appendScatterChartData(fromTime,indexResponseTime,indexElapsedTime,indexRequestURL,perColumnDataCount,columns,keyList,scatterChartData);
            if (maxValuePos != -1) {
              setSlowRequestData(maxValuePos,perColumnDataCount,agentHashCode,rowResult,columns,keyList,tableNameBuffer,client);
            }
            setSummaryMap(2,0,perColumnDataCount,columns,keyList);
          }
        }
      }
      getStatisticsData();
      data.append("Data Period:").append(DATE_FORMAT_SHOW_YMD_HM.format(new Date(fromTime)));
      data.append(" ~ ").append(DATE_FORMAT_SHOW_YMD_HM.format(new Date(timestamp))).append(NEW_LINE);
      data.append("Total data count:").append(totalDataCount).append(NEW_LINE);
      scatterChartData.append("]");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return data;
}
