{
  Map<String,String> result=config.readPattern(PATTERN_REGEX);
  for (  Map.Entry<String,String> entry : result.entrySet()) {
    try {
      final String key=entry.getKey();
      if (key == null || !key.startsWith(SPRING_BEANS_PREFIX)) {
        if (logger.isDebugEnabled()) {
          logger.debug("Invalid key format of spring-beans target {}",key);
        }
        continue;
      }
      final int point=key.indexOf('.',SPRING_BEANS_PREFIX.length());
      if (point < 0) {
        if (logger.isDebugEnabled()) {
          logger.debug("Not found key number of spring-beans target {}",key);
        }
        continue;
      }
      final int number=Integer.parseInt(key.substring(SPRING_BEANS_PREFIX.length(),point));
      SpringBeansTarget target=targets.get(number);
      if (target == null) {
        target=new SpringBeansTarget();
        targets.put(number,target);
      }
      if (key.endsWith(SPRING_BEANS_NAME_PATTERN_POSTFIX)) {
        target.setNamePatterns(entry.getValue());
      }
 else       if (key.endsWith(SPRING_BEANS_CLASS_PATTERN_POSTFIX)) {
        target.setClassPatterns(entry.getValue());
      }
 else       if (key.endsWith(SPRING_BEANS_ANNOTATION_POSTFIX)) {
        target.setAnnotations(entry.getValue());
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("Unknown key format of spring-beans target {}",key);
        }
        continue;
      }
    }
 catch (    Exception e) {
      if (logger.isInfoEnabled()) {
        logger.info("Invalid target of spring-beans target {}={}",entry.getKey(),entry.getValue());
      }
      continue;
    }
  }
}
