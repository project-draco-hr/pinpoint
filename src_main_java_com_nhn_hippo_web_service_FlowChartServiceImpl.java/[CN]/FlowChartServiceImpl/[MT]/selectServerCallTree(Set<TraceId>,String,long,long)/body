{
  StopWatch watch=new StopWatch();
  watch.start();
  final Map<String,ServiceType> terminalQueryParams=new HashMap<String,ServiceType>();
  final Map<String,ServiceType> clientQueryParams=new HashMap<String,ServiceType>();
  final Set<String> hostnameQueryParams=new HashSet<String>();
  final ServerCallTree tree=new ServerCallTree(new ApplicationIdNodeSelector());
  List<List<SpanBo>> traces=this.traceDao.selectSpans(traceIds);
  int totalNonTerminalSpansCount=0;
  Set<String> nonTerminalEndPoints=new HashSet<String>();
  for (  List<SpanBo> transaction : traces) {
    totalNonTerminalSpansCount+=transaction.size();
    for (    SpanBo eachTransaction : transaction) {
      tree.addSpan(eachTransaction);
      hostnameQueryParams.add(eachTransaction.getApplicationId());
      terminalQueryParams.put(eachTransaction.getApplicationId(),eachTransaction.getServiceType());
      if (eachTransaction.isRoot()) {
        clientQueryParams.put(eachTransaction.getApplicationId(),ServiceType.CLIENT);
      }
      nonTerminalEndPoints.add(eachTransaction.getEndPoint());
    }
  }
  for (  Entry<String,ServiceType> param : terminalQueryParams.entrySet()) {
    ServiceType svcType=param.getValue();
    if (!svcType.isRpcClient() && !svcType.isUnknown() && !svcType.isTerminal()) {
      long start=System.currentTimeMillis();
      List<Map<String,TerminalStatistics>> terminals=terminalStatisticsDao.selectTerminal(param.getKey(),from,to);
      logger.info("	Fetch terminals of {} : {}ms",param.getKey(),System.currentTimeMillis() - start);
      for (      Map<String,TerminalStatistics> terminal : terminals) {
        for (        Entry<String,TerminalStatistics> entry : terminal.entrySet()) {
          TerminalStatistics terminalStatistics=entry.getValue();
          if (!nonTerminalEndPoints.contains(terminalStatistics.getTo())) {
            if (ServiceType.findServiceType(terminalStatistics.getToServiceType()).isRpcClient()) {
              terminalStatistics.setToServiceType(ServiceType.UNKNOWN_CLOUD.getCode());
            }
            tree.addTerminalStatistics(terminalStatistics);
          }
        }
      }
    }
  }
  logger.debug("client query params=" + clientQueryParams);
  for (  Entry<String,ServiceType> param : clientQueryParams.entrySet()) {
    List<Map<String,ClientStatistics>> clients=clientStatisticsDao.selectClient(param.getKey(),param.getValue().getCode(),from,to);
    for (    Map<String,ClientStatistics> client : clients) {
      for (      Entry<String,ClientStatistics> clientEntry : client.entrySet()) {
        logger.debug("fetched client=" + clientEntry);
        tree.addClientStatistics(clientEntry.getValue());
      }
    }
  }
  logger.debug("hostname query params=" + hostnameQueryParams);
  for (  String applicationId : hostnameQueryParams) {
    tree.addApplicationHosts(applicationId,selectApplicationHosts(applicationId));
  }
  tree.build();
  watch.stop();
  logger.info("Fetch serverCallTree elapsed. {}ms",watch.getLastTaskTimeMillis());
  return tree;
}
