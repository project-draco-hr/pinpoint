{
  final Map<String,ServiceType> terminalQueryParams=new HashMap<String,ServiceType>();
  final ServerCallTree tree=new ServerCallTree(new ApplicationIdNodeSelector());
  StopWatch watch=new StopWatch();
  watch.start("scanNonTerminalSpans");
  List<List<SpanBo>> traces=this.traceDao.selectSpans(traceIds);
  watch.stop();
  int totalNonTerminalSpansCount=0;
  Set<String> endPoints=new HashSet<String>();
  for (  List<SpanBo> transaction : traces) {
    totalNonTerminalSpansCount+=transaction.size();
    for (    SpanBo eachTransaction : transaction) {
      tree.addSpan(eachTransaction);
      terminalQueryParams.put(eachTransaction.getApplicationId(),eachTransaction.getServiceType());
      endPoints.add(eachTransaction.getEndPoint());
    }
  }
  if (logger.isInfoEnabled()) {
    logger.info("Fetch non-terminal spans elapsed : {}ms, {} traces, {} spans",new Object[]{watch.getLastTaskTimeMillis(),traces.size(),totalNonTerminalSpansCount});
  }
  watch.start("scanTerminalStatistics");
  for (  Entry<String,ServiceType> param : terminalQueryParams.entrySet()) {
    ServiceType svcType=param.getValue();
    if (!svcType.isRpcClient() && !svcType.isUnknown() && !svcType.isTerminal()) {
      long start=System.currentTimeMillis();
      List<Map<String,TerminalStatistics>> terminals=terminalStatisticsDao.selectTerminal(param.getKey(),from,to);
      logger.info("	Fetch terminals of {} : {}ms",param.getKey(),System.currentTimeMillis() - start);
      for (      Map<String,TerminalStatistics> terminal : terminals) {
        for (        Entry<String,TerminalStatistics> entry : terminal.entrySet()) {
          TerminalStatistics terminalStatistics=entry.getValue();
          if (!endPoints.contains(terminalStatistics.getTo())) {
            if (ServiceType.findServiceType(terminalStatistics.getToServiceType()).isRpcClient()) {
              terminalStatistics.setToServiceType(ServiceType.UNKNOWN_CLOUD.getCode());
            }
            tree.addTerminalStatistics(terminalStatistics);
          }
        }
      }
    }
  }
  watch.stop();
  logger.info("Fetch terminal statistics elapsed : {}ms",watch.getLastTaskTimeMillis());
  return tree.build();
}
