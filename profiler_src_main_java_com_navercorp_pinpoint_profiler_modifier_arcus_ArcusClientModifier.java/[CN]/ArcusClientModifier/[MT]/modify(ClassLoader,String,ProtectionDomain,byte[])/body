{
  if (logger.isInfoEnabled()) {
    logger.info("Modifing. {}",javassistClassName);
  }
  try {
    InstrumentClass arcusClient=byteCodeInstrumentor.getClass(classLoader,javassistClassName,classFileBuffer);
    if (!checkCompatibility(arcusClient)) {
      return null;
    }
    final Interceptor setCacheManagerInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.navercorp.pinpoint.profiler.modifier.arcus.interceptor.SetCacheManagerInterceptor");
    final String[] args={"net.spy.memcached.CacheManager"};
    arcusClient.addInterceptor("setCacheManager",args,setCacheManagerInterceptor,Type.before);
    List<MethodInfo> declaredMethods=arcusClient.getDeclaredMethods(new ArcusMethodFilter());
    for (    MethodInfo method : declaredMethods) {
      SimpleAroundInterceptor apiInterceptor=(SimpleAroundInterceptor)byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.navercorp.pinpoint.profiler.modifier.arcus.interceptor.ApiInterceptor");
      if (this.getProfilerConfig().isArucsKeyTrace()) {
        final int index=ParameterUtils.findFirstString(method,3);
        if (index != -1) {
          ((ParameterExtractorSupport)apiInterceptor).setParameterExtractor(new IndexParameterExtractor(index));
        }
      }
      arcusClient.addScopeInterceptor(method.getName(),method.getParameterTypes(),apiInterceptor,ArcusScope.SCOPE);
    }
    return arcusClient.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(e.getMessage(),e);
    }
    return null;
  }
}
