{
  if (logger.isLoggable(Level.INFO)) {
    logger.info("before " + StringUtils.toString(target) + " "+ className+ "."+ methodName+ parameterDescription+ " args:"+ Arrays.toString(args));
  }
  TraceContext traceContext=TraceContext.getTraceContext();
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  trace.traceBlockBegin();
  trace.markBeforeTime();
  TraceID nextId=trace.getCurrentTraceId();
  final HttpUriRequest request=(HttpUriRequest)args[0];
  request.addHeader(Header.HTTP_TRACE_ID.toString(),nextId.getId().toString());
  request.addHeader(Header.HTTP_SPAN_ID.toString(),Long.toString(nextId.getSpanId()));
  request.addHeader(Header.HTTP_PARENT_SPAN_ID.toString(),Long.toString(nextId.getParentSpanId()));
  request.addHeader(Header.HTTP_SAMPLED.toString(),String.valueOf(nextId.isSampled()));
  request.addHeader(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
  HttpHost host=URIUtils.extractHost(request.getURI());
  trace.recordRpcName(ServiceType.HTTP_CLIENT,request.getProtocolVersion().toString(),"CLIENT");
  trace.recordEndPoint(host.getHostName());
  trace.recordAttribute("http.url",request.getRequestLine().getUri());
}
