{
  String jsonString="{\"name\" : \"Jackson\"}";
  byte[] jsonBytes=jsonString.getBytes("UTF-8");
  Method mapperReadValueString=getMethod(ObjectMapper.class,"readValue",String.class,Class.class);
  Method mapperReadValueBytes=getMethod(ObjectMapper.class,"readValue",byte[].class,Class.class);
  Method mapperReader=getMethod(ObjectMapper.class,"reader",Class.class);
  Class<?> readerClass=null;
  Method readerReadValueString=null;
  Method readerReadValueBytes=null;
  try {
    readerClass=Class.forName("org.codehaus.jackson.map.ObjectReader");
    readerReadValueString=getMethod(readerClass,"readValue",String.class);
    readerReadValueBytes=getMethod(readerClass,"readValue",byte[].class);
  }
 catch (  ClassNotFoundException e) {
  }
  Object foo=mapper.readValue(jsonString,__POJO.class);
  foo=mapperReadValueBytes == null ? null : mapperReadValueBytes.invoke(mapper,jsonBytes,__POJO.class);
  if (mapperReader != null) {
    Object reader=mapperReader.invoke(mapper,__POJO.class);
    foo=readerReadValueString == null ? null : readerReadValueString.invoke(reader,jsonString);
    foo=readerReadValueBytes == null ? null : readerReadValueBytes.invoke(reader,jsonBytes);
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  ExpectedAnnotation length=annotation("jackson.json.length",20);
  verifier.verifyTraceBlock(BlockType.EVENT,"JACKSON",mapperReadValueString,null,null,null,null,annotation("jackson.json.length",jsonString.length()));
  if (mapperReadValueBytes != null) {
    verifier.verifyTraceBlock(BlockType.EVENT,"JACKSON",mapperReadValueBytes,null,null,null,null,annotation("jackson.json.length",jsonBytes.length));
  }
  if (readerReadValueString != null) {
    verifier.verifyTraceBlock(BlockType.EVENT,"JACKSON",readerReadValueString,null,null,null,null,annotation("jackson.json.length",jsonString.length()));
  }
  if (readerReadValueBytes != null) {
    verifier.verifyTraceBlock(BlockType.EVENT,"JACKSON",readerReadValueBytes,null,null,null,null,annotation("jackson.json.length",jsonBytes.length));
  }
  verifier.verifyTraceBlockCount(0);
}
