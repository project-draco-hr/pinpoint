{
  final String jvmSignature=JavaAssistUtils.javaTypeToJvmSignature(args);
  for (  CtMethod method : ctClass.getDeclaredMethods()) {
    if (!method.getName().equals(methodName)) {
      continue;
    }
    final String descriptor=method.getMethodInfo2().getDescriptor();
    if (descriptor.startsWith(jvmSignature)) {
      throw new InstrumentException(getName() + "already have method(" + methodName+ ").");
    }
  }
  try {
    final CtClass superClass=ctClass.getSuperclass();
    CtMethod superMethod=null;
    for (    CtMethod method : superClass.getDeclaredMethods()) {
      if (!method.getName().equals(methodName)) {
        continue;
      }
      final String descriptor=method.getMethodInfo2().getDescriptor();
      if (descriptor.startsWith(jvmSignature)) {
        superMethod=method;
        break;
      }
    }
    if (superMethod == null) {
      throw new NotFoundInstrumentException(methodName + Arrays.toString(args) + " is not found in "+ superClass.getName());
    }
    CtMethod delegatorMethod=CtNewMethod.delegator(superMethod,ctClass);
    ctClass.addMethod(delegatorMethod);
  }
 catch (  NotFoundException ex) {
    throw new InstrumentException(getName() + "don't have super class(" + getSuperClass()+ "). Cause:"+ ex.getMessage(),ex);
  }
catch (  CannotCompileException ex) {
    throw new InstrumentException(methodName + " addDelegatorMethod fail. Cause:" + ex.getMessage(),ex);
  }
}
