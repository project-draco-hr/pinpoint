{
  final String target=getTargetIdentifier(behavior);
  final String[] parameterType=JavaAssistUtils.parseParameterSignature(behavior.getSignature());
  String parameterDescription=null;
  if (interceptorType == STATIC_INTERCEPTOR) {
    parameterDescription=JavaAssistUtils.getParameterDescription(parameterType);
  }
  final String parameterIdentifier=getParameterIdentifier(parameterType);
  CodeBuilder code=new CodeBuilder();
  if (useContextClassLoader) {
    code.begin();
    beginAddFindInterceptorCode(id,code,interceptorType);
    if (interceptorType == STATIC_INTERCEPTOR) {
      code.append("  java.lang.Class[] beforeMethodParams = new Class[]{java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object[].class};");
    }
 else {
      code.append("  java.lang.Class[] beforeMethodParams = new Class[]{java.lang.Object.class, java.lang.Object[].class};");
    }
    code.format("  java.lang.reflect.Method beforeMethod = interceptor.getClass().getMethod(\"%1$s\", beforeMethodParams);","before");
    if (interceptorType == STATIC_INTERCEPTOR) {
      code.format("  java.lang.Object[] beforeParams = new java.lang.Object[] { %1$s, \"%2$s\", \"%3$s\", \"%4$s\", %5$s };",target,ctClass.getName(),methodName,parameterDescription,parameterIdentifier);
    }
 else {
      code.format("  java.lang.Object[] beforeParams = new java.lang.Object[] { %1$s, %2$s };",target,parameterIdentifier);
    }
    code.append("  beforeMethod.invoke(interceptor, beforeParams);");
    code.append("}");
    code.end();
  }
 else {
    code.begin();
    if (interceptorType == STATIC_INTERCEPTOR) {
      code.format("  %1$s interceptor = com.nhn.pinpoint.bootstrap.interceptor.InterceptorRegistry.getInterceptor(%2$d);",StaticAroundInterceptor.class.getName(),id);
      code.format("  interceptor.before(%1$s, \"%2$s\", \"%3$s\", \"%4$s\", %5$s);",target,ctClass.getName(),methodName,parameterDescription,parameterIdentifier);
    }
 else {
      code.format("  %1$s interceptor = (%1$s)com.nhn.pinpoint.bootstrap.interceptor.InterceptorRegistry.getSimpleInterceptor(%2$d);",SimpleBeforeInterceptor.class.getName(),id);
      code.format("  interceptor.before(%1$s, %2$s);",target,parameterIdentifier);
    }
    code.end();
  }
  String buildBefore=code.toString();
  if (isDebug) {
    logger.debug("addBeforeInterceptor catch behavior:{} code:{}",behavior.getLongName(),buildBefore);
  }
  if (behavior instanceof CtConstructor) {
    ((CtConstructor)behavior).insertBeforeBody(buildBefore);
  }
 else {
    behavior.insertBefore(buildBefore);
  }
}
