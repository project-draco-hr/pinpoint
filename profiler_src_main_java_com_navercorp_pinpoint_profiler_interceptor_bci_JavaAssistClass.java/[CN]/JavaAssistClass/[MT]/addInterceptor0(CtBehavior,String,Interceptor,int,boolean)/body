{
  try {
    if (interceptor != null) {
      if (interceptor instanceof StaticAroundInterceptor) {
        StaticAroundInterceptor staticAroundInterceptor=(StaticAroundInterceptor)interceptor;
        interceptorId=InterceptorRegistry.addInterceptor(staticAroundInterceptor);
      }
 else       if (interceptor instanceof SimpleInterceptor) {
        SimpleInterceptor simpleAroundInterceptor=(SimpleInterceptor)interceptor;
        interceptorId=InterceptorRegistry.addSimpleInterceptor(simpleAroundInterceptor);
      }
 else {
        throw new InstrumentException("unsupported Interceptor Type:" + interceptor);
      }
      injectInterceptor(behavior,interceptor);
    }
 else {
      interceptor=InterceptorRegistry.findInterceptor(interceptorId);
    }
    if (interceptor instanceof StaticAroundInterceptor) {
      addStaticAroundInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
    }
 else     if (interceptor instanceof SimpleInterceptor) {
      if (interceptor instanceof SimpleAroundInterceptor) {
        addSimpleAroundInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
      }
 else       if (interceptor instanceof SimpleBeforeInterceptor) {
        addSimpleBeforeInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
      }
 else       if (interceptor instanceof SimpleAfterInterceptor) {
        addSimpleAfterInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
      }
 else {
        throw new UnsupportedOperationException("unsupport type");
      }
    }
 else {
      throw new IllegalArgumentException("unsupported");
    }
    return interceptorId;
  }
 catch (  NotFoundException e) {
    throw new InstrumentException(interceptor.getClass().getSimpleName() + " add fail. Cause:" + e.getMessage(),e);
  }
catch (  CannotCompileException e) {
    throw new InstrumentException(interceptor.getClass().getSimpleName() + "add fail. Cause:" + e.getMessage(),e);
  }
}
