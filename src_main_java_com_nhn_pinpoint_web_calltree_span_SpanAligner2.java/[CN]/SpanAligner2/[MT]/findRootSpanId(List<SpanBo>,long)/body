{
  final List<SpanBo> root=new ArrayList<SpanBo>();
  for (  SpanBo span : spans) {
    if (span.getParentSpanId() == ROOT) {
      root.add(span);
    }
  }
  final int matchSize=root.size();
  if (matchSize == 1) {
    final SpanBo spanBo=root.get(0);
    logger.debug("root span found best match:{}",spanBo);
    matchType=BEST_MATCH;
    return spanBo.getSpanId();
  }
  if (matchSize > 1) {
    logger.warn("parentSpanId(-1) collision. size:{} root span:{} allSpan:{}",matchSize,root,spans);
    throw new IllegalStateException("parentSpanId(-1) collision. size:" + matchSize);
  }
  final List<SpanBo> startTimeMatcher=new ArrayList<SpanBo>();
  for (  SpanBo span : spans) {
    if (span.getCollectorAcceptTime() == selectedSpanStartTime) {
      startTimeMatcher.add(span);
    }
  }
  final int startMatchSize=startTimeMatcher.size();
  if (startMatchSize == 1) {
    final SpanBo spanBo=startTimeMatcher.get(0);
    logger.info("startTime span found startTime match:{}",spanBo);
    matchType=START_TIME_MATCH;
    return spanBo.getSpanId();
  }
  if (startMatchSize > 1) {
    logger.warn("startTime match collision. size:{} selectedSpanStartTime:{} span:{} allSpan:{}",startMatchSize,selectedSpanStartTime,startMatchSize,spans);
    throw new IllegalStateException("startTime match collision size:" + startMatchSize + " selectedSpanStartTime:"+ selectedSpanStartTime);
  }
  logger.warn("startTime match not found. size:{} selectedSpanStartTime:{} span:{} allSpan:{}",startMatchSize,selectedSpanStartTime,startMatchSize,spans);
  throw new IllegalStateException("startTime match not found startTime size:" + startMatchSize + " selectedSpanStartTime:"+ selectedSpanStartTime);
}
