{
  logger.debug("populate start");
  int currentDepth=spanDepth;
  int lastChildSequence=sequence;
  if (logger.isDebugEnabled()) {
    logger.debug("span type:{} depth:{} spanDepth:{} lastChildSequence:{}",currentDepth,span.getServiceType(),spanDepth,lastChildSequence);
  }
  SpanAlign element=new SpanAlign(currentDepth,span,++lastChildSequence);
  container.add(element);
  List<SpanEventBo> spanEventBoList=span.getSpanEventBoList();
  if (spanEventBoList == null) {
    return sequence;
  }
  element.setHasChild(true);
  for (  SpanEventBo spanEventBo : spanEventBoList) {
    if (spanEventBo.getDepth() != -1) {
      currentDepth=spanDepth + spanEventBo.getDepth();
    }
    if (logger.isDebugEnabled()) {
      logger.debug("spanEvent type:{} depth:{} spanEventDepth:{} lastChildSequence:{}",spanEventBo.getServiceType(),currentDepth,spanEventBo.getDepth(),lastChildSequence);
    }
    lastChildSequence++;
    SpanAlign sa=new SpanAlign(currentDepth,lastChildSequence,span,spanEventBo);
    container.add(sa);
    int nextSpanId=spanEventBo.getNextSpanId();
    if (nextSpanId != ROOT && spanMap.containsKey(nextSpanId)) {
      int childDepth=currentDepth + 1;
      lastChildSequence=populate(spanMap.get(nextSpanId),childDepth,lastChildSequence,container);
    }
  }
  logger.debug("populate end");
  return lastChildSequence;
}
