{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  lastComparison=Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetAgentId()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.agentId,other.agentId);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetDataTime()).compareTo(other.isSetDataTime());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetDataTime()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.dataTime,other.dataTime);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetActiveThreadCount()).compareTo(other.isSetActiveThreadCount());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetActiveThreadCount()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.activeThreadCount,other.activeThreadCount);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetGc1Count()).compareTo(other.isSetGc1Count());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetGc1Count()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.gc1Count,other.gc1Count);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetGc1Time()).compareTo(other.isSetGc1Time());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetGc1Time()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.gc1Time,other.gc1Time);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetGc2Count()).compareTo(other.isSetGc2Count());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetGc2Count()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.gc2Count,other.gc2Count);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetGc2Time()).compareTo(other.isSetGc2Time());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetGc2Time()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.gc2Time,other.gc2Time);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetHeapUsed()).compareTo(other.isSetHeapUsed());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetHeapUsed()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.heapUsed,other.heapUsed);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetHeapCommitted()).compareTo(other.isSetHeapCommitted());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetHeapCommitted()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.heapCommitted,other.heapCommitted);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetNonHeapUsed()).compareTo(other.isSetNonHeapUsed());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetNonHeapUsed()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.nonHeapUsed,other.nonHeapUsed);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetNonHeapCommitted()).compareTo(other.isSetNonHeapCommitted());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetNonHeapCommitted()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.nonHeapCommitted,other.nonHeapCommitted);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetProcessCPUTime()).compareTo(other.isSetProcessCPUTime());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetProcessCPUTime()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.processCPUTime,other.processCPUTime);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
