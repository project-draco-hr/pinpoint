{
  final String className=toClassName(fullQualifiedMethodName);
  final String methodName=toMethodName(fullQualifiedMethodName);
  context.addClassFileTransformer(className,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentContext,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentContext.getInstrumentClass(classLoader,className,classfileBuffer);
      for (      InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(methodName))) {
        try {
          method.addInterceptor("com.navercorp.pinpoint.plugin.user.interceptor.UserIncludeMethodInterceptor");
        }
 catch (        Exception e) {
          if (logger.isWarnEnabled()) {
            logger.warn("Unsupported method " + method,e);
          }
        }
      }
      return target.toBytecode();
    }
  }
);
}
