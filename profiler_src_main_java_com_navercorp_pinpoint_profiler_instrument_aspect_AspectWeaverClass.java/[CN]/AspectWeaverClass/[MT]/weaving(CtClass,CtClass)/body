{
  if (logger.isInfoEnabled()) {
    logger.info("weaving sourceClass:{} advice:{}",sourceClass.getName(),adviceClass.getName());
  }
  if (!isAspectClass(adviceClass)) {
    throw new RuntimeException("@Aspect not found. adviceClass:" + adviceClass);
  }
  final boolean isSubClass=adviceClass.subclassOf(sourceClass);
  if (!isSubClass) {
    final CtClass superClass=adviceClass.getSuperclass();
    if (!superClass.getName().equals("java.lang.Object")) {
      throw new CannotCompileException("invalid class hierarchy. " + sourceClass.getName() + " adviceSuperClass:"+ superClass.getName());
    }
  }
  copyUtilMethod(sourceClass,adviceClass);
  final List<CtMethod> pointCutMethodList=findAnnotationMethod(adviceClass,PointCut.class);
  final List<CtMethod> jointPointList=findAnnotationMethod(adviceClass,JointPoint.class);
  for (  CtMethod adviceMethod : pointCutMethodList) {
    final CtMethod sourceMethod=sourceClass.getDeclaredMethod(adviceMethod.getName(),adviceMethod.getParameterTypes());
    if (!sourceMethod.getSignature().equals(adviceMethod.getSignature())) {
      throw new CannotCompileException("Signature miss match. method:" + adviceMethod.getName() + " source:"+ sourceMethod.getSignature()+ " advice:"+ adviceMethod.getSignature());
    }
    if (logger.isInfoEnabled()) {
      logger.info("weaving method:{}{}",sourceMethod.getName(),sourceMethod.getSignature());
    }
    weavingMethod(sourceClass,sourceMethod,adviceMethod,jointPointList,isSubClass);
  }
}
