{
  final LimitedScanResult<List<TransactionId>> limitedScanResult=flow.selectTraceIdsFromApplicationTraceIndex(applicationName,range,limit,backwardDirection);
  final List<TransactionId> traceIdList=limitedScanResult.getScanData();
  logger.trace("submitted transactionId count={}",traceIdList.size());
  boolean requestComplete=traceIdList.size() < limit;
  Collections.sort(traceIdList,TransactionIdComparator.INSTANCE);
  Filter filter=filterBuilder.build(filterText);
  ModelAndView mv;
  if (version == 1) {
    ScatterData scatterData=scatter.selectScatterData(traceIdList,applicationName,range,xGroupUnit,yGroupUnit,filter);
    if (logger.isDebugEnabled()) {
      logger.debug("getScatterData range scan(limited:{}, backwardDirection:{}) from ~ to:{} ~ {}, limited:{}, filterDataSize:{}",limit,backwardDirection,DateUtils.longToDateStr(range.getFrom()),DateUtils.longToDateStr(range.getTo()),DateUtils.longToDateStr(limitedScanResult.getLimitedTime()),traceIdList.size());
    }
    mv=createScatterDataV1(scatterData,requestComplete);
  }
 else {
    mv=new ModelAndView();
  }
  mv.addObject("currentServerTime",new ServerTime().getCurrentServerTime());
  mv.addObject("from",range.getFrom());
  mv.addObject("to",range.getTo());
  return mv;
}
