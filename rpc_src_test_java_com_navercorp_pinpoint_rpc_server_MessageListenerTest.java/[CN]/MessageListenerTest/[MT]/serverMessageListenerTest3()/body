{
  PinpointServerSocket ss=new PinpointServerSocket();
  ss.bind("127.0.0.1",10234);
  PinpointSocketFactory socketFactory1=createPinpointSocketFactory();
  EchoMessageListener echoMessageListener1=new EchoMessageListener();
  socketFactory1.setMessageListener(echoMessageListener1);
  PinpointSocketFactory socketFactory2=createPinpointSocketFactory();
  EchoMessageListener echoMessageListener2=new EchoMessageListener();
  socketFactory2.setMessageListener(echoMessageListener2);
  try {
    PinpointSocket socket=socketFactory1.connect("127.0.0.1",10234);
    PinpointSocket socket2=socketFactory2.connect("127.0.0.1",10234);
    Thread.sleep(500);
    List<ChannelContext> channelContextList=ss.getDuplexCommunicationChannelContext();
    if (channelContextList.size() != 2) {
      Assert.fail();
    }
    ChannelContext channelContext=channelContextList.get(0);
    Future<ResponseMessage> future=channelContext.getSocketChannel().sendRequestMessage("socket1".getBytes());
    ChannelContext channelContext2=channelContextList.get(1);
    Future<ResponseMessage> future2=channelContext2.getSocketChannel().sendRequestMessage("socket2".getBytes());
    future.await();
    future2.await();
    Assert.assertEquals("socket1",new String(future.getResult().getMessage()));
    Assert.assertEquals("socket2",new String(future2.getResult().getMessage()));
    socket.close();
    socket2.close();
  }
  finally {
    socketFactory1.release();
    socketFactory2.release();
    ss.close();
  }
}
