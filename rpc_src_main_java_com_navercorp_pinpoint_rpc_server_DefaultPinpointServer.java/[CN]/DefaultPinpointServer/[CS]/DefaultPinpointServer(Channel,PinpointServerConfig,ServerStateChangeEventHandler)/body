{
  this.channel=channel;
  this.messageListener=serverConfig.getMessageListener();
  StreamChannelManager streamChannelManager=new StreamChannelManager(channel,IDGenerator.createEvenIdGenerator(),serverConfig.getStreamMessageListener());
  this.streamChannelManager=streamChannelManager;
  this.stateChangeEventListeners=new ArrayList<ServerStateChangeEventHandler>();
  List<ServerStateChangeEventHandler> configuredStateChangeEventHandlers=serverConfig.getStateChangeEventHandlers();
  if (configuredStateChangeEventHandlers != null) {
    for (    ServerStateChangeEventHandler configuredStateChangeEventHandler : configuredStateChangeEventHandlers) {
      ListUtils.addIfValueNotNull(this.stateChangeEventListeners,configuredStateChangeEventHandler);
    }
  }
  ListUtils.addAllExceptNullValue(this.stateChangeEventListeners,stateChangeEventListeners);
  if (this.stateChangeEventListeners.isEmpty()) {
    this.stateChangeEventListeners.add(DoNothingChannelStateEventHandler.INSTANCE);
  }
  RequestManager requestManager=new RequestManager(serverConfig.getRequestManagerTimer(),serverConfig.getDefaultRequestTimeout());
  this.requestManager=requestManager;
  this.objectUniqName=ClassUtils.simpleClassNameAndHashCodeString(this);
  this.serverCloseWriteListener=new WriteFailFutureListener(logger,objectUniqName + " sendClosePacket() write fail.","serverClosePacket write success");
  this.responseWriteFailListener=new WriteFailFutureListener(logger,objectUniqName + " response() write fail.");
  this.state=new DefaultPinpointServerState(this,this.stateChangeEventListeners);
  this.stateChecker=new CyclicStateChecker(5);
  this.localClusterOption=serverConfig.getClusterOption();
}
