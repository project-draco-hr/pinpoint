{
  if (instrumentation == null) {
    throw new NullPointerException("instrumentation must not be null");
  }
  if (profilerConfig == null) {
    throw new NullPointerException("profilerConfig must not be null");
  }
  if (interceptorRegistryBinder == null) {
    throw new NullPointerException("interceptorRegistryBinder must not be null");
  }
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  this.interceptorRegistryBinder=interceptorRegistryBinder;
  interceptorRegistryBinder.bind();
  dumpSystemProperties();
  dumpConfig(profilerConfig);
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=profilerConfig;
  List<DefaultProfilerPluginContext> pluginContexts=loadProfilerPlugins(profilerConfig,pluginJars);
  final ApplicationServerTypeResolver typeResolver=new ApplicationServerTypeResolver(pluginContexts,profilerConfig.getApplicationServerType());
  if (!typeResolver.resolve()) {
    throw new PinpointException("ApplicationServerType not found.");
  }
  this.byteCodeInstrumentor=new JavaAssistByteCodeInstrumentor(this,interceptorRegistryBinder);
  if (logger.isInfoEnabled()) {
    logger.info("DefaultAgent classLoader:{}",this.getClass().getClassLoader());
  }
  final AgentInformationFactory agentInformationFactory=new AgentInformationFactory();
  this.agentInformation=agentInformationFactory.createAgentInformation(typeResolver.getServerType());
  logger.info("agentInformation:{}",agentInformation);
  CommandDispatcher commandDispatcher=createCommandDispatcher();
  this.factory=createPinpointSocketFactory(commandDispatcher);
  this.socket=createPinpointSocket(this.profilerConfig.getCollectorTcpServerIp(),this.profilerConfig.getCollectorTcpServerPort(),factory);
  this.serverMetaDataHolder=createServerMetaDataHolder();
  this.tcpDataSender=createTcpDataSender(socket);
  this.spanDataSender=createUdpSpanDataSender(this.profilerConfig.getCollectorSpanServerPort(),"Pinpoint-UdpSpanDataExecutor",this.profilerConfig.getSpanDataSenderWriteQueueSize(),this.profilerConfig.getSpanDataSenderSocketTimeout(),this.profilerConfig.getSpanDataSenderSocketSendBufferSize());
  this.statDataSender=createUdpStatDataSender(this.profilerConfig.getCollectorStatServerPort(),"Pinpoint-UdpStatDataExecutor",this.profilerConfig.getStatDataSenderWriteQueueSize(),this.profilerConfig.getStatDataSenderSocketTimeout(),this.profilerConfig.getStatDataSenderSocketSendBufferSize());
  this.traceContext=createTraceContext(agentInformation.getServerType());
  this.agentInfoSender=new AgentInfoSender(tcpDataSender,profilerConfig.getAgentInfoSendRetryInterval(),this.agentInformation,this.serverMetaDataHolder);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender,this.agentInformation.getAgentId(),this.agentInformation.getStartTime());
  ClassFileRetransformer retransformer=new ClassFileRetransformer(instrumentation);
  instrumentation.addTransformer(retransformer,true);
  this.classFileTransformer=new ClassFileTransformerDispatcher(this,byteCodeInstrumentor,retransformer,pluginContexts,pluginJars);
  instrumentation.addTransformer(this.classFileTransformer);
  preLoadClass();
  if (typeResolver.isManuallyStartupRequired()) {
    start();
  }
}
