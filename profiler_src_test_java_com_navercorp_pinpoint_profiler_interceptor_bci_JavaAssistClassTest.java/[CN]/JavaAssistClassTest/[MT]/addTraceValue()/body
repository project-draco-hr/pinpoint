{
  final TestClassLoader loader=getTestClassLoader();
  final String javassistClassName="com.navercorp.pinpoint.profiler.interceptor.bci.TestObject";
  loader.addTransformer(javassistClassName,new PinpointClassFileTransformer(){
    @Override public byte[] transform(    ProfilerPluginInstrumentContext instrumentContext,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      try {
        logger.info("modify cl:{}",loader);
        InstrumentClass aClass=instrumentContext.getInstrumentClass(loader,javassistClassName,classfileBuffer);
        aClass.addField(ObjectTraceValue.class.getName());
        aClass.addField(IntTraceValue.class.getName());
        aClass.addField(DatabaseInfoTraceValue.class.getName());
        aClass.addField(BindValueTraceValue.class.getName());
        String methodName="callA";
        aClass.getDeclaredMethod(methodName).addInterceptor("com.navercorp.pinpoint.profiler.interceptor.TestBeforeInterceptor");
        return aClass.toBytecode();
      }
 catch (      InstrumentException e) {
        e.printStackTrace();
        throw new RuntimeException(e.getMessage(),e);
      }
    }
  }
);
  loader.initialize();
  Class<?> testObjectClazz=loader.loadClass(javassistClassName);
  final String methodName="callA";
  logger.info("class:{}",testObjectClazz.toString());
  final Object testObject=testObjectClazz.newInstance();
  Method callA=testObjectClazz.getMethod(methodName);
  callA.invoke(testObject);
  if (testObject instanceof ObjectTraceValue) {
    ObjectTraceValue objectTraceValue=(ObjectTraceValue)testObject;
    objectTraceValue._$PINPOINT$_setTraceObject("a");
    Object get=objectTraceValue._$PINPOINT$_getTraceObject();
    Assert.assertEquals("a",get);
  }
 else {
    Assert.fail("ObjectTraceValue implements fail");
  }
  if (testObject instanceof IntTraceValue) {
    IntTraceValue intTraceValue=(IntTraceValue)testObject;
    intTraceValue._$PINPOINT$_setTraceInt(1);
    int a=intTraceValue._$PINPOINT$_getTraceInt();
    Assert.assertEquals(1,a);
  }
 else {
    Assert.fail("IntTraceValue implements fail");
  }
  if (testObject instanceof DatabaseInfoTraceValue) {
    DatabaseInfoTraceValue databaseInfoTraceValue=(DatabaseInfoTraceValue)testObject;
    databaseInfoTraceValue._$PINPOINT$_setTraceDatabaseInfo(UnKnownDatabaseInfo.INSTANCE);
    DatabaseInfo databaseInfo=databaseInfoTraceValue._$PINPOINT$_getTraceDatabaseInfo();
    Assert.assertSame(UnKnownDatabaseInfo.INSTANCE,databaseInfo);
  }
 else {
    Assert.fail("DatabaseInfoTraceValue implements fail");
  }
  if (testObject instanceof BindValueTraceValue) {
    BindValueTraceValue bindValueTraceValue=(BindValueTraceValue)testObject;
    Map<Integer,String> integerStringMap=Collections.emptyMap();
    bindValueTraceValue._$PINPOINT$_setTraceBindValue(integerStringMap);
    Map<Integer,String> bindValueMap=bindValueTraceValue._$PINPOINT$_getTraceBindValue();
    Assert.assertSame(integerStringMap,bindValueMap);
  }
 else {
    Assert.fail("BindValueTraceValue implements fail");
  }
}
