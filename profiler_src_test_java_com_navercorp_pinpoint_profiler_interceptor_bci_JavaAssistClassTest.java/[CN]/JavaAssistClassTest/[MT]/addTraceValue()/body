{
  final TestClassLoader loader=getTestClassLoader();
  final String javassistClassName="com.navercorp.pinpoint.profiler.interceptor.bci.TestObject";
  final TestModifier testModifier=new TestModifier(loader.getInstrumentor(),loader.getAgent()){
    @Override public byte[] modify(    ClassLoader classLoader,    String className,    ProtectionDomain protectedDomain,    byte[] classFileBuffer){
      try {
        logger.info("modify cl:{}",classLoader);
        InstrumentClass aClass=byteCodeInstrumentor.getClass(classLoader,javassistClassName,classFileBuffer);
        Interceptor interceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,"com.navercorp.pinpoint.profiler.interceptor.TestBeforeInterceptor");
        addInterceptor(interceptor);
        aClass.addTraceValue(ObjectTraceValue.class);
        aClass.addTraceValue(IntTraceValue.class);
        aClass.addTraceValue(DatabaseInfoTraceValue.class);
        aClass.addTraceValue(BindValueTraceValue.class);
        logger.info(interceptor.getClass().getClassLoader().toString());
        String methodName="callA";
        aClass.addInterceptor(methodName,null,interceptor);
        return aClass.toBytecode();
      }
 catch (      InstrumentException e) {
        e.printStackTrace();
        throw new RuntimeException(e.getMessage(),e);
      }
    }
  }
;
  testModifier.setTargetClass(javassistClassName);
  loader.addModifier(testModifier);
  loader.initialize();
  Class<?> testObjectClazz=loader.loadClass(javassistClassName);
  final String methodName="callA";
  logger.info("class:{}",testObjectClazz.toString());
  final Object testObject=testObjectClazz.newInstance();
  Method callA=testObjectClazz.getMethod(methodName);
  callA.invoke(testObject);
  if (testObject instanceof ObjectTraceValue) {
    ObjectTraceValue objectTraceValue=(ObjectTraceValue)testObject;
    objectTraceValue._$PINPOINT$_setTraceObject("a");
    Object get=objectTraceValue._$PINPOINT$_getTraceObject();
    Assert.assertEquals("a",get);
  }
 else {
    Assert.fail("ObjectTraceValue implements fail");
  }
  if (testObject instanceof IntTraceValue) {
    IntTraceValue intTraceValue=(IntTraceValue)testObject;
    intTraceValue._$PINPOINT$_setTraceInt(1);
    int a=intTraceValue._$PINPOINT$_getTraceInt();
    Assert.assertEquals(1,a);
  }
 else {
    Assert.fail("IntTraceValue implements fail");
  }
  if (testObject instanceof DatabaseInfoTraceValue) {
    DatabaseInfoTraceValue databaseInfoTraceValue=(DatabaseInfoTraceValue)testObject;
    databaseInfoTraceValue._$PINPOINT$_setTraceDatabaseInfo(UnKnownDatabaseInfo.INSTANCE);
    DatabaseInfo databaseInfo=databaseInfoTraceValue._$PINPOINT$_getTraceDatabaseInfo();
    Assert.assertSame(UnKnownDatabaseInfo.INSTANCE,databaseInfo);
  }
 else {
    Assert.fail("DatabaseInfoTraceValue implements fail");
  }
  if (testObject instanceof BindValueTraceValue) {
    BindValueTraceValue bindValueTraceValue=(BindValueTraceValue)testObject;
    Map<Integer,String> integerStringMap=Collections.emptyMap();
    bindValueTraceValue._$PINPOINT$_setTraceBindValue(integerStringMap);
    Map<Integer,String> bindValueMap=bindValueTraceValue._$PINPOINT$_getTraceBindValue();
    Assert.assertSame(integerStringMap,bindValueMap);
  }
 else {
    Assert.fail("BindValueTraceValue implements fail");
  }
}
