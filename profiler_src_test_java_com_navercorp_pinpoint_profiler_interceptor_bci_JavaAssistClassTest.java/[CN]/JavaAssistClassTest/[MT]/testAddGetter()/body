{
  final TestClassLoader loader=getTestClassLoader();
  final String targetClassName="com.navercorp.pinpoint.profiler.interceptor.bci.TestObject3";
  loader.addTransformer(targetClassName,new PinpointClassFileTransformer(){
    @Override public byte[] transform(    PinpointInstrument instrumentContext,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      try {
        logger.info("modify cl:{}",classLoader);
        InstrumentClass aClass=instrumentContext.getInstrumentClass(classLoader,className,classfileBuffer);
        aClass.addGetter(StringGetter.class.getName(),"value");
        aClass.addGetter(IntGetter.class.getName(),"intValue");
        return aClass.toBytecode();
      }
 catch (      InstrumentException e) {
        throw new RuntimeException(e.getMessage(),e);
      }
    }
  }
);
  loader.initialize();
  Object testObject=loader.loadClass(targetClassName).newInstance();
  Class<?> stringGetter=loader.loadClass(StringGetter.class.getName());
  Class<?> intGetter=loader.loadClass(IntGetter.class.getName());
  Assert.assertTrue(stringGetter.isInstance(testObject));
  Assert.assertTrue(intGetter.isInstance(testObject));
  String value="hehe";
  int intValue=99;
  Method method=testObject.getClass().getMethod("setValue",String.class);
  method.invoke(testObject,value);
  Method getString=stringGetter.getMethod("_$PINPOINT$_getString");
  Assert.assertEquals(value,getString.invoke(testObject));
  Method setIntValue=testObject.getClass().getMethod("setIntValue",int.class);
  setIntValue.invoke(testObject,intValue);
  Method getInt=intGetter.getMethod("_$PINPOINT$_getInt");
  Assert.assertEquals(intValue,getInt.invoke(testObject));
}
