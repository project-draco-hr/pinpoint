{
  final List<SpanEventBo> spanEventBoList=span.getSpanEventBoList();
  if (CollectionUtils.isEmpty(spanEventBoList)) {
    return;
  }
  final Application srcApplication=new Application(span.getApplicationId(),span.getServiceType());
  for (  SpanEventBo spanEvent : spanEventBoList) {
    ServiceType destServiceType=spanEvent.getServiceType();
    if (!destServiceType.isRecordStatistics()) {
      continue;
    }
    if (destServiceType.isRpcClient()) {
      if (transactionSpanMap.containsKey(spanEvent.getNextSpanId())) {
        continue;
      }
 else {
        destServiceType=ServiceType.UNKNOWN;
      }
    }
    final String dest=spanEvent.getDestinationId();
    final Application destApplication=new Application(dest,destServiceType);
    final LinkKey spanEventStatKey=new LinkKey(srcApplication,destApplication);
    LinkStatistics linkData=linkStatMap.get(spanEventStatKey);
    if (linkData == null) {
      linkData=new LinkStatistics(srcApplication,destApplication);
      linkStatMap.put(spanEventStatKey,linkData);
    }
    final int slotTime=getHistogramSlotTime(spanEvent,destServiceType);
    linkData.addCallData(span.getAgentId(),span.getServiceType().getCode(),spanEvent.getEndPoint(),destServiceType.getCode(),(short)slotTime,1);
    timeSeriesStore.addLinkStat(spanEventStatKey,span.getStartTime() + spanEvent.getStartElapsed(),slotTime,1L,spanEvent.hasException());
    Application nodeKey=new Application(spanEvent.getDestinationId(),spanEvent.getServiceType());
    timeSeriesStore.addNodeStat(nodeKey,span.getCollectorAcceptTime(),slotTime,1L,spanEvent.hasException());
  }
}
