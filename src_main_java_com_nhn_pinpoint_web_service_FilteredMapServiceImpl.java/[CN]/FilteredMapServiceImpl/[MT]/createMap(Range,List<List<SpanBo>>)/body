{
  final TimeWindow window=new TimeWindow(range,TimeWindowOneMinuteSampler.SAMPLER);
  final LinkStatisticsData linkStatisticsData=new LinkStatisticsData();
  final MapResponseHistogramSummary mapHistogramSummary=new MapResponseHistogramSummary(range);
  for (  List<SpanBo> transaction : filterList) {
    final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);
    for (    SpanBo span : transaction) {
      final Application srcApplication=createSourceApplication(span,transactionSpanMap);
      final Application destApplication=new Application(span.getApplicationId(),span.getServiceType());
      recordSpanResponseTime(destApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());
      if (!destApplication.getServiceType().isRecordStatistics() || destApplication.getServiceType().isRpcClient()) {
        continue;
      }
      final short slotTime=getHistogramSlotTime(span,destApplication.getServiceType());
      long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());
      linkStatisticsData.addLinkData(srcApplication,span.getAgentId(),destApplication,destApplication.getName(),timestamp,slotTime,1);
      addNodeFromSpanEvent(span,window,linkStatisticsData,transactionSpanMap);
    }
  }
  for (  LinkStatistics stat : linkStatisticsData.getLinkStatData()) {
    fillAdditionalInfo(stat);
  }
  LinkStatisticsDataSet linkStatisticsDataSet=new LinkStatisticsDataSet(linkStatisticsData);
  ApplicationMapBuilder applicationMapBuilder=new ApplicationMapBuilder(range);
  ApplicationMap map=applicationMapBuilder.build(linkStatisticsDataSet);
  mapHistogramSummary.build();
  map.appendResponseTime(mapHistogramSummary);
  return map;
}
