{
  if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {
    return false;
  }
  String[] pattDirs=tokenizePattern(pattern);
  String[] pathDirs=tokenizePath(path);
  int pattIdxStart=0;
  int pattIdxEnd=pattDirs.length - 1;
  int pathIdxStart=0;
  int pathIdxEnd=pathDirs.length - 1;
  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    String pattDir=pattDirs[pattIdxStart];
    if ("**".equals(pattDir)) {
      break;
    }
    if (!matchStrings(pattDir,pathDirs[pathIdxStart],uriTemplateVariables)) {
      return false;
    }
    pattIdxStart++;
    pathIdxStart++;
  }
  if (pathIdxStart > pathIdxEnd) {
    if (pattIdxStart > pattIdxEnd) {
      return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator));
    }
    if (!fullMatch) {
      return true;
    }
    if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {
      return true;
    }
    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
      if (!pattDirs[i].equals("**")) {
        return false;
      }
    }
    return true;
  }
 else   if (pattIdxStart > pattIdxEnd) {
    return false;
  }
 else   if (!fullMatch && "**".equals(pattDirs[pattIdxStart])) {
    return true;
  }
  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    String pattDir=pattDirs[pattIdxEnd];
    if (pattDir.equals("**")) {
      break;
    }
    if (!matchStrings(pattDir,pathDirs[pathIdxEnd],uriTemplateVariables)) {
      return false;
    }
    pattIdxEnd--;
    pathIdxEnd--;
  }
  if (pathIdxStart > pathIdxEnd) {
    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
      if (!pattDirs[i].equals("**")) {
        return false;
      }
    }
    return true;
  }
  while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    int patIdxTmp=-1;
    for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {
      if (pattDirs[i].equals("**")) {
        patIdxTmp=i;
        break;
      }
    }
    if (patIdxTmp == pattIdxStart + 1) {
      pattIdxStart++;
      continue;
    }
    int patLength=(patIdxTmp - pattIdxStart - 1);
    int strLength=(pathIdxEnd - pathIdxStart + 1);
    int foundIdx=-1;
    strLoop:     for (int i=0; i <= strLength - patLength; i++) {
      for (int j=0; j < patLength; j++) {
        String subPat=pattDirs[pattIdxStart + j + 1];
        String subStr=pathDirs[pathIdxStart + i + j];
        if (!matchStrings(subPat,subStr,uriTemplateVariables)) {
          continue strLoop;
        }
      }
      foundIdx=pathIdxStart + i;
      break;
    }
    if (foundIdx == -1) {
      return false;
    }
    pattIdxStart=patIdxTmp;
    pathIdxStart=foundIdx + patLength;
  }
  for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
    if (!pattDirs[i].equals("**")) {
      return false;
    }
  }
  return true;
}
