{
  if (instrumentation == null) {
    throw new NullPointerException("instrumentation must not be null");
  }
  if (profilerConfig == null) {
    throw new NullPointerException("profilerConfig must not be null");
  }
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  dumpSystemProperties();
  dumpConfig(profilerConfig);
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=profilerConfig;
  this.serverInfo=new ServerInfo();
  String[] paths=getTomcatlibPath();
  this.byteCodeInstrumentor=new JavaAssistByteCodeInstrumentor(paths,this);
  ClassFileTransformerDispatcher classFileTransformerDispatcher=new ClassFileTransformerDispatcher(this);
  instrumentation.addTransformer(classFileTransformerDispatcher);
  this.agentInformation=createAgentInformation();
  logger.info("agentInformation:{}",agentInformation);
  this.tcpDataSender=createTcpDataSender();
  this.spanDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpSpanServerPort(),"Pinpoint-UdpSpanDataExecutor");
  this.statDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpServerPort(),"Pinpoint-UdpStatDataExecutor");
  this.traceContext=createTraceContext();
  this.tAgentInfo=createTAgentInfo();
  this.tAgentKey=createTAgentKey();
  this.heartBitChecker=new HeartBitChecker(tcpDataSender,profilerConfig.getHeartbeatInterval(),tAgentInfo);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender,this.agentInformation.getAgentId());
  SingletonHolder.INSTANCE=this;
  preLoadClass();
}
