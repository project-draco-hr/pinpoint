{
  if (instrumentation == null) {
    throw new NullPointerException("instrumentation must not be null");
  }
  if (profilerConfig == null) {
    throw new NullPointerException("profilerConfig must not be null");
  }
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  dumpSystemProperties();
  dumpConfig(profilerConfig);
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=profilerConfig;
  this.serverInfo=new ServerInfo();
  String[] paths=getTomcatlibPath();
  this.byteCodeInstrumentor=new JavaAssistByteCodeInstrumentor(paths,this);
  ClassFileTransformerDispatcher classFileTransformerDispatcher=new ClassFileTransformerDispatcher(this);
  instrumentation.addTransformer(classFileTransformerDispatcher);
  this.machineName=NetworkUtils.getHostName();
  this.agentId=getId("pinpoint.agentId",machineName,PinpointConstants.AGENT_NAME_MAX_LEN);
  this.applicationName=getId("pinpoint.applicationName","UnknownApplicationName",PinpointConstants.APPLICATION_NAME_MAX_LEN);
  this.startTime=RuntimeMXBeanUtils.getVmStartTime();
  this.pid=RuntimeMXBeanUtils.getPid();
  this.tcpDataSender=createTcpDataSender();
  this.spanDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpSpanServerPort(),"Pinpoint-UdpSpanDataExecutor");
  this.statDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpServerPort(),"Pinpoint-UdpStatDataExecutor");
  initializeTraceContext();
  this.agentInfo=createAgentInfo();
  this.heartBitChecker=new HeartBitChecker(tcpDataSender,profilerConfig.getHeartbeatInterval(),agentInfo);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender);
  this.agentStatMonitor.setAgentInfo(this.agentInfo);
  SingletonHolder.INSTANCE=this;
}
