{
  List<ByteArrayOutput> nodes01=new ArrayList<ByteArrayOutput>();
  final AtomicInteger writeTo01=new AtomicInteger(0);
  nodes01.add(new ByteArrayOutput(){
    public void writeTo(    OutputStream out) throws IOException {
      writeTo01.incrementAndGet();
    }
  }
);
  final AtomicInteger writeTo02=new AtomicInteger(0);
  List<ByteArrayOutput> nodes02=new ArrayList<ByteArrayOutput>();
  nodes02.add(new ByteArrayOutput(){
    public void writeTo(    OutputStream out) throws IOException {
      writeTo02.incrementAndGet();
    }
  }
);
  ByteArrayOutputStreamTransport transport=new ByteArrayOutputStreamTransport(new ByteArrayOutputStream());
  TReplaceListProtocol protocol01=new TReplaceListProtocol(new TCompactProtocol(transport));
  protocol01.addReplaceField("spanEventList",nodes01);
  span.write(protocol01);
  assertEquals(1,writeTo01.get());
  TReplaceListProtocol protocol02=new TReplaceListProtocol(new TCompactProtocol(transport));
  protocol02.addReplaceField("spanEventList",nodes02);
  span.write(protocol02);
  assertEquals(1,writeTo02.get());
}
