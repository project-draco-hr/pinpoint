{
  SimpleAroundInterceptor aroundInterceptor=new SimpleAroundInterceptor(){
    @Override public void before(    Object target,    Object[] args){
      logger.info("before target:" + target + " args:"+ Arrays.toString(args));
    }
    @Override public void after(    Object target,    Object[] args,    Object result,    Throwable throwable){
      logger.info("after target: " + target + " args:"+ Arrays.toString(args)+ " result:"+ result+ " throwable:"+ throwable);
    }
  }
;
  int interceptorId=INTERCEPTOR_REGISTRY_ADAPTOR.addSimpleInterceptor(aroundInterceptor);
  final ClassPool classPool=new ClassPool(true);
  CtClass throwable=classPool.get(Throwable.class.getName());
  CtClass ctClass=classPool.get("com.navercorp.pinpoint.profiler.interceptor.JavaAssistTestObject");
  final CtMethod hello=ctClass.getMethod("hello","(Ljava/lang/String;)Ljava/lang/String;");
  logger.debug("longName:{}",hello.getLongName());
  logger.debug("name:{}",hello.getName());
  String interceptorClassName=SimpleAroundInterceptor.class.getName();
  CtClass interceptor=classPool.get(interceptorClassName);
  hello.addLocalVariable("interceptor",interceptor);
  CtClass object=classPool.get(Object.class.getName());
  hello.addLocalVariable("result",object);
  hello.insertBefore("{" + "interceptor = (" + interceptorClassName + ") "+ InterceptorRegistry.class.getName()+ ".getSimpleInterceptor("+ interceptorId+ ");"+ "interceptor.before(this, $args);"+ "}");
  Loader loader=LoaderUtils.createLoader(classPool);
  loader.delegateLoadingOf("com.navercorp.pinpoint.bootstrap.");
  Class aClass=loader.loadClass(ctClass.getName());
  Object testObject=aClass.newInstance();
  Method helloMethod=testObject.getClass().getDeclaredMethod("hello",String.class);
  try {
    helloMethod.invoke(testObject,"hello~~");
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
}
