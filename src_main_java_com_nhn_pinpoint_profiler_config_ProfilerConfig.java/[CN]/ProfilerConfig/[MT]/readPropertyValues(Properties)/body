{
  this.profileEnable=readBoolean(prop,"profiler.enable",true);
  this.collectorServerIp=readString(prop,"profiler.collector.ip","127.0.0.1");
  this.collectorUdpSpanServerPort=readInt(prop,"profiler.collector.udpspan.port",9996);
  this.collectorUdpServerPort=readInt(prop,"profiler.collector.udp.port",9995);
  this.collectorTcpServerPort=readInt(prop,"profiler.collector.tcp.port",9994);
  this.spanDataSenderWriteQueueSize=readInt(prop,"profiler.spandatasender.write.queue.size",1024 * 5);
  this.statDataSenderWriteQueueSize=readInt(prop,"profiler.statdatasender.write.queue.size",1024 * 5);
  this.jdbcProfile=readBoolean(prop,"profiler.jdbc",true);
  this.jdbcSqlCacheSize=readInt(prop,"profiler.jdbc.sqlcachesize",1024);
  this.jdbcProfileMySql=readBoolean(prop,"profiler.jdbc.mysql",true);
  this.jdbcProfileMySqlSetAutoCommit=readBoolean(prop,"profiler.jdbc.mysql.setautocommit",false);
  this.jdbcProfileMySqlCommit=readBoolean(prop,"profiler.jdbc.mysql.commit",false);
  this.jdbcProfileMySqlRollback=readBoolean(prop,"profiler.jdbc.mysql.rollback",false);
  this.jdbcProfileMsSql=readBoolean(prop,"profiler.jdbc.mssql",true);
  this.jdbcProfileOracle=readBoolean(prop,"profiler.jdbc.oracle",true);
  this.jdbcProfileOracleSetAutoCommit=readBoolean(prop,"profiler.jdbc.oracle.setautocommit",false);
  this.jdbcProfileOracleCommit=readBoolean(prop,"profiler.jdbc.oracle.commit",false);
  this.jdbcProfileOracleRollback=readBoolean(prop,"profiler.jdbc.oracle.rollback",false);
  this.jdbcProfileCubrid=readBoolean(prop,"profiler.jdbc.cubrid",true);
  this.jdbcProfileCubridSetAutoCommit=readBoolean(prop,"profiler.jdbc.cubrid.setautocommit",false);
  this.jdbcProfileCubridCommit=readBoolean(prop,"profiler.jdbc.cubrid.commit",false);
  this.jdbcProfileCubridRollback=readBoolean(prop,"profiler.jdbc.cubrid.rollback",false);
  this.jdbcProfileDbcp=readBoolean(prop,"profiler.jdbc.dbcp",true);
  this.jdbcProfileDbcpConnectionClose=readBoolean(prop,"profiler.jdbc.dbcp.connectionclose",false);
  this.arucs=readBoolean(prop,"profiler.arcus",true);
  this.arucsKeyTrace=readBoolean(prop,"profiler.arcus.keytrace",false);
  this.memcached=readBoolean(prop,"profiler.memcached",true);
  this.memcachedKeyTrace=readBoolean(prop,"profiler.memcached.keytrace",false);
  this.apacheHttpClient4Profile=readBoolean(prop,"profiler.apache.httpclient4",true);
  this.apacheHttpClient4ProfileCookie=readBoolean(prop,"profiler.apache.httpclient4.cookie",false);
  this.apacheHttpClient4ProfileCookieDumpType=readDumpType(prop,"profiler.apache.httpclient4.cookie.dumptype",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileCookieSamplingRate=readInt(prop,"profiler.apache.httpclient4.cookie.sampling.rate",1);
  this.apacheHttpClient4ProfileEntity=readBoolean(prop,"profiler.apache.httpclient4.entity",false);
  this.apacheHttpClient4ProfileEntityDumpType=readDumpType(prop,"profiler.apache.httpclient4.entity.dumptype",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileEntitySamplingRate=readInt(prop,"profiler.apache.httpclient4.entity.sampling.rate",1);
  this.samplingEnable=readBoolean(prop,"profiler.sampling.enable",true);
  this.samplingRate=readInt(prop,"profiler.sampling.rate",1);
  this.samplingElapsedTimeBaseEnable=readBoolean(prop,"profiler.sampling.elapsedtimebase.enable",true);
  this.samplingElapsedTimeBaseBufferSize=readInt(prop,"profiler.sampling.elapsedtimebase.buffersize",20);
  this.samplingElapsedTimeBaseDiscard=readBoolean(prop,"profiler.sampling.elapsedtimebase.discard",true);
  this.samplingElapsedTimeBaseDiscardTimeLimit=readLong(prop,"profiler.sampling.elapsedtimebase.discard.timelimit",1000);
  this.profileJvmCollectInterval=readInt(prop,"profiler.jvm.collect.interval",1000);
  this.heartbeatInterval=readLong(prop,"profiler.heartbeat.interval",DEFAULT_HEART_BEAT_INTERVAL);
  this.applicationServerType=readServiceType(prop,"profiler.applicationservertype");
  String profileableClass=readString(prop,"profiler.include","");
  setProfilableClass(profileableClass);
  logger.info("configuration loaded successfully.");
}
