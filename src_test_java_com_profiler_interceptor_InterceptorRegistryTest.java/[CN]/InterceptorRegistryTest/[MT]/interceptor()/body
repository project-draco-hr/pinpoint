{
  InterceptorRegistry.addInterceptor("a",new AroundInterceptor(){
    @Override public void before(    InterceptorContext ctx){
      System.out.println("before ctx:" + ctx);
    }
    @Override public void after(    InterceptorContext ctx){
      System.out.println("after ctx:" + ctx);
    }
  }
);
  ClassPool p=ClassPool.getDefault();
  CtClass throwable=p.get(Throwable.class.getName());
  CtClass ctClass=p.get("com.profiler.interceptor.TestObject");
  System.out.println(ctClass);
  final CtMethod hello=ctClass.getMethod("hello","(Ljava/lang/String;)Ljava/lang/String;");
  CtClass ctx=p.get(InterceptorContext.class.getName());
  hello.addLocalVariable("ctx",ctx);
  CtClass interceptor=p.get(AroundInterceptor.class.getName());
  hello.addLocalVariable("interceptor",interceptor);
  CtClass object=p.get(Object.class.getName());
  hello.addLocalVariable("result",object);
  hello.insertBefore("{" + "ctx = new com.profiler.interceptor.InterceptorContext();" + "ctx.setParameter($args);"+ "interceptor = (com.profiler.interceptor.AroundInterceptor) " + InterceptorRegistry.class.getName() + ".getInterceptor(\"a\");"+ "interceptor.before(ctx);"+ "}");
  hello.addCatch("{" + " throw $e;" + "}",throwable);
  hello.insertAfter("{" + "interceptor.after(ctx); " + "}");
  hello.insertBefore(" System.out.println(\" before +  \");");
  hello.insertAfter(" System.out.println($_);");
  hello.insertAfter(" System.out.println($sig);");
  hello.insertAfter(" System.out.println($type);");
  hello.insertAfter(" System.out.println($class);");
  ctClass.freeze();
  ctClass.debugWriteFile("./debug");
  Class aClass=ctClass.toClass();
  TestObject o=(TestObject)aClass.newInstance();
  try {
    o.hello("aaaaaa");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
