{
  if (result == null) {
    return Collections.emptyList();
  }
  KeyValue[] raw=result.raw();
  List<Dot> list=new ArrayList<Dot>(raw.length);
  for (  KeyValue kv : raw) {
    final byte[] buffer=kv.getBuffer();
    final int valueOffset=kv.getValueOffset();
    int elapsed=BytesUtils.bytesToInt(buffer,valueOffset);
    int exceptionCode=BytesUtils.bytesToInt(buffer,valueOffset + BytesUtils.INT_BYTE_LENGTH);
    long reverseAcceptedTime=BytesUtils.bytesToLong(buffer,kv.getRowOffset() + HBaseTables.APPLICATION_NAME_MAX_LEN + HBaseTables.APPLICATION_TRACE_INDEX_ROW_DISTRIBUTE_SIZE);
    long acceptedTime=TimeUtils.recoveryCurrentTimeMillis(reverseAcceptedTime);
    final int qualifierOffset=kv.getQualifierOffset();
    String traceAgentId=BytesUtils.toStringAndRightTrim(buffer,qualifierOffset,HBaseTables.AGENT_NAME_MAX_LEN);
    long traceAgentStartTime=BytesUtils.bytesToLong(buffer,qualifierOffset + HBaseTables.AGENT_NAME_MAX_LEN);
    long traceTransactionId=BytesUtils.bytesToLong(buffer,qualifierOffset + BytesUtils.LONG_BYTE_LENGTH + HBaseTables.AGENT_NAME_MAX_LEN);
    String traceId=TransactionIdUtils.formatString(traceAgentId,traceAgentStartTime,traceTransactionId);
    Dot dot=new Dot(traceId,acceptedTime,elapsed,exceptionCode);
    list.add(dot);
  }
  return list;
}
