{
  final ClassFileTransformerBuilder classEditorBuilder=context.getClassFileTransformerBuilder(targetClassName);
  final ConstructorTransformerBuilder constructorEditorBuilderArg1=classEditorBuilder.editConstructor(STRING);
  constructorEditorBuilderArg1.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
  constructorEditorBuilderArg1.injectInterceptor(JEDIS_CONSTRUCTOR_INTERCEPTOR);
  final ConstructorTransformerBuilder constructorEditorBuilderArg2=classEditorBuilder.editConstructor(STRING,INT);
  constructorEditorBuilderArg2.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
  constructorEditorBuilderArg2.injectInterceptor(JEDIS_CONSTRUCTOR_INTERCEPTOR);
  final ConstructorTransformerBuilder constructorEditorBuilderArg3=classEditorBuilder.editConstructor(STRING,INT,INT);
  constructorEditorBuilderArg3.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
  constructorEditorBuilderArg3.injectInterceptor(JEDIS_CONSTRUCTOR_INTERCEPTOR);
  final ConstructorTransformerBuilder constructorEditorBuilderArg4=classEditorBuilder.editConstructor(URI);
  constructorEditorBuilderArg4.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
  constructorEditorBuilderArg4.injectInterceptor(JEDIS_CONSTRUCTOR_INTERCEPTOR);
  final ConstructorTransformerBuilder constructorEditorBuilderArg5=classEditorBuilder.editConstructor(JEDIS_SHARD_INFO);
  constructorEditorBuilderArg5.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);
  constructorEditorBuilderArg5.injectInterceptor(JEDIS_CONSTRUCTOR_INTERCEPTOR);
  final MethodTransformerBuilder methodEditorBuilder=classEditorBuilder.editMethods(new NameBasedMethodFilter(JedisMethodNames.get()));
  methodEditorBuilder.exceptionHandler(new MethodTransformerExceptionHandler(){
    @Override public void handle(    String targetClassName,    String targetMethodName,    String[] targetMethodParameterTypes,    Throwable exception) throws Exception {
      if (logger.isWarnEnabled()) {
        logger.warn("Unsupported method " + targetClassName + "."+ targetMethodName,exception);
      }
    }
  }
);
  methodEditorBuilder.injectInterceptor(JEDIS_METHODS_INTERCEPTOR);
  return classEditorBuilder;
}
