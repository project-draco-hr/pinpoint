{
  PinpointServerSocket serverSocket=new PinpointServerSocket();
  serverSocket.setMessageListener(new TestSeverMessageListener());
  serverSocket.bind("localhost",PORT);
  final AtomicBoolean reconnectPerformed=new AtomicBoolean(false);
  final PinpointSocketFactory pinpointSocketFactory=new PinpointSocketFactory();
  pinpointSocketFactory.setReconnectDelay(200);
  PinpointServerSocket newServerSocket=null;
  try {
    PinpointSocket socket=pinpointSocketFactory.connect("localhost",10234);
    socket.addPinpointSocketReconnectEventListener(new PinpointSocketReconnectEventListener(){
      @Override public void reconnectPerformed(      PinpointSocket socket){
        reconnectPerformed.set(true);
      }
    }
);
    serverSocket.close();
    logger.info("server.close()---------------------------");
    Thread.sleep(1000);
    try {
      Future<ResponseMessage> response=socket.request(new byte[10]);
      response.await();
      ResponseMessage result=response.getResult();
      Assert.fail("expected:exception");
    }
 catch (    Exception e) {
    }
    newServerSocket=new PinpointServerSocket();
    newServerSocket.setMessageListener(new TestSeverMessageListener());
    newServerSocket.bind("localhost",10234);
    logger.info("bind server---------------------------");
    Thread.sleep(3000);
    logger.info("request server---------------------------");
    byte[] randomByte=TestByteUtils.createRandomByte(10);
    Future<ResponseMessage> response=socket.request(randomByte);
    response.await();
    ResponseMessage result=response.getResult();
    Assert.assertArrayEquals(result.getMessage(),randomByte);
    socket.close();
  }
  finally {
    if (newServerSocket != null) {
      newServerSocket.close();
    }
    pinpointSocketFactory.release();
  }
  Assert.assertTrue(reconnectPerformed.get());
}
